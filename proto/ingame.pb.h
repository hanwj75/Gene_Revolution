// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ingame.proto
// Protobuf C++ Version: 5.29.5

#ifndef ingame_2eproto_2epb_2eh
#define ingame_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ingame_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ingame_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ingame_2eproto;
namespace ingame {
class C2S_PlayerAttack;
struct C2S_PlayerAttackDefaultTypeInternal;
extern C2S_PlayerAttackDefaultTypeInternal _C2S_PlayerAttack_default_instance_;
class C2S_PlayerMove;
struct C2S_PlayerMoveDefaultTypeInternal;
extern C2S_PlayerMoveDefaultTypeInternal _C2S_PlayerMove_default_instance_;
class S2C_GameState;
struct S2C_GameStateDefaultTypeInternal;
extern S2C_GameStateDefaultTypeInternal _S2C_GameState_default_instance_;
class S2C_GameState_PlayerState;
struct S2C_GameState_PlayerStateDefaultTypeInternal;
extern S2C_GameState_PlayerStateDefaultTypeInternal _S2C_GameState_PlayerState_default_instance_;
class S2C_PlayerAttack;
struct S2C_PlayerAttackDefaultTypeInternal;
extern S2C_PlayerAttackDefaultTypeInternal _S2C_PlayerAttack_default_instance_;
class S2C_PlayerMove;
struct S2C_PlayerMoveDefaultTypeInternal;
extern S2C_PlayerMoveDefaultTypeInternal _S2C_PlayerMove_default_instance_;
}  // namespace ingame
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ingame {

// ===================================================================


// -------------------------------------------------------------------

class S2C_PlayerMove final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_PlayerMove) */ {
 public:
  inline S2C_PlayerMove() : S2C_PlayerMove(nullptr) {}
  ~S2C_PlayerMove() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_PlayerMove* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_PlayerMove));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_PlayerMove(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_PlayerMove(const S2C_PlayerMove& from) : S2C_PlayerMove(nullptr, from) {}
  inline S2C_PlayerMove(S2C_PlayerMove&& from) noexcept
      : S2C_PlayerMove(nullptr, std::move(from)) {}
  inline S2C_PlayerMove& operator=(const S2C_PlayerMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_PlayerMove& operator=(S2C_PlayerMove&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_PlayerMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_PlayerMove* internal_default_instance() {
    return reinterpret_cast<const S2C_PlayerMove*>(
        &_S2C_PlayerMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(S2C_PlayerMove& a, S2C_PlayerMove& b) { a.Swap(&b); }
  inline void Swap(S2C_PlayerMove* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_PlayerMove* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_PlayerMove* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_PlayerMove>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_PlayerMove& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_PlayerMove& from) { S2C_PlayerMove::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_PlayerMove* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_PlayerMove"; }

 protected:
  explicit S2C_PlayerMove(::google::protobuf::Arena* arena);
  S2C_PlayerMove(::google::protobuf::Arena* arena, const S2C_PlayerMove& from);
  S2C_PlayerMove(::google::protobuf::Arena* arena, S2C_PlayerMove&& from) noexcept
      : S2C_PlayerMove(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kDirFieldNumber = 4,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // float x = 2;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 3;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float dir = 4;
  void clear_dir() ;
  float dir() const;
  void set_dir(float value);

  private:
  float _internal_dir() const;
  void _internal_set_dir(float value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_PlayerMove)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_PlayerMove& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    float x_;
    float y_;
    float dir_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_PlayerAttack final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_PlayerAttack) */ {
 public:
  inline S2C_PlayerAttack() : S2C_PlayerAttack(nullptr) {}
  ~S2C_PlayerAttack() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_PlayerAttack* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_PlayerAttack));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_PlayerAttack(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_PlayerAttack(const S2C_PlayerAttack& from) : S2C_PlayerAttack(nullptr, from) {}
  inline S2C_PlayerAttack(S2C_PlayerAttack&& from) noexcept
      : S2C_PlayerAttack(nullptr, std::move(from)) {}
  inline S2C_PlayerAttack& operator=(const S2C_PlayerAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_PlayerAttack& operator=(S2C_PlayerAttack&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_PlayerAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_PlayerAttack* internal_default_instance() {
    return reinterpret_cast<const S2C_PlayerAttack*>(
        &_S2C_PlayerAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(S2C_PlayerAttack& a, S2C_PlayerAttack& b) { a.Swap(&b); }
  inline void Swap(S2C_PlayerAttack* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_PlayerAttack* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_PlayerAttack* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_PlayerAttack>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_PlayerAttack& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_PlayerAttack& from) { S2C_PlayerAttack::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_PlayerAttack* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_PlayerAttack"; }

 protected:
  explicit S2C_PlayerAttack(::google::protobuf::Arena* arena);
  S2C_PlayerAttack(::google::protobuf::Arena* arena, const S2C_PlayerAttack& from);
  S2C_PlayerAttack(::google::protobuf::Arena* arena, S2C_PlayerAttack&& from) noexcept
      : S2C_PlayerAttack(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kAttackTypeFieldNumber = 2,
    kHitFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // int32 attack_type = 2;
  void clear_attack_type() ;
  ::int32_t attack_type() const;
  void set_attack_type(::int32_t value);

  private:
  ::int32_t _internal_attack_type() const;
  void _internal_set_attack_type(::int32_t value);

  public:
  // bool hit = 3;
  void clear_hit() ;
  bool hit() const;
  void set_hit(bool value);

  private:
  bool _internal_hit() const;
  void _internal_set_hit(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_PlayerAttack)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_PlayerAttack& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::int32_t attack_type_;
    bool hit_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_GameState_PlayerState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_GameState.PlayerState) */ {
 public:
  inline S2C_GameState_PlayerState() : S2C_GameState_PlayerState(nullptr) {}
  ~S2C_GameState_PlayerState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_GameState_PlayerState* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_GameState_PlayerState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_GameState_PlayerState(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_GameState_PlayerState(const S2C_GameState_PlayerState& from) : S2C_GameState_PlayerState(nullptr, from) {}
  inline S2C_GameState_PlayerState(S2C_GameState_PlayerState&& from) noexcept
      : S2C_GameState_PlayerState(nullptr, std::move(from)) {}
  inline S2C_GameState_PlayerState& operator=(const S2C_GameState_PlayerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_GameState_PlayerState& operator=(S2C_GameState_PlayerState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_GameState_PlayerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_GameState_PlayerState* internal_default_instance() {
    return reinterpret_cast<const S2C_GameState_PlayerState*>(
        &_S2C_GameState_PlayerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(S2C_GameState_PlayerState& a, S2C_GameState_PlayerState& b) { a.Swap(&b); }
  inline void Swap(S2C_GameState_PlayerState* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_GameState_PlayerState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_GameState_PlayerState* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_GameState_PlayerState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_GameState_PlayerState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_GameState_PlayerState& from) { S2C_GameState_PlayerState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_GameState_PlayerState* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_GameState.PlayerState"; }

 protected:
  explicit S2C_GameState_PlayerState(::google::protobuf::Arena* arena);
  S2C_GameState_PlayerState(::google::protobuf::Arena* arena, const S2C_GameState_PlayerState& from);
  S2C_GameState_PlayerState(::google::protobuf::Arena* arena, S2C_GameState_PlayerState&& from) noexcept
      : S2C_GameState_PlayerState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kDirFieldNumber = 4,
    kHpFieldNumber = 5,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // float x = 2;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 3;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float dir = 4;
  void clear_dir() ;
  float dir() const;
  void set_dir(float value);

  private:
  float _internal_dir() const;
  void _internal_set_dir(float value);

  public:
  // int32 hp = 5;
  void clear_hp() ;
  ::int32_t hp() const;
  void set_hp(::int32_t value);

  private:
  ::int32_t _internal_hp() const;
  void _internal_set_hp(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_GameState.PlayerState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_GameState_PlayerState& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    float x_;
    float y_;
    float dir_;
    ::int32_t hp_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class C2S_PlayerMove final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.C2S_PlayerMove) */ {
 public:
  inline C2S_PlayerMove() : C2S_PlayerMove(nullptr) {}
  ~C2S_PlayerMove() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(C2S_PlayerMove* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(C2S_PlayerMove));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR C2S_PlayerMove(
      ::google::protobuf::internal::ConstantInitialized);

  inline C2S_PlayerMove(const C2S_PlayerMove& from) : C2S_PlayerMove(nullptr, from) {}
  inline C2S_PlayerMove(C2S_PlayerMove&& from) noexcept
      : C2S_PlayerMove(nullptr, std::move(from)) {}
  inline C2S_PlayerMove& operator=(const C2S_PlayerMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_PlayerMove& operator=(C2S_PlayerMove&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_PlayerMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_PlayerMove* internal_default_instance() {
    return reinterpret_cast<const C2S_PlayerMove*>(
        &_C2S_PlayerMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(C2S_PlayerMove& a, C2S_PlayerMove& b) { a.Swap(&b); }
  inline void Swap(C2S_PlayerMove* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_PlayerMove* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_PlayerMove* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<C2S_PlayerMove>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C2S_PlayerMove& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const C2S_PlayerMove& from) { C2S_PlayerMove::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(C2S_PlayerMove* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.C2S_PlayerMove"; }

 protected:
  explicit C2S_PlayerMove(::google::protobuf::Arena* arena);
  C2S_PlayerMove(::google::protobuf::Arena* arena, const C2S_PlayerMove& from);
  C2S_PlayerMove(::google::protobuf::Arena* arena, C2S_PlayerMove&& from) noexcept
      : C2S_PlayerMove(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kDirFieldNumber = 4,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // float x = 2;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 3;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float dir = 4;
  void clear_dir() ;
  float dir() const;
  void set_dir(float value);

  private:
  float _internal_dir() const;
  void _internal_set_dir(float value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.C2S_PlayerMove)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const C2S_PlayerMove& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    float x_;
    float y_;
    float dir_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class C2S_PlayerAttack final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.C2S_PlayerAttack) */ {
 public:
  inline C2S_PlayerAttack() : C2S_PlayerAttack(nullptr) {}
  ~C2S_PlayerAttack() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(C2S_PlayerAttack* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(C2S_PlayerAttack));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR C2S_PlayerAttack(
      ::google::protobuf::internal::ConstantInitialized);

  inline C2S_PlayerAttack(const C2S_PlayerAttack& from) : C2S_PlayerAttack(nullptr, from) {}
  inline C2S_PlayerAttack(C2S_PlayerAttack&& from) noexcept
      : C2S_PlayerAttack(nullptr, std::move(from)) {}
  inline C2S_PlayerAttack& operator=(const C2S_PlayerAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_PlayerAttack& operator=(C2S_PlayerAttack&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_PlayerAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_PlayerAttack* internal_default_instance() {
    return reinterpret_cast<const C2S_PlayerAttack*>(
        &_C2S_PlayerAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(C2S_PlayerAttack& a, C2S_PlayerAttack& b) { a.Swap(&b); }
  inline void Swap(C2S_PlayerAttack* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_PlayerAttack* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_PlayerAttack* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<C2S_PlayerAttack>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C2S_PlayerAttack& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const C2S_PlayerAttack& from) { C2S_PlayerAttack::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(C2S_PlayerAttack* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.C2S_PlayerAttack"; }

 protected:
  explicit C2S_PlayerAttack(::google::protobuf::Arena* arena);
  C2S_PlayerAttack(::google::protobuf::Arena* arena, const C2S_PlayerAttack& from);
  C2S_PlayerAttack(::google::protobuf::Arena* arena, C2S_PlayerAttack&& from) noexcept
      : C2S_PlayerAttack(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kAttackTypeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // int32 attack_type = 2;
  void clear_attack_type() ;
  ::int32_t attack_type() const;
  void set_attack_type(::int32_t value);

  private:
  ::int32_t _internal_attack_type() const;
  void _internal_set_attack_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.C2S_PlayerAttack)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const C2S_PlayerAttack& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::int32_t attack_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_GameState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_GameState) */ {
 public:
  inline S2C_GameState() : S2C_GameState(nullptr) {}
  ~S2C_GameState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_GameState* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_GameState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_GameState(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_GameState(const S2C_GameState& from) : S2C_GameState(nullptr, from) {}
  inline S2C_GameState(S2C_GameState&& from) noexcept
      : S2C_GameState(nullptr, std::move(from)) {}
  inline S2C_GameState& operator=(const S2C_GameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_GameState& operator=(S2C_GameState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_GameState& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_GameState* internal_default_instance() {
    return reinterpret_cast<const S2C_GameState*>(
        &_S2C_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(S2C_GameState& a, S2C_GameState& b) { a.Swap(&b); }
  inline void Swap(S2C_GameState* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_GameState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_GameState* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_GameState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_GameState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_GameState& from) { S2C_GameState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_GameState* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_GameState"; }

 protected:
  explicit S2C_GameState(::google::protobuf::Arena* arena);
  S2C_GameState(::google::protobuf::Arena* arena, const S2C_GameState& from);
  S2C_GameState(::google::protobuf::Arena* arena, S2C_GameState&& from) noexcept
      : S2C_GameState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using PlayerState = S2C_GameState_PlayerState;

  // accessors -------------------------------------------------------
  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .ingame.S2C_GameState.PlayerState players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;

  public:
  void clear_players() ;
  ::ingame::S2C_GameState_PlayerState* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_PlayerState>* mutable_players();

  private:
  const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_PlayerState>& _internal_players() const;
  ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_PlayerState>* _internal_mutable_players();
  public:
  const ::ingame::S2C_GameState_PlayerState& players(int index) const;
  ::ingame::S2C_GameState_PlayerState* add_players();
  const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_PlayerState>& players() const;
  // @@protoc_insertion_point(class_scope:ingame.S2C_GameState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_GameState& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ingame::S2C_GameState_PlayerState > players_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// C2S_PlayerMove

// string user_id = 1;
inline void C2S_PlayerMove::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& C2S_PlayerMove::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.C2S_PlayerMove.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C2S_PlayerMove::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.C2S_PlayerMove.user_id)
}
inline std::string* C2S_PlayerMove::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.C2S_PlayerMove.user_id)
  return _s;
}
inline const std::string& C2S_PlayerMove::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void C2S_PlayerMove::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* C2S_PlayerMove::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* C2S_PlayerMove::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.C2S_PlayerMove.user_id)
  return _impl_.user_id_.Release();
}
inline void C2S_PlayerMove::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.C2S_PlayerMove.user_id)
}

// float x = 2;
inline void C2S_PlayerMove::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline float C2S_PlayerMove::x() const {
  // @@protoc_insertion_point(field_get:ingame.C2S_PlayerMove.x)
  return _internal_x();
}
inline void C2S_PlayerMove::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ingame.C2S_PlayerMove.x)
}
inline float C2S_PlayerMove::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void C2S_PlayerMove::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// float y = 3;
inline void C2S_PlayerMove::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline float C2S_PlayerMove::y() const {
  // @@protoc_insertion_point(field_get:ingame.C2S_PlayerMove.y)
  return _internal_y();
}
inline void C2S_PlayerMove::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ingame.C2S_PlayerMove.y)
}
inline float C2S_PlayerMove::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void C2S_PlayerMove::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// float dir = 4;
inline void C2S_PlayerMove::clear_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dir_ = 0;
}
inline float C2S_PlayerMove::dir() const {
  // @@protoc_insertion_point(field_get:ingame.C2S_PlayerMove.dir)
  return _internal_dir();
}
inline void C2S_PlayerMove::set_dir(float value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:ingame.C2S_PlayerMove.dir)
}
inline float C2S_PlayerMove::_internal_dir() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dir_;
}
inline void C2S_PlayerMove::_internal_set_dir(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dir_ = value;
}

// -------------------------------------------------------------------

// S2C_PlayerMove

// string user_id = 1;
inline void S2C_PlayerMove::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& S2C_PlayerMove::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerMove.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_PlayerMove::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_PlayerMove.user_id)
}
inline std::string* S2C_PlayerMove::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_PlayerMove.user_id)
  return _s;
}
inline const std::string& S2C_PlayerMove::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void S2C_PlayerMove::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* S2C_PlayerMove::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* S2C_PlayerMove::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_PlayerMove.user_id)
  return _impl_.user_id_.Release();
}
inline void S2C_PlayerMove::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_PlayerMove.user_id)
}

// float x = 2;
inline void S2C_PlayerMove::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline float S2C_PlayerMove::x() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerMove.x)
  return _internal_x();
}
inline void S2C_PlayerMove::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_PlayerMove.x)
}
inline float S2C_PlayerMove::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void S2C_PlayerMove::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// float y = 3;
inline void S2C_PlayerMove::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline float S2C_PlayerMove::y() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerMove.y)
  return _internal_y();
}
inline void S2C_PlayerMove::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_PlayerMove.y)
}
inline float S2C_PlayerMove::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void S2C_PlayerMove::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// float dir = 4;
inline void S2C_PlayerMove::clear_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dir_ = 0;
}
inline float S2C_PlayerMove::dir() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerMove.dir)
  return _internal_dir();
}
inline void S2C_PlayerMove::set_dir(float value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_PlayerMove.dir)
}
inline float S2C_PlayerMove::_internal_dir() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dir_;
}
inline void S2C_PlayerMove::_internal_set_dir(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dir_ = value;
}

// -------------------------------------------------------------------

// C2S_PlayerAttack

// string user_id = 1;
inline void C2S_PlayerAttack::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& C2S_PlayerAttack::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.C2S_PlayerAttack.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C2S_PlayerAttack::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.C2S_PlayerAttack.user_id)
}
inline std::string* C2S_PlayerAttack::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.C2S_PlayerAttack.user_id)
  return _s;
}
inline const std::string& C2S_PlayerAttack::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void C2S_PlayerAttack::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* C2S_PlayerAttack::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* C2S_PlayerAttack::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.C2S_PlayerAttack.user_id)
  return _impl_.user_id_.Release();
}
inline void C2S_PlayerAttack::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.C2S_PlayerAttack.user_id)
}

// int32 attack_type = 2;
inline void C2S_PlayerAttack::clear_attack_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack_type_ = 0;
}
inline ::int32_t C2S_PlayerAttack::attack_type() const {
  // @@protoc_insertion_point(field_get:ingame.C2S_PlayerAttack.attack_type)
  return _internal_attack_type();
}
inline void C2S_PlayerAttack::set_attack_type(::int32_t value) {
  _internal_set_attack_type(value);
  // @@protoc_insertion_point(field_set:ingame.C2S_PlayerAttack.attack_type)
}
inline ::int32_t C2S_PlayerAttack::_internal_attack_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attack_type_;
}
inline void C2S_PlayerAttack::_internal_set_attack_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack_type_ = value;
}

// -------------------------------------------------------------------

// S2C_PlayerAttack

// string user_id = 1;
inline void S2C_PlayerAttack::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& S2C_PlayerAttack::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerAttack.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_PlayerAttack::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_PlayerAttack.user_id)
}
inline std::string* S2C_PlayerAttack::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_PlayerAttack.user_id)
  return _s;
}
inline const std::string& S2C_PlayerAttack::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void S2C_PlayerAttack::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* S2C_PlayerAttack::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* S2C_PlayerAttack::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_PlayerAttack.user_id)
  return _impl_.user_id_.Release();
}
inline void S2C_PlayerAttack::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_PlayerAttack.user_id)
}

// int32 attack_type = 2;
inline void S2C_PlayerAttack::clear_attack_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack_type_ = 0;
}
inline ::int32_t S2C_PlayerAttack::attack_type() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerAttack.attack_type)
  return _internal_attack_type();
}
inline void S2C_PlayerAttack::set_attack_type(::int32_t value) {
  _internal_set_attack_type(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_PlayerAttack.attack_type)
}
inline ::int32_t S2C_PlayerAttack::_internal_attack_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attack_type_;
}
inline void S2C_PlayerAttack::_internal_set_attack_type(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack_type_ = value;
}

// bool hit = 3;
inline void S2C_PlayerAttack::clear_hit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hit_ = false;
}
inline bool S2C_PlayerAttack::hit() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerAttack.hit)
  return _internal_hit();
}
inline void S2C_PlayerAttack::set_hit(bool value) {
  _internal_set_hit(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_PlayerAttack.hit)
}
inline bool S2C_PlayerAttack::_internal_hit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hit_;
}
inline void S2C_PlayerAttack::_internal_set_hit(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hit_ = value;
}

// -------------------------------------------------------------------

// S2C_GameState_PlayerState

// string user_id = 1;
inline void S2C_GameState_PlayerState::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& S2C_GameState_PlayerState::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.PlayerState.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_GameState_PlayerState::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_GameState.PlayerState.user_id)
}
inline std::string* S2C_GameState_PlayerState::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GameState.PlayerState.user_id)
  return _s;
}
inline const std::string& S2C_GameState_PlayerState::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void S2C_GameState_PlayerState::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* S2C_GameState_PlayerState::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* S2C_GameState_PlayerState::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_GameState.PlayerState.user_id)
  return _impl_.user_id_.Release();
}
inline void S2C_GameState_PlayerState::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_GameState.PlayerState.user_id)
}

// float x = 2;
inline void S2C_GameState_PlayerState::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline float S2C_GameState_PlayerState::x() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.PlayerState.x)
  return _internal_x();
}
inline void S2C_GameState_PlayerState::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameState.PlayerState.x)
}
inline float S2C_GameState_PlayerState::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void S2C_GameState_PlayerState::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// float y = 3;
inline void S2C_GameState_PlayerState::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline float S2C_GameState_PlayerState::y() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.PlayerState.y)
  return _internal_y();
}
inline void S2C_GameState_PlayerState::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameState.PlayerState.y)
}
inline float S2C_GameState_PlayerState::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void S2C_GameState_PlayerState::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// float dir = 4;
inline void S2C_GameState_PlayerState::clear_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dir_ = 0;
}
inline float S2C_GameState_PlayerState::dir() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.PlayerState.dir)
  return _internal_dir();
}
inline void S2C_GameState_PlayerState::set_dir(float value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameState.PlayerState.dir)
}
inline float S2C_GameState_PlayerState::_internal_dir() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dir_;
}
inline void S2C_GameState_PlayerState::_internal_set_dir(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dir_ = value;
}

// int32 hp = 5;
inline void S2C_GameState_PlayerState::clear_hp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hp_ = 0;
}
inline ::int32_t S2C_GameState_PlayerState::hp() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.PlayerState.hp)
  return _internal_hp();
}
inline void S2C_GameState_PlayerState::set_hp(::int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameState.PlayerState.hp)
}
inline ::int32_t S2C_GameState_PlayerState::_internal_hp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hp_;
}
inline void S2C_GameState_PlayerState::_internal_set_hp(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hp_ = value;
}

// -------------------------------------------------------------------

// S2C_GameState

// repeated .ingame.S2C_GameState.PlayerState players = 1;
inline int S2C_GameState::_internal_players_size() const {
  return _internal_players().size();
}
inline int S2C_GameState::players_size() const {
  return _internal_players_size();
}
inline void S2C_GameState::clear_players() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.players_.Clear();
}
inline ::ingame::S2C_GameState_PlayerState* S2C_GameState::mutable_players(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GameState.players)
  return _internal_mutable_players()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_PlayerState>* S2C_GameState::mutable_players()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ingame.S2C_GameState.players)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_players();
}
inline const ::ingame::S2C_GameState_PlayerState& S2C_GameState::players(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.players)
  return _internal_players().Get(index);
}
inline ::ingame::S2C_GameState_PlayerState* S2C_GameState::add_players() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ingame::S2C_GameState_PlayerState* _add = _internal_mutable_players()->Add();
  // @@protoc_insertion_point(field_add:ingame.S2C_GameState.players)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_PlayerState>& S2C_GameState::players() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ingame.S2C_GameState.players)
  return _internal_players();
}
inline const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_PlayerState>&
S2C_GameState::_internal_players() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.players_;
}
inline ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_PlayerState>*
S2C_GameState::_internal_mutable_players() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.players_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ingame


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ingame_2eproto_2epb_2eh
