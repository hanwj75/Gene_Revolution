// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ingame.proto
// Protobuf C++ Version: 5.29.5

#ifndef ingame_2eproto_2epb_2eh
#define ingame_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ingame_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ingame_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ingame_2eproto;
namespace ingame {
class C2S_EquipGene;
struct C2S_EquipGeneDefaultTypeInternal;
extern C2S_EquipGeneDefaultTypeInternal _C2S_EquipGene_default_instance_;
class C2S_GeneAcquired;
struct C2S_GeneAcquiredDefaultTypeInternal;
extern C2S_GeneAcquiredDefaultTypeInternal _C2S_GeneAcquired_default_instance_;
class C2S_HiddenSkill;
struct C2S_HiddenSkillDefaultTypeInternal;
extern C2S_HiddenSkillDefaultTypeInternal _C2S_HiddenSkill_default_instance_;
class C2S_JoinGame;
struct C2S_JoinGameDefaultTypeInternal;
extern C2S_JoinGameDefaultTypeInternal _C2S_JoinGame_default_instance_;
class C2S_PickupCrown;
struct C2S_PickupCrownDefaultTypeInternal;
extern C2S_PickupCrownDefaultTypeInternal _C2S_PickupCrown_default_instance_;
class C2S_PlayerAttack;
struct C2S_PlayerAttackDefaultTypeInternal;
extern C2S_PlayerAttackDefaultTypeInternal _C2S_PlayerAttack_default_instance_;
class C2S_PlayerMove;
struct C2S_PlayerMoveDefaultTypeInternal;
extern C2S_PlayerMoveDefaultTypeInternal _C2S_PlayerMove_default_instance_;
class C2S_TransformGiant;
struct C2S_TransformGiantDefaultTypeInternal;
extern C2S_TransformGiantDefaultTypeInternal _C2S_TransformGiant_default_instance_;
class GameWorldState;
struct GameWorldStateDefaultTypeInternal;
extern GameWorldStateDefaultTypeInternal _GameWorldState_default_instance_;
class GiantStats;
struct GiantStatsDefaultTypeInternal;
extern GiantStatsDefaultTypeInternal _GiantStats_default_instance_;
class PlayerRaceState;
struct PlayerRaceStateDefaultTypeInternal;
extern PlayerRaceStateDefaultTypeInternal _PlayerRaceState_default_instance_;
class PlayerRaceState_GeneInventoryEntry_DoNotUse;
struct PlayerRaceState_GeneInventoryEntry_DoNotUseDefaultTypeInternal;
extern PlayerRaceState_GeneInventoryEntry_DoNotUseDefaultTypeInternal _PlayerRaceState_GeneInventoryEntry_DoNotUse_default_instance_;
class S2C_AttackHitNotification;
struct S2C_AttackHitNotificationDefaultTypeInternal;
extern S2C_AttackHitNotificationDefaultTypeInternal _S2C_AttackHitNotification_default_instance_;
class S2C_CrownDropNotification;
struct S2C_CrownDropNotificationDefaultTypeInternal;
extern S2C_CrownDropNotificationDefaultTypeInternal _S2C_CrownDropNotification_default_instance_;
class S2C_CrownNotification;
struct S2C_CrownNotificationDefaultTypeInternal;
extern S2C_CrownNotificationDefaultTypeInternal _S2C_CrownNotification_default_instance_;
class S2C_CrownPickupResult;
struct S2C_CrownPickupResultDefaultTypeInternal;
extern S2C_CrownPickupResultDefaultTypeInternal _S2C_CrownPickupResult_default_instance_;
class S2C_DamageContribution;
struct S2C_DamageContributionDefaultTypeInternal;
extern S2C_DamageContributionDefaultTypeInternal _S2C_DamageContribution_default_instance_;
class S2C_GameEnd;
struct S2C_GameEndDefaultTypeInternal;
extern S2C_GameEndDefaultTypeInternal _S2C_GameEnd_default_instance_;
class S2C_GameEnd_PlayerResult;
struct S2C_GameEnd_PlayerResultDefaultTypeInternal;
extern S2C_GameEnd_PlayerResultDefaultTypeInternal _S2C_GameEnd_PlayerResult_default_instance_;
class S2C_GameState;
struct S2C_GameStateDefaultTypeInternal;
extern S2C_GameStateDefaultTypeInternal _S2C_GameState_default_instance_;
class S2C_GameState_MonsterState;
struct S2C_GameState_MonsterStateDefaultTypeInternal;
extern S2C_GameState_MonsterStateDefaultTypeInternal _S2C_GameState_MonsterState_default_instance_;
class S2C_GameState_PlayerState;
struct S2C_GameState_PlayerStateDefaultTypeInternal;
extern S2C_GameState_PlayerStateDefaultTypeInternal _S2C_GameState_PlayerState_default_instance_;
class S2C_GeneAcquiredResult;
struct S2C_GeneAcquiredResultDefaultTypeInternal;
extern S2C_GeneAcquiredResultDefaultTypeInternal _S2C_GeneAcquiredResult_default_instance_;
class S2C_GeneEquipResult;
struct S2C_GeneEquipResultDefaultTypeInternal;
extern S2C_GeneEquipResultDefaultTypeInternal _S2C_GeneEquipResult_default_instance_;
class S2C_GiantKillContributionResult;
struct S2C_GiantKillContributionResultDefaultTypeInternal;
extern S2C_GiantKillContributionResultDefaultTypeInternal _S2C_GiantKillContributionResult_default_instance_;
class S2C_GiantKillContributionResult_Contribution;
struct S2C_GiantKillContributionResult_ContributionDefaultTypeInternal;
extern S2C_GiantKillContributionResult_ContributionDefaultTypeInternal _S2C_GiantKillContributionResult_Contribution_default_instance_;
class S2C_HiddenSkillResult;
struct S2C_HiddenSkillResultDefaultTypeInternal;
extern S2C_HiddenSkillResultDefaultTypeInternal _S2C_HiddenSkillResult_default_instance_;
class S2C_JoinGameResult;
struct S2C_JoinGameResultDefaultTypeInternal;
extern S2C_JoinGameResultDefaultTypeInternal _S2C_JoinGameResult_default_instance_;
class S2C_PlayerAttackResult;
struct S2C_PlayerAttackResultDefaultTypeInternal;
extern S2C_PlayerAttackResultDefaultTypeInternal _S2C_PlayerAttackResult_default_instance_;
class S2C_PlayerDeathNotification;
struct S2C_PlayerDeathNotificationDefaultTypeInternal;
extern S2C_PlayerDeathNotificationDefaultTypeInternal _S2C_PlayerDeathNotification_default_instance_;
class S2C_PlayerMoveNotification;
struct S2C_PlayerMoveNotificationDefaultTypeInternal;
extern S2C_PlayerMoveNotificationDefaultTypeInternal _S2C_PlayerMoveNotification_default_instance_;
class S2C_TransformResult;
struct S2C_TransformResultDefaultTypeInternal;
extern S2C_TransformResultDefaultTypeInternal _S2C_TransformResult_default_instance_;
class Vector2;
struct Vector2DefaultTypeInternal;
extern Vector2DefaultTypeInternal _Vector2_default_instance_;
}  // namespace ingame
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace ingame {
enum RaceType : int {
  RACE_UNKNOWN = 0,
  RACE_HUMAN = 1,
  RACE_ATTACK_GIANT = 2,
  RACE_SPEED_GIANT = 3,
  RACE_RANGE_GIANT = 4,
  RACE_HEALTH_GIANT = 5,
  RACE_SIZE_GIANT = 6,
  RACE_NOT_HUMAN = 7,
  RaceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RaceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RaceType_IsValid(int value);
extern const uint32_t RaceType_internal_data_[];
constexpr RaceType RaceType_MIN = static_cast<RaceType>(0);
constexpr RaceType RaceType_MAX = static_cast<RaceType>(7);
constexpr int RaceType_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
RaceType_descriptor();
template <typename T>
const std::string& RaceType_Name(T value) {
  static_assert(std::is_same<T, RaceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RaceType_Name().");
  return RaceType_Name(static_cast<RaceType>(value));
}
template <>
inline const std::string& RaceType_Name(RaceType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RaceType_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool RaceType_Parse(absl::string_view name, RaceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RaceType>(
      RaceType_descriptor(), name, value);
}
enum GeneType : int {
  UNKNOWN_GENE = 0,
  NORMAL_ATTACK_SPEED_GENE = 1,
  NORMAL_MOVE_SPEED_GENE = 2,
  NORMAL_ATTACK_RANGE_GENE = 3,
  NORMAL_HEALTH_GENE = 4,
  NORMAL_SIZE_GENE = 5,
  HIDDEN_SWORD_GENE = 6,
  HIDDEN_SHIELD_GENE = 7,
  HIDDEN_REGENERATION_GENE = 8,
  HIDDEN_SUMMONER_GENE = 9,
  HIDDEN_FLASH_GENE = 10,
  GeneType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GeneType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GeneType_IsValid(int value);
extern const uint32_t GeneType_internal_data_[];
constexpr GeneType GeneType_MIN = static_cast<GeneType>(0);
constexpr GeneType GeneType_MAX = static_cast<GeneType>(10);
constexpr int GeneType_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor*
GeneType_descriptor();
template <typename T>
const std::string& GeneType_Name(T value) {
  static_assert(std::is_same<T, GeneType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GeneType_Name().");
  return GeneType_Name(static_cast<GeneType>(value));
}
template <>
inline const std::string& GeneType_Name(GeneType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GeneType_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool GeneType_Parse(absl::string_view name, GeneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GeneType>(
      GeneType_descriptor(), name, value);
}
enum AttackType : int {
  UNKNOWN_ATTACK = 0,
  NORMAL_ATTACK = 1,
  GIANT_ATTACK = 2,
  AttackType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AttackType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AttackType_IsValid(int value);
extern const uint32_t AttackType_internal_data_[];
constexpr AttackType AttackType_MIN = static_cast<AttackType>(0);
constexpr AttackType AttackType_MAX = static_cast<AttackType>(2);
constexpr int AttackType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
AttackType_descriptor();
template <typename T>
const std::string& AttackType_Name(T value) {
  static_assert(std::is_same<T, AttackType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AttackType_Name().");
  return AttackType_Name(static_cast<AttackType>(value));
}
template <>
inline const std::string& AttackType_Name(AttackType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AttackType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool AttackType_Parse(absl::string_view name, AttackType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AttackType>(
      AttackType_descriptor(), name, value);
}
enum MonsterType : int {
  NONE_MONSTER = 0,
  NORMAL_MONSTER = 1,
  HIDDEN_MONSTER = 2,
  SUMMONER_MONSTER = 3,
  MonsterType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MonsterType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MonsterType_IsValid(int value);
extern const uint32_t MonsterType_internal_data_[];
constexpr MonsterType MonsterType_MIN = static_cast<MonsterType>(0);
constexpr MonsterType MonsterType_MAX = static_cast<MonsterType>(3);
constexpr int MonsterType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
MonsterType_descriptor();
template <typename T>
const std::string& MonsterType_Name(T value) {
  static_assert(std::is_same<T, MonsterType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MonsterType_Name().");
  return MonsterType_Name(static_cast<MonsterType>(value));
}
template <>
inline const std::string& MonsterType_Name(MonsterType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MonsterType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool MonsterType_Parse(absl::string_view name, MonsterType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MonsterType>(
      MonsterType_descriptor(), name, value);
}
enum DeathType : int {
  DEATH_UNKNOWN = 0,
  DEATH_BY_HUMAN = 1,
  DEATH_BY_MONSTER = 2,
  DEATH_BY_GIANT = 3,
  DeathType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DeathType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DeathType_IsValid(int value);
extern const uint32_t DeathType_internal_data_[];
constexpr DeathType DeathType_MIN = static_cast<DeathType>(0);
constexpr DeathType DeathType_MAX = static_cast<DeathType>(3);
constexpr int DeathType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
DeathType_descriptor();
template <typename T>
const std::string& DeathType_Name(T value) {
  static_assert(std::is_same<T, DeathType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DeathType_Name().");
  return DeathType_Name(static_cast<DeathType>(value));
}
template <>
inline const std::string& DeathType_Name(DeathType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DeathType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool DeathType_Parse(absl::string_view name, DeathType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeathType>(
      DeathType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Vector2 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.Vector2) */ {
 public:
  inline Vector2() : Vector2(nullptr) {}
  ~Vector2() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Vector2* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Vector2));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Vector2(
      ::google::protobuf::internal::ConstantInitialized);

  inline Vector2(const Vector2& from) : Vector2(nullptr, from) {}
  inline Vector2(Vector2&& from) noexcept
      : Vector2(nullptr, std::move(from)) {}
  inline Vector2& operator=(const Vector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2& operator=(Vector2&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2* internal_default_instance() {
    return reinterpret_cast<const Vector2*>(
        &_Vector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Vector2& a, Vector2& b) { a.Swap(&b); }
  inline void Swap(Vector2* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector2* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Vector2>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Vector2& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Vector2& from) { Vector2::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Vector2* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.Vector2"; }

 protected:
  explicit Vector2(::google::protobuf::Arena* arena);
  Vector2(::google::protobuf::Arena* arena, const Vector2& from);
  Vector2(::google::protobuf::Arena* arena, Vector2&& from) noexcept
      : Vector2(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 2;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.Vector2)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Vector2& from_msg);
    float x_;
    float y_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_PlayerDeathNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_PlayerDeathNotification) */ {
 public:
  inline S2C_PlayerDeathNotification() : S2C_PlayerDeathNotification(nullptr) {}
  ~S2C_PlayerDeathNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_PlayerDeathNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_PlayerDeathNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_PlayerDeathNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_PlayerDeathNotification(const S2C_PlayerDeathNotification& from) : S2C_PlayerDeathNotification(nullptr, from) {}
  inline S2C_PlayerDeathNotification(S2C_PlayerDeathNotification&& from) noexcept
      : S2C_PlayerDeathNotification(nullptr, std::move(from)) {}
  inline S2C_PlayerDeathNotification& operator=(const S2C_PlayerDeathNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_PlayerDeathNotification& operator=(S2C_PlayerDeathNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_PlayerDeathNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_PlayerDeathNotification* internal_default_instance() {
    return reinterpret_cast<const S2C_PlayerDeathNotification*>(
        &_S2C_PlayerDeathNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(S2C_PlayerDeathNotification& a, S2C_PlayerDeathNotification& b) { a.Swap(&b); }
  inline void Swap(S2C_PlayerDeathNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_PlayerDeathNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_PlayerDeathNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_PlayerDeathNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_PlayerDeathNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_PlayerDeathNotification& from) { S2C_PlayerDeathNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_PlayerDeathNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_PlayerDeathNotification"; }

 protected:
  explicit S2C_PlayerDeathNotification(::google::protobuf::Arena* arena);
  S2C_PlayerDeathNotification(::google::protobuf::Arena* arena, const S2C_PlayerDeathNotification& from);
  S2C_PlayerDeathNotification(::google::protobuf::Arena* arena, S2C_PlayerDeathNotification&& from) noexcept
      : S2C_PlayerDeathNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPlayerIdFieldNumber = 1,
    kKillerIdFieldNumber = 2,
    kDeathNotificationFieldNumber = 3,
  };
  // string player_id = 1;
  void clear_player_id() ;
  const std::string& player_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_player_id(Arg_&& arg, Args_... args);
  std::string* mutable_player_id();
  PROTOBUF_NODISCARD std::string* release_player_id();
  void set_allocated_player_id(std::string* value);

  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(
      const std::string& value);
  std::string* _internal_mutable_player_id();

  public:
  // string killer_id = 2;
  void clear_killer_id() ;
  const std::string& killer_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_killer_id(Arg_&& arg, Args_... args);
  std::string* mutable_killer_id();
  PROTOBUF_NODISCARD std::string* release_killer_id();
  void set_allocated_killer_id(std::string* value);

  private:
  const std::string& _internal_killer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_killer_id(
      const std::string& value);
  std::string* _internal_mutable_killer_id();

  public:
  // .ingame.DeathType death_notification = 3;
  void clear_death_notification() ;
  ::ingame::DeathType death_notification() const;
  void set_death_notification(::ingame::DeathType value);

  private:
  ::ingame::DeathType _internal_death_notification() const;
  void _internal_set_death_notification(::ingame::DeathType value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_PlayerDeathNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_PlayerDeathNotification& from_msg);
    ::google::protobuf::internal::ArenaStringPtr player_id_;
    ::google::protobuf::internal::ArenaStringPtr killer_id_;
    int death_notification_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_HiddenSkillResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_HiddenSkillResult) */ {
 public:
  inline S2C_HiddenSkillResult() : S2C_HiddenSkillResult(nullptr) {}
  ~S2C_HiddenSkillResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_HiddenSkillResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_HiddenSkillResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_HiddenSkillResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_HiddenSkillResult(const S2C_HiddenSkillResult& from) : S2C_HiddenSkillResult(nullptr, from) {}
  inline S2C_HiddenSkillResult(S2C_HiddenSkillResult&& from) noexcept
      : S2C_HiddenSkillResult(nullptr, std::move(from)) {}
  inline S2C_HiddenSkillResult& operator=(const S2C_HiddenSkillResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_HiddenSkillResult& operator=(S2C_HiddenSkillResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_HiddenSkillResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_HiddenSkillResult* internal_default_instance() {
    return reinterpret_cast<const S2C_HiddenSkillResult*>(
        &_S2C_HiddenSkillResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 30;
  friend void swap(S2C_HiddenSkillResult& a, S2C_HiddenSkillResult& b) { a.Swap(&b); }
  inline void Swap(S2C_HiddenSkillResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_HiddenSkillResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_HiddenSkillResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_HiddenSkillResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_HiddenSkillResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_HiddenSkillResult& from) { S2C_HiddenSkillResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_HiddenSkillResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_HiddenSkillResult"; }

 protected:
  explicit S2C_HiddenSkillResult(::google::protobuf::Arena* arena);
  S2C_HiddenSkillResult(::google::protobuf::Arena* arena, const S2C_HiddenSkillResult& from);
  S2C_HiddenSkillResult(::google::protobuf::Arena* arena, S2C_HiddenSkillResult&& from) noexcept
      : S2C_HiddenSkillResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kMessageFieldNumber = 4,
    kSkillTypeFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string message = 4;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .ingame.GeneType skill_type = 2;
  void clear_skill_type() ;
  ::ingame::GeneType skill_type() const;
  void set_skill_type(::ingame::GeneType value);

  private:
  ::ingame::GeneType _internal_skill_type() const;
  void _internal_set_skill_type(::ingame::GeneType value);

  public:
  // bool success = 3;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_HiddenSkillResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_HiddenSkillResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    int skill_type_;
    bool success_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_GiantKillContributionResult_Contribution final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_GiantKillContributionResult.Contribution) */ {
 public:
  inline S2C_GiantKillContributionResult_Contribution() : S2C_GiantKillContributionResult_Contribution(nullptr) {}
  ~S2C_GiantKillContributionResult_Contribution() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_GiantKillContributionResult_Contribution* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_GiantKillContributionResult_Contribution));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_GiantKillContributionResult_Contribution(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_GiantKillContributionResult_Contribution(const S2C_GiantKillContributionResult_Contribution& from) : S2C_GiantKillContributionResult_Contribution(nullptr, from) {}
  inline S2C_GiantKillContributionResult_Contribution(S2C_GiantKillContributionResult_Contribution&& from) noexcept
      : S2C_GiantKillContributionResult_Contribution(nullptr, std::move(from)) {}
  inline S2C_GiantKillContributionResult_Contribution& operator=(const S2C_GiantKillContributionResult_Contribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_GiantKillContributionResult_Contribution& operator=(S2C_GiantKillContributionResult_Contribution&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_GiantKillContributionResult_Contribution& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_GiantKillContributionResult_Contribution* internal_default_instance() {
    return reinterpret_cast<const S2C_GiantKillContributionResult_Contribution*>(
        &_S2C_GiantKillContributionResult_Contribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(S2C_GiantKillContributionResult_Contribution& a, S2C_GiantKillContributionResult_Contribution& b) { a.Swap(&b); }
  inline void Swap(S2C_GiantKillContributionResult_Contribution* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_GiantKillContributionResult_Contribution* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_GiantKillContributionResult_Contribution* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_GiantKillContributionResult_Contribution>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_GiantKillContributionResult_Contribution& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_GiantKillContributionResult_Contribution& from) { S2C_GiantKillContributionResult_Contribution::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_GiantKillContributionResult_Contribution* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_GiantKillContributionResult.Contribution"; }

 protected:
  explicit S2C_GiantKillContributionResult_Contribution(::google::protobuf::Arena* arena);
  S2C_GiantKillContributionResult_Contribution(::google::protobuf::Arena* arena, const S2C_GiantKillContributionResult_Contribution& from);
  S2C_GiantKillContributionResult_Contribution(::google::protobuf::Arena* arena, S2C_GiantKillContributionResult_Contribution&& from) noexcept
      : S2C_GiantKillContributionResult_Contribution(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kDamageFieldNumber = 2,
    kPercentageFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // int32 damage = 2;
  void clear_damage() ;
  ::int32_t damage() const;
  void set_damage(::int32_t value);

  private:
  ::int32_t _internal_damage() const;
  void _internal_set_damage(::int32_t value);

  public:
  // float percentage = 3;
  void clear_percentage() ;
  float percentage() const;
  void set_percentage(float value);

  private:
  float _internal_percentage() const;
  void _internal_set_percentage(float value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_GiantKillContributionResult.Contribution)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      67, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_GiantKillContributionResult_Contribution& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::int32_t damage_;
    float percentage_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_GeneEquipResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_GeneEquipResult) */ {
 public:
  inline S2C_GeneEquipResult() : S2C_GeneEquipResult(nullptr) {}
  ~S2C_GeneEquipResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_GeneEquipResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_GeneEquipResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_GeneEquipResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_GeneEquipResult(const S2C_GeneEquipResult& from) : S2C_GeneEquipResult(nullptr, from) {}
  inline S2C_GeneEquipResult(S2C_GeneEquipResult&& from) noexcept
      : S2C_GeneEquipResult(nullptr, std::move(from)) {}
  inline S2C_GeneEquipResult& operator=(const S2C_GeneEquipResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_GeneEquipResult& operator=(S2C_GeneEquipResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_GeneEquipResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_GeneEquipResult* internal_default_instance() {
    return reinterpret_cast<const S2C_GeneEquipResult*>(
        &_S2C_GeneEquipResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(S2C_GeneEquipResult& a, S2C_GeneEquipResult& b) { a.Swap(&b); }
  inline void Swap(S2C_GeneEquipResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_GeneEquipResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_GeneEquipResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_GeneEquipResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_GeneEquipResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_GeneEquipResult& from) { S2C_GeneEquipResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_GeneEquipResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_GeneEquipResult"; }

 protected:
  explicit S2C_GeneEquipResult(::google::protobuf::Arena* arena);
  S2C_GeneEquipResult(::google::protobuf::Arena* arena, const S2C_GeneEquipResult& from);
  S2C_GeneEquipResult(::google::protobuf::Arena* arena, S2C_GeneEquipResult&& from) noexcept
      : S2C_GeneEquipResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kEquippedGenesFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kMessageFieldNumber = 5,
    kSuccessFieldNumber = 2,
    kCanTransformFieldNumber = 4,
  };
  // repeated .ingame.GeneType equipped_genes = 3;
  int equipped_genes_size() const;
  private:
  int _internal_equipped_genes_size() const;

  public:
  void clear_equipped_genes() ;
  public:
  ::ingame::GeneType equipped_genes(int index) const;
  void set_equipped_genes(int index, ::ingame::GeneType value);
  void add_equipped_genes(::ingame::GeneType value);
  const ::google::protobuf::RepeatedField<int>& equipped_genes() const;
  ::google::protobuf::RepeatedField<int>* mutable_equipped_genes();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_equipped_genes() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_equipped_genes();

  public:
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string message = 5;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 2;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // bool can_transform = 4;
  void clear_can_transform() ;
  bool can_transform() const;
  void set_can_transform(bool value);

  private:
  bool _internal_can_transform() const;
  void _internal_set_can_transform(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_GeneEquipResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_GeneEquipResult& from_msg);
    ::google::protobuf::RepeatedField<int> equipped_genes_;
    ::google::protobuf::internal::CachedSize _equipped_genes_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    bool can_transform_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_GeneAcquiredResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_GeneAcquiredResult) */ {
 public:
  inline S2C_GeneAcquiredResult() : S2C_GeneAcquiredResult(nullptr) {}
  ~S2C_GeneAcquiredResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_GeneAcquiredResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_GeneAcquiredResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_GeneAcquiredResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_GeneAcquiredResult(const S2C_GeneAcquiredResult& from) : S2C_GeneAcquiredResult(nullptr, from) {}
  inline S2C_GeneAcquiredResult(S2C_GeneAcquiredResult&& from) noexcept
      : S2C_GeneAcquiredResult(nullptr, std::move(from)) {}
  inline S2C_GeneAcquiredResult& operator=(const S2C_GeneAcquiredResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_GeneAcquiredResult& operator=(S2C_GeneAcquiredResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_GeneAcquiredResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_GeneAcquiredResult* internal_default_instance() {
    return reinterpret_cast<const S2C_GeneAcquiredResult*>(
        &_S2C_GeneAcquiredResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(S2C_GeneAcquiredResult& a, S2C_GeneAcquiredResult& b) { a.Swap(&b); }
  inline void Swap(S2C_GeneAcquiredResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_GeneAcquiredResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_GeneAcquiredResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_GeneAcquiredResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_GeneAcquiredResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_GeneAcquiredResult& from) { S2C_GeneAcquiredResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_GeneAcquiredResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_GeneAcquiredResult"; }

 protected:
  explicit S2C_GeneAcquiredResult(::google::protobuf::Arena* arena);
  S2C_GeneAcquiredResult(::google::protobuf::Arena* arena, const S2C_GeneAcquiredResult& from);
  S2C_GeneAcquiredResult(::google::protobuf::Arena* arena, S2C_GeneAcquiredResult&& from) noexcept
      : S2C_GeneAcquiredResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kMessageFieldNumber = 6,
    kGeneTypeFieldNumber = 2,
    kNewCountFieldNumber = 3,
    kTotalGeneCountFieldNumber = 4,
    kCanTransformFieldNumber = 5,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string message = 6;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .ingame.GeneType gene_type = 2;
  void clear_gene_type() ;
  ::ingame::GeneType gene_type() const;
  void set_gene_type(::ingame::GeneType value);

  private:
  ::ingame::GeneType _internal_gene_type() const;
  void _internal_set_gene_type(::ingame::GeneType value);

  public:
  // int32 new_count = 3;
  void clear_new_count() ;
  ::int32_t new_count() const;
  void set_new_count(::int32_t value);

  private:
  ::int32_t _internal_new_count() const;
  void _internal_set_new_count(::int32_t value);

  public:
  // int32 total_gene_count = 4;
  void clear_total_gene_count() ;
  ::int32_t total_gene_count() const;
  void set_total_gene_count(::int32_t value);

  private:
  ::int32_t _internal_total_gene_count() const;
  void _internal_set_total_gene_count(::int32_t value);

  public:
  // bool can_transform = 5;
  void clear_can_transform() ;
  bool can_transform() const;
  void set_can_transform(bool value);

  private:
  bool _internal_can_transform() const;
  void _internal_set_can_transform(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_GeneAcquiredResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_GeneAcquiredResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    int gene_type_;
    ::int32_t new_count_;
    ::int32_t total_gene_count_;
    bool can_transform_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_GameEnd_PlayerResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_GameEnd.PlayerResult) */ {
 public:
  inline S2C_GameEnd_PlayerResult() : S2C_GameEnd_PlayerResult(nullptr) {}
  ~S2C_GameEnd_PlayerResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_GameEnd_PlayerResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_GameEnd_PlayerResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_GameEnd_PlayerResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_GameEnd_PlayerResult(const S2C_GameEnd_PlayerResult& from) : S2C_GameEnd_PlayerResult(nullptr, from) {}
  inline S2C_GameEnd_PlayerResult(S2C_GameEnd_PlayerResult&& from) noexcept
      : S2C_GameEnd_PlayerResult(nullptr, std::move(from)) {}
  inline S2C_GameEnd_PlayerResult& operator=(const S2C_GameEnd_PlayerResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_GameEnd_PlayerResult& operator=(S2C_GameEnd_PlayerResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_GameEnd_PlayerResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_GameEnd_PlayerResult* internal_default_instance() {
    return reinterpret_cast<const S2C_GameEnd_PlayerResult*>(
        &_S2C_GameEnd_PlayerResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 31;
  friend void swap(S2C_GameEnd_PlayerResult& a, S2C_GameEnd_PlayerResult& b) { a.Swap(&b); }
  inline void Swap(S2C_GameEnd_PlayerResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_GameEnd_PlayerResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_GameEnd_PlayerResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_GameEnd_PlayerResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_GameEnd_PlayerResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_GameEnd_PlayerResult& from) { S2C_GameEnd_PlayerResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_GameEnd_PlayerResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_GameEnd.PlayerResult"; }

 protected:
  explicit S2C_GameEnd_PlayerResult(::google::protobuf::Arena* arena);
  S2C_GameEnd_PlayerResult(::google::protobuf::Arena* arena, const S2C_GameEnd_PlayerResult& from);
  S2C_GameEnd_PlayerResult(::google::protobuf::Arena* arena, S2C_GameEnd_PlayerResult&& from) noexcept
      : S2C_GameEnd_PlayerResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kNicknameFieldNumber = 2,
    kFinalScoreFieldNumber = 3,
    kGoldEarnedFieldNumber = 4,
    kFinalRaceFieldNumber = 5,
    kPlayerKilledFieldNumber = 6,
    kMonsterKilledFieldNumber = 7,
    kSurvivalTimeFieldNumber = 8,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string nickname = 2;
  void clear_nickname() ;
  const std::string& nickname() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_nickname(Arg_&& arg, Args_... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* value);

  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(
      const std::string& value);
  std::string* _internal_mutable_nickname();

  public:
  // int32 final_score = 3;
  void clear_final_score() ;
  ::int32_t final_score() const;
  void set_final_score(::int32_t value);

  private:
  ::int32_t _internal_final_score() const;
  void _internal_set_final_score(::int32_t value);

  public:
  // int32 gold_earned = 4;
  void clear_gold_earned() ;
  ::int32_t gold_earned() const;
  void set_gold_earned(::int32_t value);

  private:
  ::int32_t _internal_gold_earned() const;
  void _internal_set_gold_earned(::int32_t value);

  public:
  // .ingame.RaceType final_race = 5;
  void clear_final_race() ;
  ::ingame::RaceType final_race() const;
  void set_final_race(::ingame::RaceType value);

  private:
  ::ingame::RaceType _internal_final_race() const;
  void _internal_set_final_race(::ingame::RaceType value);

  public:
  // int32 player_killed = 6;
  void clear_player_killed() ;
  ::int32_t player_killed() const;
  void set_player_killed(::int32_t value);

  private:
  ::int32_t _internal_player_killed() const;
  void _internal_set_player_killed(::int32_t value);

  public:
  // int32 monster_killed = 7;
  void clear_monster_killed() ;
  ::int32_t monster_killed() const;
  void set_monster_killed(::int32_t value);

  private:
  ::int32_t _internal_monster_killed() const;
  void _internal_set_monster_killed(::int32_t value);

  public:
  // int32 survival_time = 8;
  void clear_survival_time() ;
  ::int32_t survival_time() const;
  void set_survival_time(::int32_t value);

  private:
  ::int32_t _internal_survival_time() const;
  void _internal_set_survival_time(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_GameEnd.PlayerResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 0,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_GameEnd_PlayerResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr nickname_;
    ::int32_t final_score_;
    ::int32_t gold_earned_;
    int final_race_;
    ::int32_t player_killed_;
    ::int32_t monster_killed_;
    ::int32_t survival_time_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_DamageContribution final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_DamageContribution) */ {
 public:
  inline S2C_DamageContribution() : S2C_DamageContribution(nullptr) {}
  ~S2C_DamageContribution() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_DamageContribution* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_DamageContribution));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_DamageContribution(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_DamageContribution(const S2C_DamageContribution& from) : S2C_DamageContribution(nullptr, from) {}
  inline S2C_DamageContribution(S2C_DamageContribution&& from) noexcept
      : S2C_DamageContribution(nullptr, std::move(from)) {}
  inline S2C_DamageContribution& operator=(const S2C_DamageContribution& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_DamageContribution& operator=(S2C_DamageContribution&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_DamageContribution& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_DamageContribution* internal_default_instance() {
    return reinterpret_cast<const S2C_DamageContribution*>(
        &_S2C_DamageContribution_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(S2C_DamageContribution& a, S2C_DamageContribution& b) { a.Swap(&b); }
  inline void Swap(S2C_DamageContribution* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_DamageContribution* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_DamageContribution* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_DamageContribution>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_DamageContribution& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_DamageContribution& from) { S2C_DamageContribution::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_DamageContribution* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_DamageContribution"; }

 protected:
  explicit S2C_DamageContribution(::google::protobuf::Arena* arena);
  S2C_DamageContribution(::google::protobuf::Arena* arena, const S2C_DamageContribution& from);
  S2C_DamageContribution(::google::protobuf::Arena* arena, S2C_DamageContribution&& from) noexcept
      : S2C_DamageContribution(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kGiantIdFieldNumber = 2,
    kDamageDealtFieldNumber = 3,
    kTotalContributionFieldNumber = 4,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string giant_id = 2;
  void clear_giant_id() ;
  const std::string& giant_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_giant_id(Arg_&& arg, Args_... args);
  std::string* mutable_giant_id();
  PROTOBUF_NODISCARD std::string* release_giant_id();
  void set_allocated_giant_id(std::string* value);

  private:
  const std::string& _internal_giant_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_giant_id(
      const std::string& value);
  std::string* _internal_mutable_giant_id();

  public:
  // int32 damage_dealt = 3;
  void clear_damage_dealt() ;
  ::int32_t damage_dealt() const;
  void set_damage_dealt(::int32_t value);

  private:
  ::int32_t _internal_damage_dealt() const;
  void _internal_set_damage_dealt(::int32_t value);

  public:
  // int32 total_contribution = 4;
  void clear_total_contribution() ;
  ::int32_t total_contribution() const;
  void set_total_contribution(::int32_t value);

  private:
  ::int32_t _internal_total_contribution() const;
  void _internal_set_total_contribution(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_DamageContribution)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      53, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_DamageContribution& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr giant_id_;
    ::int32_t damage_dealt_;
    ::int32_t total_contribution_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_CrownPickupResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_CrownPickupResult) */ {
 public:
  inline S2C_CrownPickupResult() : S2C_CrownPickupResult(nullptr) {}
  ~S2C_CrownPickupResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_CrownPickupResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_CrownPickupResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_CrownPickupResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_CrownPickupResult(const S2C_CrownPickupResult& from) : S2C_CrownPickupResult(nullptr, from) {}
  inline S2C_CrownPickupResult(S2C_CrownPickupResult&& from) noexcept
      : S2C_CrownPickupResult(nullptr, std::move(from)) {}
  inline S2C_CrownPickupResult& operator=(const S2C_CrownPickupResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_CrownPickupResult& operator=(S2C_CrownPickupResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_CrownPickupResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_CrownPickupResult* internal_default_instance() {
    return reinterpret_cast<const S2C_CrownPickupResult*>(
        &_S2C_CrownPickupResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(S2C_CrownPickupResult& a, S2C_CrownPickupResult& b) { a.Swap(&b); }
  inline void Swap(S2C_CrownPickupResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_CrownPickupResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_CrownPickupResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_CrownPickupResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_CrownPickupResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_CrownPickupResult& from) { S2C_CrownPickupResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_CrownPickupResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_CrownPickupResult"; }

 protected:
  explicit S2C_CrownPickupResult(::google::protobuf::Arena* arena);
  S2C_CrownPickupResult(::google::protobuf::Arena* arena, const S2C_CrownPickupResult& from);
  S2C_CrownPickupResult(::google::protobuf::Arena* arena, S2C_CrownPickupResult&& from) noexcept
      : S2C_CrownPickupResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kMessageFieldNumber = 4,
    kSuccessFieldNumber = 2,
    kCountdownFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string message = 4;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 2;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // int32 countdown = 3;
  void clear_countdown() ;
  ::int32_t countdown() const;
  void set_countdown(::int32_t value);

  private:
  ::int32_t _internal_countdown() const;
  void _internal_set_countdown(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_CrownPickupResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      51, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_CrownPickupResult& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    ::int32_t countdown_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_CrownNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_CrownNotification) */ {
 public:
  inline S2C_CrownNotification() : S2C_CrownNotification(nullptr) {}
  ~S2C_CrownNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_CrownNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_CrownNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_CrownNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_CrownNotification(const S2C_CrownNotification& from) : S2C_CrownNotification(nullptr, from) {}
  inline S2C_CrownNotification(S2C_CrownNotification&& from) noexcept
      : S2C_CrownNotification(nullptr, std::move(from)) {}
  inline S2C_CrownNotification& operator=(const S2C_CrownNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_CrownNotification& operator=(S2C_CrownNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_CrownNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_CrownNotification* internal_default_instance() {
    return reinterpret_cast<const S2C_CrownNotification*>(
        &_S2C_CrownNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(S2C_CrownNotification& a, S2C_CrownNotification& b) { a.Swap(&b); }
  inline void Swap(S2C_CrownNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_CrownNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_CrownNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_CrownNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_CrownNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_CrownNotification& from) { S2C_CrownNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_CrownNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_CrownNotification"; }

 protected:
  explicit S2C_CrownNotification(::google::protobuf::Arena* arena);
  S2C_CrownNotification(::google::protobuf::Arena* arena, const S2C_CrownNotification& from);
  S2C_CrownNotification(::google::protobuf::Arena* arena, S2C_CrownNotification&& from) noexcept
      : S2C_CrownNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kGiantIdFieldNumber = 2,
    kCountdownFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string giant_id = 2;
  void clear_giant_id() ;
  const std::string& giant_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_giant_id(Arg_&& arg, Args_... args);
  std::string* mutable_giant_id();
  PROTOBUF_NODISCARD std::string* release_giant_id();
  void set_allocated_giant_id(std::string* value);

  private:
  const std::string& _internal_giant_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_giant_id(
      const std::string& value);
  std::string* _internal_mutable_giant_id();

  public:
  // int32 countdown = 3;
  void clear_countdown() ;
  ::int32_t countdown() const;
  void set_countdown(::int32_t value);

  private:
  ::int32_t _internal_countdown() const;
  void _internal_set_countdown(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_CrownNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_CrownNotification& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr giant_id_;
    ::int32_t countdown_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class PlayerRaceState_GeneInventoryEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          ::int32_t, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      ::int32_t, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  PlayerRaceState_GeneInventoryEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerRaceState_GeneInventoryEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit PlayerRaceState_GeneInventoryEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const PlayerRaceState_GeneInventoryEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const PlayerRaceState_GeneInventoryEntry_DoNotUse*>(
        &_PlayerRaceState_GeneInventoryEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_ingame_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class GiantStats final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.GiantStats) */ {
 public:
  inline GiantStats() : GiantStats(nullptr) {}
  ~GiantStats() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GiantStats* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GiantStats));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GiantStats(
      ::google::protobuf::internal::ConstantInitialized);

  inline GiantStats(const GiantStats& from) : GiantStats(nullptr, from) {}
  inline GiantStats(GiantStats&& from) noexcept
      : GiantStats(nullptr, std::move(from)) {}
  inline GiantStats& operator=(const GiantStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline GiantStats& operator=(GiantStats&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GiantStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const GiantStats* internal_default_instance() {
    return reinterpret_cast<const GiantStats*>(
        &_GiantStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(GiantStats& a, GiantStats& b) { a.Swap(&b); }
  inline void Swap(GiantStats* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GiantStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GiantStats* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GiantStats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GiantStats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GiantStats& from) { GiantStats::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GiantStats* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.GiantStats"; }

 protected:
  explicit GiantStats(::google::protobuf::Arena* arena);
  GiantStats(::google::protobuf::Arena* arena, const GiantStats& from);
  GiantStats(::google::protobuf::Arena* arena, GiantStats&& from) noexcept
      : GiantStats(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttackSpeedFieldNumber = 1,
    kMoveSpeedFieldNumber = 2,
    kAttackRangeFieldNumber = 3,
    kMaxHealthFieldNumber = 4,
    kSizeFieldNumber = 5,
  };
  // float attack_speed = 1;
  void clear_attack_speed() ;
  float attack_speed() const;
  void set_attack_speed(float value);

  private:
  float _internal_attack_speed() const;
  void _internal_set_attack_speed(float value);

  public:
  // float move_speed = 2;
  void clear_move_speed() ;
  float move_speed() const;
  void set_move_speed(float value);

  private:
  float _internal_move_speed() const;
  void _internal_set_move_speed(float value);

  public:
  // float attack_range = 3;
  void clear_attack_range() ;
  float attack_range() const;
  void set_attack_range(float value);

  private:
  float _internal_attack_range() const;
  void _internal_set_attack_range(float value);

  public:
  // int32 max_health = 4;
  void clear_max_health() ;
  ::int32_t max_health() const;
  void set_max_health(::int32_t value);

  private:
  ::int32_t _internal_max_health() const;
  void _internal_set_max_health(::int32_t value);

  public:
  // float size = 5;
  void clear_size() ;
  float size() const;
  void set_size(float value);

  private:
  float _internal_size() const;
  void _internal_set_size(float value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.GiantStats)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GiantStats& from_msg);
    float attack_speed_;
    float move_speed_;
    float attack_range_;
    ::int32_t max_health_;
    float size_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class GameWorldState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.GameWorldState) */ {
 public:
  inline GameWorldState() : GameWorldState(nullptr) {}
  ~GameWorldState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GameWorldState* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GameWorldState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GameWorldState(
      ::google::protobuf::internal::ConstantInitialized);

  inline GameWorldState(const GameWorldState& from) : GameWorldState(nullptr, from) {}
  inline GameWorldState(GameWorldState&& from) noexcept
      : GameWorldState(nullptr, std::move(from)) {}
  inline GameWorldState& operator=(const GameWorldState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameWorldState& operator=(GameWorldState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameWorldState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameWorldState* internal_default_instance() {
    return reinterpret_cast<const GameWorldState*>(
        &_GameWorldState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(GameWorldState& a, GameWorldState& b) { a.Swap(&b); }
  inline void Swap(GameWorldState* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameWorldState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameWorldState* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GameWorldState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GameWorldState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GameWorldState& from) { GameWorldState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GameWorldState* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.GameWorldState"; }

 protected:
  explicit GameWorldState(::google::protobuf::Arena* arena);
  GameWorldState(::google::protobuf::Arena* arena, const GameWorldState& from);
  GameWorldState(::google::protobuf::Arena* arena, GameWorldState&& from) noexcept
      : GameWorldState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCurrentPhaseFieldNumber = 1,
    kPhaseTimeRemainingFieldNumber = 2,
    kHumanCountFieldNumber = 3,
    kGianeCountFieldNumber = 4,
    kMonsterCountFieldNumber = 5,
  };
  // int32 current_phase = 1;
  void clear_current_phase() ;
  ::int32_t current_phase() const;
  void set_current_phase(::int32_t value);

  private:
  ::int32_t _internal_current_phase() const;
  void _internal_set_current_phase(::int32_t value);

  public:
  // int32 phase_time_remaining = 2;
  void clear_phase_time_remaining() ;
  ::int32_t phase_time_remaining() const;
  void set_phase_time_remaining(::int32_t value);

  private:
  ::int32_t _internal_phase_time_remaining() const;
  void _internal_set_phase_time_remaining(::int32_t value);

  public:
  // int32 human_count = 3;
  void clear_human_count() ;
  ::int32_t human_count() const;
  void set_human_count(::int32_t value);

  private:
  ::int32_t _internal_human_count() const;
  void _internal_set_human_count(::int32_t value);

  public:
  // int32 giane_count = 4;
  void clear_giane_count() ;
  ::int32_t giane_count() const;
  void set_giane_count(::int32_t value);

  private:
  ::int32_t _internal_giane_count() const;
  void _internal_set_giane_count(::int32_t value);

  public:
  // int32 monster_count = 5;
  void clear_monster_count() ;
  ::int32_t monster_count() const;
  void set_monster_count(::int32_t value);

  private:
  ::int32_t _internal_monster_count() const;
  void _internal_set_monster_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.GameWorldState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GameWorldState& from_msg);
    ::int32_t current_phase_;
    ::int32_t phase_time_remaining_;
    ::int32_t human_count_;
    ::int32_t giane_count_;
    ::int32_t monster_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class C2S_TransformGiant final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.C2S_TransformGiant) */ {
 public:
  inline C2S_TransformGiant() : C2S_TransformGiant(nullptr) {}
  ~C2S_TransformGiant() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(C2S_TransformGiant* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(C2S_TransformGiant));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR C2S_TransformGiant(
      ::google::protobuf::internal::ConstantInitialized);

  inline C2S_TransformGiant(const C2S_TransformGiant& from) : C2S_TransformGiant(nullptr, from) {}
  inline C2S_TransformGiant(C2S_TransformGiant&& from) noexcept
      : C2S_TransformGiant(nullptr, std::move(from)) {}
  inline C2S_TransformGiant& operator=(const C2S_TransformGiant& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_TransformGiant& operator=(C2S_TransformGiant&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_TransformGiant& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_TransformGiant* internal_default_instance() {
    return reinterpret_cast<const C2S_TransformGiant*>(
        &_C2S_TransformGiant_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(C2S_TransformGiant& a, C2S_TransformGiant& b) { a.Swap(&b); }
  inline void Swap(C2S_TransformGiant* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_TransformGiant* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_TransformGiant* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<C2S_TransformGiant>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C2S_TransformGiant& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const C2S_TransformGiant& from) { C2S_TransformGiant::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(C2S_TransformGiant* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.C2S_TransformGiant"; }

 protected:
  explicit C2S_TransformGiant(::google::protobuf::Arena* arena);
  C2S_TransformGiant(::google::protobuf::Arena* arena, const C2S_TransformGiant& from);
  C2S_TransformGiant(::google::protobuf::Arena* arena, C2S_TransformGiant&& from) noexcept
      : C2S_TransformGiant(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // @@protoc_insertion_point(class_scope:ingame.C2S_TransformGiant)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const C2S_TransformGiant& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class C2S_JoinGame final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.C2S_JoinGame) */ {
 public:
  inline C2S_JoinGame() : C2S_JoinGame(nullptr) {}
  ~C2S_JoinGame() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(C2S_JoinGame* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(C2S_JoinGame));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR C2S_JoinGame(
      ::google::protobuf::internal::ConstantInitialized);

  inline C2S_JoinGame(const C2S_JoinGame& from) : C2S_JoinGame(nullptr, from) {}
  inline C2S_JoinGame(C2S_JoinGame&& from) noexcept
      : C2S_JoinGame(nullptr, std::move(from)) {}
  inline C2S_JoinGame& operator=(const C2S_JoinGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_JoinGame& operator=(C2S_JoinGame&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_JoinGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_JoinGame* internal_default_instance() {
    return reinterpret_cast<const C2S_JoinGame*>(
        &_C2S_JoinGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(C2S_JoinGame& a, C2S_JoinGame& b) { a.Swap(&b); }
  inline void Swap(C2S_JoinGame* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_JoinGame* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_JoinGame* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<C2S_JoinGame>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C2S_JoinGame& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const C2S_JoinGame& from) { C2S_JoinGame::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(C2S_JoinGame* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.C2S_JoinGame"; }

 protected:
  explicit C2S_JoinGame(::google::protobuf::Arena* arena);
  C2S_JoinGame(::google::protobuf::Arena* arena, const C2S_JoinGame& from);
  C2S_JoinGame(::google::protobuf::Arena* arena, C2S_JoinGame&& from) noexcept
      : C2S_JoinGame(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kRoomIdFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string room_id = 2;
  void clear_room_id() ;
  const std::string& room_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_room_id(Arg_&& arg, Args_... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* value);

  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(
      const std::string& value);
  std::string* _internal_mutable_room_id();

  public:
  // @@protoc_insertion_point(class_scope:ingame.C2S_JoinGame)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const C2S_JoinGame& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr room_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class C2S_GeneAcquired final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.C2S_GeneAcquired) */ {
 public:
  inline C2S_GeneAcquired() : C2S_GeneAcquired(nullptr) {}
  ~C2S_GeneAcquired() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(C2S_GeneAcquired* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(C2S_GeneAcquired));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR C2S_GeneAcquired(
      ::google::protobuf::internal::ConstantInitialized);

  inline C2S_GeneAcquired(const C2S_GeneAcquired& from) : C2S_GeneAcquired(nullptr, from) {}
  inline C2S_GeneAcquired(C2S_GeneAcquired&& from) noexcept
      : C2S_GeneAcquired(nullptr, std::move(from)) {}
  inline C2S_GeneAcquired& operator=(const C2S_GeneAcquired& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_GeneAcquired& operator=(C2S_GeneAcquired&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_GeneAcquired& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_GeneAcquired* internal_default_instance() {
    return reinterpret_cast<const C2S_GeneAcquired*>(
        &_C2S_GeneAcquired_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(C2S_GeneAcquired& a, C2S_GeneAcquired& b) { a.Swap(&b); }
  inline void Swap(C2S_GeneAcquired* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_GeneAcquired* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_GeneAcquired* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<C2S_GeneAcquired>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C2S_GeneAcquired& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const C2S_GeneAcquired& from) { C2S_GeneAcquired::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(C2S_GeneAcquired* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.C2S_GeneAcquired"; }

 protected:
  explicit C2S_GeneAcquired(::google::protobuf::Arena* arena);
  C2S_GeneAcquired(::google::protobuf::Arena* arena, const C2S_GeneAcquired& from);
  C2S_GeneAcquired(::google::protobuf::Arena* arena, C2S_GeneAcquired&& from) noexcept
      : C2S_GeneAcquired(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kSourceFieldNumber = 3,
    kGeneTypeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string source = 3;
  void clear_source() ;
  const std::string& source() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source(Arg_&& arg, Args_... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* value);

  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(
      const std::string& value);
  std::string* _internal_mutable_source();

  public:
  // .ingame.GeneType gene_type = 2;
  void clear_gene_type() ;
  ::ingame::GeneType gene_type() const;
  void set_gene_type(::ingame::GeneType value);

  private:
  ::ingame::GeneType _internal_gene_type() const;
  void _internal_set_gene_type(::ingame::GeneType value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.C2S_GeneAcquired)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      45, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const C2S_GeneAcquired& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr source_;
    int gene_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class C2S_EquipGene final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.C2S_EquipGene) */ {
 public:
  inline C2S_EquipGene() : C2S_EquipGene(nullptr) {}
  ~C2S_EquipGene() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(C2S_EquipGene* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(C2S_EquipGene));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR C2S_EquipGene(
      ::google::protobuf::internal::ConstantInitialized);

  inline C2S_EquipGene(const C2S_EquipGene& from) : C2S_EquipGene(nullptr, from) {}
  inline C2S_EquipGene(C2S_EquipGene&& from) noexcept
      : C2S_EquipGene(nullptr, std::move(from)) {}
  inline C2S_EquipGene& operator=(const C2S_EquipGene& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_EquipGene& operator=(C2S_EquipGene&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_EquipGene& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_EquipGene* internal_default_instance() {
    return reinterpret_cast<const C2S_EquipGene*>(
        &_C2S_EquipGene_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(C2S_EquipGene& a, C2S_EquipGene& b) { a.Swap(&b); }
  inline void Swap(C2S_EquipGene* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_EquipGene* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_EquipGene* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<C2S_EquipGene>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C2S_EquipGene& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const C2S_EquipGene& from) { C2S_EquipGene::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(C2S_EquipGene* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.C2S_EquipGene"; }

 protected:
  explicit C2S_EquipGene(::google::protobuf::Arena* arena);
  C2S_EquipGene(::google::protobuf::Arena* arena, const C2S_EquipGene& from);
  C2S_EquipGene(::google::protobuf::Arena* arena, C2S_EquipGene&& from) noexcept
      : C2S_EquipGene(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kGeneTypeFieldNumber = 2,
    kSlotIndexFieldNumber = 3,
    kEquipFieldNumber = 4,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // .ingame.GeneType gene_type = 2;
  void clear_gene_type() ;
  ::ingame::GeneType gene_type() const;
  void set_gene_type(::ingame::GeneType value);

  private:
  ::ingame::GeneType _internal_gene_type() const;
  void _internal_set_gene_type(::ingame::GeneType value);

  public:
  // int32 slot_index = 3;
  void clear_slot_index() ;
  ::int32_t slot_index() const;
  void set_slot_index(::int32_t value);

  private:
  ::int32_t _internal_slot_index() const;
  void _internal_set_slot_index(::int32_t value);

  public:
  // bool equip = 4;
  void clear_equip() ;
  bool equip() const;
  void set_equip(bool value);

  private:
  bool _internal_equip() const;
  void _internal_set_equip(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.C2S_EquipGene)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      36, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const C2S_EquipGene& from_msg);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    int gene_type_;
    ::int32_t slot_index_;
    bool equip_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_TransformResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_TransformResult) */ {
 public:
  inline S2C_TransformResult() : S2C_TransformResult(nullptr) {}
  ~S2C_TransformResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_TransformResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_TransformResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_TransformResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_TransformResult(const S2C_TransformResult& from) : S2C_TransformResult(nullptr, from) {}
  inline S2C_TransformResult(S2C_TransformResult&& from) noexcept
      : S2C_TransformResult(nullptr, std::move(from)) {}
  inline S2C_TransformResult& operator=(const S2C_TransformResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_TransformResult& operator=(S2C_TransformResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_TransformResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_TransformResult* internal_default_instance() {
    return reinterpret_cast<const S2C_TransformResult*>(
        &_S2C_TransformResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(S2C_TransformResult& a, S2C_TransformResult& b) { a.Swap(&b); }
  inline void Swap(S2C_TransformResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_TransformResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_TransformResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_TransformResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_TransformResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_TransformResult& from) { S2C_TransformResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_TransformResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_TransformResult"; }

 protected:
  explicit S2C_TransformResult(::google::protobuf::Arena* arena);
  S2C_TransformResult(::google::protobuf::Arena* arena, const S2C_TransformResult& from);
  S2C_TransformResult(::google::protobuf::Arena* arena, S2C_TransformResult&& from) noexcept
      : S2C_TransformResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kMessageFieldNumber = 5,
    kNewStatsFieldNumber = 4,
    kSuccessFieldNumber = 2,
    kNewRaceFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string message = 5;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .ingame.GiantStats new_stats = 4;
  bool has_new_stats() const;
  void clear_new_stats() ;
  const ::ingame::GiantStats& new_stats() const;
  PROTOBUF_NODISCARD ::ingame::GiantStats* release_new_stats();
  ::ingame::GiantStats* mutable_new_stats();
  void set_allocated_new_stats(::ingame::GiantStats* value);
  void unsafe_arena_set_allocated_new_stats(::ingame::GiantStats* value);
  ::ingame::GiantStats* unsafe_arena_release_new_stats();

  private:
  const ::ingame::GiantStats& _internal_new_stats() const;
  ::ingame::GiantStats* _internal_mutable_new_stats();

  public:
  // bool success = 2;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // .ingame.RaceType new_race = 3;
  void clear_new_race() ;
  ::ingame::RaceType new_race() const;
  void set_new_race(::ingame::RaceType value);

  private:
  ::ingame::RaceType _internal_new_race() const;
  void _internal_set_new_race(::ingame::RaceType value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_TransformResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_TransformResult& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::ingame::GiantStats* new_stats_;
    bool success_;
    int new_race_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_PlayerMoveNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_PlayerMoveNotification) */ {
 public:
  inline S2C_PlayerMoveNotification() : S2C_PlayerMoveNotification(nullptr) {}
  ~S2C_PlayerMoveNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_PlayerMoveNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_PlayerMoveNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_PlayerMoveNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_PlayerMoveNotification(const S2C_PlayerMoveNotification& from) : S2C_PlayerMoveNotification(nullptr, from) {}
  inline S2C_PlayerMoveNotification(S2C_PlayerMoveNotification&& from) noexcept
      : S2C_PlayerMoveNotification(nullptr, std::move(from)) {}
  inline S2C_PlayerMoveNotification& operator=(const S2C_PlayerMoveNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_PlayerMoveNotification& operator=(S2C_PlayerMoveNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_PlayerMoveNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_PlayerMoveNotification* internal_default_instance() {
    return reinterpret_cast<const S2C_PlayerMoveNotification*>(
        &_S2C_PlayerMoveNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(S2C_PlayerMoveNotification& a, S2C_PlayerMoveNotification& b) { a.Swap(&b); }
  inline void Swap(S2C_PlayerMoveNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_PlayerMoveNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_PlayerMoveNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_PlayerMoveNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_PlayerMoveNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_PlayerMoveNotification& from) { S2C_PlayerMoveNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_PlayerMoveNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_PlayerMoveNotification"; }

 protected:
  explicit S2C_PlayerMoveNotification(::google::protobuf::Arena* arena);
  S2C_PlayerMoveNotification(::google::protobuf::Arena* arena, const S2C_PlayerMoveNotification& from);
  S2C_PlayerMoveNotification(::google::protobuf::Arena* arena, S2C_PlayerMoveNotification&& from) noexcept
      : S2C_PlayerMoveNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kPositionFieldNumber = 2,
    kDirFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // .ingame.Vector2 position = 2;
  bool has_position() const;
  void clear_position() ;
  const ::ingame::Vector2& position() const;
  PROTOBUF_NODISCARD ::ingame::Vector2* release_position();
  ::ingame::Vector2* mutable_position();
  void set_allocated_position(::ingame::Vector2* value);
  void unsafe_arena_set_allocated_position(::ingame::Vector2* value);
  ::ingame::Vector2* unsafe_arena_release_position();

  private:
  const ::ingame::Vector2& _internal_position() const;
  ::ingame::Vector2* _internal_mutable_position();

  public:
  // float dir = 3;
  void clear_dir() ;
  float dir() const;
  void set_dir(float value);

  private:
  float _internal_dir() const;
  void _internal_set_dir(float value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_PlayerMoveNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_PlayerMoveNotification& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::ingame::Vector2* position_;
    float dir_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_PlayerAttackResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_PlayerAttackResult) */ {
 public:
  inline S2C_PlayerAttackResult() : S2C_PlayerAttackResult(nullptr) {}
  ~S2C_PlayerAttackResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_PlayerAttackResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_PlayerAttackResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_PlayerAttackResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_PlayerAttackResult(const S2C_PlayerAttackResult& from) : S2C_PlayerAttackResult(nullptr, from) {}
  inline S2C_PlayerAttackResult(S2C_PlayerAttackResult&& from) noexcept
      : S2C_PlayerAttackResult(nullptr, std::move(from)) {}
  inline S2C_PlayerAttackResult& operator=(const S2C_PlayerAttackResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_PlayerAttackResult& operator=(S2C_PlayerAttackResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_PlayerAttackResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_PlayerAttackResult* internal_default_instance() {
    return reinterpret_cast<const S2C_PlayerAttackResult*>(
        &_S2C_PlayerAttackResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(S2C_PlayerAttackResult& a, S2C_PlayerAttackResult& b) { a.Swap(&b); }
  inline void Swap(S2C_PlayerAttackResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_PlayerAttackResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_PlayerAttackResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_PlayerAttackResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_PlayerAttackResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_PlayerAttackResult& from) { S2C_PlayerAttackResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_PlayerAttackResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_PlayerAttackResult"; }

 protected:
  explicit S2C_PlayerAttackResult(::google::protobuf::Arena* arena);
  S2C_PlayerAttackResult(::google::protobuf::Arena* arena, const S2C_PlayerAttackResult& from);
  S2C_PlayerAttackResult(::google::protobuf::Arena* arena, S2C_PlayerAttackResult&& from) noexcept
      : S2C_PlayerAttackResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHitTargetsFieldNumber = 7,
    kUserIdFieldNumber = 1,
    kAttackPositionFieldNumber = 3,
    kAttackDirectionFieldNumber = 4,
    kAttackTypeFieldNumber = 2,
    kAttackRangeFieldNumber = 5,
    kTotalDamageFieldNumber = 6,
  };
  // repeated string hit_targets = 7;
  int hit_targets_size() const;
  private:
  int _internal_hit_targets_size() const;

  public:
  void clear_hit_targets() ;
  const std::string& hit_targets(int index) const;
  std::string* mutable_hit_targets(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hit_targets(int index, Arg_&& value, Args_... args);
  std::string* add_hit_targets();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_hit_targets(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& hit_targets() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_hit_targets();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_hit_targets() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_hit_targets();

  public:
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // .ingame.Vector2 attack_position = 3;
  bool has_attack_position() const;
  void clear_attack_position() ;
  const ::ingame::Vector2& attack_position() const;
  PROTOBUF_NODISCARD ::ingame::Vector2* release_attack_position();
  ::ingame::Vector2* mutable_attack_position();
  void set_allocated_attack_position(::ingame::Vector2* value);
  void unsafe_arena_set_allocated_attack_position(::ingame::Vector2* value);
  ::ingame::Vector2* unsafe_arena_release_attack_position();

  private:
  const ::ingame::Vector2& _internal_attack_position() const;
  ::ingame::Vector2* _internal_mutable_attack_position();

  public:
  // .ingame.Vector2 attack_direction = 4;
  bool has_attack_direction() const;
  void clear_attack_direction() ;
  const ::ingame::Vector2& attack_direction() const;
  PROTOBUF_NODISCARD ::ingame::Vector2* release_attack_direction();
  ::ingame::Vector2* mutable_attack_direction();
  void set_allocated_attack_direction(::ingame::Vector2* value);
  void unsafe_arena_set_allocated_attack_direction(::ingame::Vector2* value);
  ::ingame::Vector2* unsafe_arena_release_attack_direction();

  private:
  const ::ingame::Vector2& _internal_attack_direction() const;
  ::ingame::Vector2* _internal_mutable_attack_direction();

  public:
  // .ingame.AttackType attack_type = 2;
  void clear_attack_type() ;
  ::ingame::AttackType attack_type() const;
  void set_attack_type(::ingame::AttackType value);

  private:
  ::ingame::AttackType _internal_attack_type() const;
  void _internal_set_attack_type(::ingame::AttackType value);

  public:
  // float attack_range = 5;
  void clear_attack_range() ;
  float attack_range() const;
  void set_attack_range(float value);

  private:
  float _internal_attack_range() const;
  void _internal_set_attack_range(float value);

  public:
  // int32 total_damage = 6;
  void clear_total_damage() ;
  ::int32_t total_damage() const;
  void set_total_damage(::int32_t value);

  private:
  ::int32_t _internal_total_damage() const;
  void _internal_set_total_damage(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_PlayerAttackResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_PlayerAttackResult& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> hit_targets_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::ingame::Vector2* attack_position_;
    ::ingame::Vector2* attack_direction_;
    int attack_type_;
    float attack_range_;
    ::int32_t total_damage_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_GiantKillContributionResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_GiantKillContributionResult) */ {
 public:
  inline S2C_GiantKillContributionResult() : S2C_GiantKillContributionResult(nullptr) {}
  ~S2C_GiantKillContributionResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_GiantKillContributionResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_GiantKillContributionResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_GiantKillContributionResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_GiantKillContributionResult(const S2C_GiantKillContributionResult& from) : S2C_GiantKillContributionResult(nullptr, from) {}
  inline S2C_GiantKillContributionResult(S2C_GiantKillContributionResult&& from) noexcept
      : S2C_GiantKillContributionResult(nullptr, std::move(from)) {}
  inline S2C_GiantKillContributionResult& operator=(const S2C_GiantKillContributionResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_GiantKillContributionResult& operator=(S2C_GiantKillContributionResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_GiantKillContributionResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_GiantKillContributionResult* internal_default_instance() {
    return reinterpret_cast<const S2C_GiantKillContributionResult*>(
        &_S2C_GiantKillContributionResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(S2C_GiantKillContributionResult& a, S2C_GiantKillContributionResult& b) { a.Swap(&b); }
  inline void Swap(S2C_GiantKillContributionResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_GiantKillContributionResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_GiantKillContributionResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_GiantKillContributionResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_GiantKillContributionResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_GiantKillContributionResult& from) { S2C_GiantKillContributionResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_GiantKillContributionResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_GiantKillContributionResult"; }

 protected:
  explicit S2C_GiantKillContributionResult(::google::protobuf::Arena* arena);
  S2C_GiantKillContributionResult(::google::protobuf::Arena* arena, const S2C_GiantKillContributionResult& from);
  S2C_GiantKillContributionResult(::google::protobuf::Arena* arena, S2C_GiantKillContributionResult&& from) noexcept
      : S2C_GiantKillContributionResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Contribution = S2C_GiantKillContributionResult_Contribution;

  // accessors -------------------------------------------------------
  enum : int {
    kContributionsFieldNumber = 2,
    kGiantIdFieldNumber = 1,
    kCrownWinnerFieldNumber = 3,
  };
  // repeated .ingame.S2C_GiantKillContributionResult.Contribution contributions = 2;
  int contributions_size() const;
  private:
  int _internal_contributions_size() const;

  public:
  void clear_contributions() ;
  ::ingame::S2C_GiantKillContributionResult_Contribution* mutable_contributions(int index);
  ::google::protobuf::RepeatedPtrField<::ingame::S2C_GiantKillContributionResult_Contribution>* mutable_contributions();

  private:
  const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GiantKillContributionResult_Contribution>& _internal_contributions() const;
  ::google::protobuf::RepeatedPtrField<::ingame::S2C_GiantKillContributionResult_Contribution>* _internal_mutable_contributions();
  public:
  const ::ingame::S2C_GiantKillContributionResult_Contribution& contributions(int index) const;
  ::ingame::S2C_GiantKillContributionResult_Contribution* add_contributions();
  const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GiantKillContributionResult_Contribution>& contributions() const;
  // string giant_id = 1;
  void clear_giant_id() ;
  const std::string& giant_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_giant_id(Arg_&& arg, Args_... args);
  std::string* mutable_giant_id();
  PROTOBUF_NODISCARD std::string* release_giant_id();
  void set_allocated_giant_id(std::string* value);

  private:
  const std::string& _internal_giant_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_giant_id(
      const std::string& value);
  std::string* _internal_mutable_giant_id();

  public:
  // string crown_winner = 3;
  void clear_crown_winner() ;
  const std::string& crown_winner() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_crown_winner(Arg_&& arg, Args_... args);
  std::string* mutable_crown_winner();
  PROTOBUF_NODISCARD std::string* release_crown_winner();
  void set_allocated_crown_winner(std::string* value);

  private:
  const std::string& _internal_crown_winner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_crown_winner(
      const std::string& value);
  std::string* _internal_mutable_crown_winner();

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_GiantKillContributionResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      67, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_GiantKillContributionResult& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ingame::S2C_GiantKillContributionResult_Contribution > contributions_;
    ::google::protobuf::internal::ArenaStringPtr giant_id_;
    ::google::protobuf::internal::ArenaStringPtr crown_winner_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_GameState_PlayerState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_GameState.PlayerState) */ {
 public:
  inline S2C_GameState_PlayerState() : S2C_GameState_PlayerState(nullptr) {}
  ~S2C_GameState_PlayerState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_GameState_PlayerState* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_GameState_PlayerState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_GameState_PlayerState(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_GameState_PlayerState(const S2C_GameState_PlayerState& from) : S2C_GameState_PlayerState(nullptr, from) {}
  inline S2C_GameState_PlayerState(S2C_GameState_PlayerState&& from) noexcept
      : S2C_GameState_PlayerState(nullptr, std::move(from)) {}
  inline S2C_GameState_PlayerState& operator=(const S2C_GameState_PlayerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_GameState_PlayerState& operator=(S2C_GameState_PlayerState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_GameState_PlayerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_GameState_PlayerState* internal_default_instance() {
    return reinterpret_cast<const S2C_GameState_PlayerState*>(
        &_S2C_GameState_PlayerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(S2C_GameState_PlayerState& a, S2C_GameState_PlayerState& b) { a.Swap(&b); }
  inline void Swap(S2C_GameState_PlayerState* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_GameState_PlayerState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_GameState_PlayerState* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_GameState_PlayerState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_GameState_PlayerState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_GameState_PlayerState& from) { S2C_GameState_PlayerState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_GameState_PlayerState* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_GameState.PlayerState"; }

 protected:
  explicit S2C_GameState_PlayerState(::google::protobuf::Arena* arena);
  S2C_GameState_PlayerState(::google::protobuf::Arena* arena, const S2C_GameState_PlayerState& from);
  S2C_GameState_PlayerState(::google::protobuf::Arena* arena, S2C_GameState_PlayerState&& from) noexcept
      : S2C_GameState_PlayerState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kPositionFieldNumber = 2,
    kDirectionFieldNumber = 3,
    kCurrentHpFieldNumber = 4,
    kMaxHpFieldNumber = 5,
    kCurrentRaceFieldNumber = 6,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // .ingame.Vector2 position = 2;
  bool has_position() const;
  void clear_position() ;
  const ::ingame::Vector2& position() const;
  PROTOBUF_NODISCARD ::ingame::Vector2* release_position();
  ::ingame::Vector2* mutable_position();
  void set_allocated_position(::ingame::Vector2* value);
  void unsafe_arena_set_allocated_position(::ingame::Vector2* value);
  ::ingame::Vector2* unsafe_arena_release_position();

  private:
  const ::ingame::Vector2& _internal_position() const;
  ::ingame::Vector2* _internal_mutable_position();

  public:
  // float direction = 3;
  void clear_direction() ;
  float direction() const;
  void set_direction(float value);

  private:
  float _internal_direction() const;
  void _internal_set_direction(float value);

  public:
  // int32 current_hp = 4;
  void clear_current_hp() ;
  ::int32_t current_hp() const;
  void set_current_hp(::int32_t value);

  private:
  ::int32_t _internal_current_hp() const;
  void _internal_set_current_hp(::int32_t value);

  public:
  // int32 max_hp = 5;
  void clear_max_hp() ;
  ::int32_t max_hp() const;
  void set_max_hp(::int32_t value);

  private:
  ::int32_t _internal_max_hp() const;
  void _internal_set_max_hp(::int32_t value);

  public:
  // .ingame.RaceType current_race = 6;
  void clear_current_race() ;
  ::ingame::RaceType current_race() const;
  void set_current_race(::ingame::RaceType value);

  private:
  ::ingame::RaceType _internal_current_race() const;
  void _internal_set_current_race(::ingame::RaceType value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_GameState.PlayerState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_GameState_PlayerState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::ingame::Vector2* position_;
    float direction_;
    ::int32_t current_hp_;
    ::int32_t max_hp_;
    int current_race_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_GameState_MonsterState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_GameState.MonsterState) */ {
 public:
  inline S2C_GameState_MonsterState() : S2C_GameState_MonsterState(nullptr) {}
  ~S2C_GameState_MonsterState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_GameState_MonsterState* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_GameState_MonsterState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_GameState_MonsterState(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_GameState_MonsterState(const S2C_GameState_MonsterState& from) : S2C_GameState_MonsterState(nullptr, from) {}
  inline S2C_GameState_MonsterState(S2C_GameState_MonsterState&& from) noexcept
      : S2C_GameState_MonsterState(nullptr, std::move(from)) {}
  inline S2C_GameState_MonsterState& operator=(const S2C_GameState_MonsterState& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_GameState_MonsterState& operator=(S2C_GameState_MonsterState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_GameState_MonsterState& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_GameState_MonsterState* internal_default_instance() {
    return reinterpret_cast<const S2C_GameState_MonsterState*>(
        &_S2C_GameState_MonsterState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(S2C_GameState_MonsterState& a, S2C_GameState_MonsterState& b) { a.Swap(&b); }
  inline void Swap(S2C_GameState_MonsterState* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_GameState_MonsterState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_GameState_MonsterState* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_GameState_MonsterState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_GameState_MonsterState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_GameState_MonsterState& from) { S2C_GameState_MonsterState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_GameState_MonsterState* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_GameState.MonsterState"; }

 protected:
  explicit S2C_GameState_MonsterState(::google::protobuf::Arena* arena);
  S2C_GameState_MonsterState(::google::protobuf::Arena* arena, const S2C_GameState_MonsterState& from);
  S2C_GameState_MonsterState(::google::protobuf::Arena* arena, S2C_GameState_MonsterState&& from) noexcept
      : S2C_GameState_MonsterState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMonsterIdFieldNumber = 1,
    kPositionFieldNumber = 2,
    kCurrentHpFieldNumber = 3,
    kMaxHpFieldNumber = 4,
    kMonsterTypeFieldNumber = 5,
  };
  // string monster_id = 1;
  void clear_monster_id() ;
  const std::string& monster_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_monster_id(Arg_&& arg, Args_... args);
  std::string* mutable_monster_id();
  PROTOBUF_NODISCARD std::string* release_monster_id();
  void set_allocated_monster_id(std::string* value);

  private:
  const std::string& _internal_monster_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_monster_id(
      const std::string& value);
  std::string* _internal_mutable_monster_id();

  public:
  // .ingame.Vector2 position = 2;
  bool has_position() const;
  void clear_position() ;
  const ::ingame::Vector2& position() const;
  PROTOBUF_NODISCARD ::ingame::Vector2* release_position();
  ::ingame::Vector2* mutable_position();
  void set_allocated_position(::ingame::Vector2* value);
  void unsafe_arena_set_allocated_position(::ingame::Vector2* value);
  ::ingame::Vector2* unsafe_arena_release_position();

  private:
  const ::ingame::Vector2& _internal_position() const;
  ::ingame::Vector2* _internal_mutable_position();

  public:
  // int32 current_hp = 3;
  void clear_current_hp() ;
  ::int32_t current_hp() const;
  void set_current_hp(::int32_t value);

  private:
  ::int32_t _internal_current_hp() const;
  void _internal_set_current_hp(::int32_t value);

  public:
  // int32 max_hp = 4;
  void clear_max_hp() ;
  ::int32_t max_hp() const;
  void set_max_hp(::int32_t value);

  private:
  ::int32_t _internal_max_hp() const;
  void _internal_set_max_hp(::int32_t value);

  public:
  // .ingame.MonsterType monster_type = 5;
  void clear_monster_type() ;
  ::ingame::MonsterType monster_type() const;
  void set_monster_type(::ingame::MonsterType value);

  private:
  ::ingame::MonsterType _internal_monster_type() const;
  void _internal_set_monster_type(::ingame::MonsterType value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_GameState.MonsterState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_GameState_MonsterState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr monster_id_;
    ::ingame::Vector2* position_;
    ::int32_t current_hp_;
    ::int32_t max_hp_;
    int monster_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_GameEnd final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_GameEnd) */ {
 public:
  inline S2C_GameEnd() : S2C_GameEnd(nullptr) {}
  ~S2C_GameEnd() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_GameEnd* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_GameEnd));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_GameEnd(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_GameEnd(const S2C_GameEnd& from) : S2C_GameEnd(nullptr, from) {}
  inline S2C_GameEnd(S2C_GameEnd&& from) noexcept
      : S2C_GameEnd(nullptr, std::move(from)) {}
  inline S2C_GameEnd& operator=(const S2C_GameEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_GameEnd& operator=(S2C_GameEnd&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_GameEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_GameEnd* internal_default_instance() {
    return reinterpret_cast<const S2C_GameEnd*>(
        &_S2C_GameEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 32;
  friend void swap(S2C_GameEnd& a, S2C_GameEnd& b) { a.Swap(&b); }
  inline void Swap(S2C_GameEnd* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_GameEnd* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_GameEnd* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_GameEnd>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_GameEnd& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_GameEnd& from) { S2C_GameEnd::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_GameEnd* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_GameEnd"; }

 protected:
  explicit S2C_GameEnd(::google::protobuf::Arena* arena);
  S2C_GameEnd(::google::protobuf::Arena* arena, const S2C_GameEnd& from);
  S2C_GameEnd(::google::protobuf::Arena* arena, S2C_GameEnd&& from) noexcept
      : S2C_GameEnd(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using PlayerResult = S2C_GameEnd_PlayerResult;

  // accessors -------------------------------------------------------
  enum : int {
    kResultsFieldNumber = 1,
  };
  // repeated .ingame.S2C_GameEnd.PlayerResult results = 1;
  int results_size() const;
  private:
  int _internal_results_size() const;

  public:
  void clear_results() ;
  ::ingame::S2C_GameEnd_PlayerResult* mutable_results(int index);
  ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameEnd_PlayerResult>* mutable_results();

  private:
  const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameEnd_PlayerResult>& _internal_results() const;
  ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameEnd_PlayerResult>* _internal_mutable_results();
  public:
  const ::ingame::S2C_GameEnd_PlayerResult& results(int index) const;
  ::ingame::S2C_GameEnd_PlayerResult* add_results();
  const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameEnd_PlayerResult>& results() const;
  // @@protoc_insertion_point(class_scope:ingame.S2C_GameEnd)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_GameEnd& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ingame::S2C_GameEnd_PlayerResult > results_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_CrownDropNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_CrownDropNotification) */ {
 public:
  inline S2C_CrownDropNotification() : S2C_CrownDropNotification(nullptr) {}
  ~S2C_CrownDropNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_CrownDropNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_CrownDropNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_CrownDropNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_CrownDropNotification(const S2C_CrownDropNotification& from) : S2C_CrownDropNotification(nullptr, from) {}
  inline S2C_CrownDropNotification(S2C_CrownDropNotification&& from) noexcept
      : S2C_CrownDropNotification(nullptr, std::move(from)) {}
  inline S2C_CrownDropNotification& operator=(const S2C_CrownDropNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_CrownDropNotification& operator=(S2C_CrownDropNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_CrownDropNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_CrownDropNotification* internal_default_instance() {
    return reinterpret_cast<const S2C_CrownDropNotification*>(
        &_S2C_CrownDropNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(S2C_CrownDropNotification& a, S2C_CrownDropNotification& b) { a.Swap(&b); }
  inline void Swap(S2C_CrownDropNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_CrownDropNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_CrownDropNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_CrownDropNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_CrownDropNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_CrownDropNotification& from) { S2C_CrownDropNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_CrownDropNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_CrownDropNotification"; }

 protected:
  explicit S2C_CrownDropNotification(::google::protobuf::Arena* arena);
  S2C_CrownDropNotification(::google::protobuf::Arena* arena, const S2C_CrownDropNotification& from);
  S2C_CrownDropNotification(::google::protobuf::Arena* arena, S2C_CrownDropNotification&& from) noexcept
      : S2C_CrownDropNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGiantIdFieldNumber = 2,
    kPositionFieldNumber = 1,
    kCountdownFieldNumber = 3,
  };
  // string giant_id = 2;
  void clear_giant_id() ;
  const std::string& giant_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_giant_id(Arg_&& arg, Args_... args);
  std::string* mutable_giant_id();
  PROTOBUF_NODISCARD std::string* release_giant_id();
  void set_allocated_giant_id(std::string* value);

  private:
  const std::string& _internal_giant_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_giant_id(
      const std::string& value);
  std::string* _internal_mutable_giant_id();

  public:
  // .ingame.Vector2 position = 1;
  bool has_position() const;
  void clear_position() ;
  const ::ingame::Vector2& position() const;
  PROTOBUF_NODISCARD ::ingame::Vector2* release_position();
  ::ingame::Vector2* mutable_position();
  void set_allocated_position(::ingame::Vector2* value);
  void unsafe_arena_set_allocated_position(::ingame::Vector2* value);
  ::ingame::Vector2* unsafe_arena_release_position();

  private:
  const ::ingame::Vector2& _internal_position() const;
  ::ingame::Vector2* _internal_mutable_position();

  public:
  // int32 countdown = 3;
  void clear_countdown() ;
  ::int32_t countdown() const;
  void set_countdown(::int32_t value);

  private:
  ::int32_t _internal_countdown() const;
  void _internal_set_countdown(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_CrownDropNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_CrownDropNotification& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr giant_id_;
    ::ingame::Vector2* position_;
    ::int32_t countdown_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_AttackHitNotification final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_AttackHitNotification) */ {
 public:
  inline S2C_AttackHitNotification() : S2C_AttackHitNotification(nullptr) {}
  ~S2C_AttackHitNotification() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_AttackHitNotification* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_AttackHitNotification));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_AttackHitNotification(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_AttackHitNotification(const S2C_AttackHitNotification& from) : S2C_AttackHitNotification(nullptr, from) {}
  inline S2C_AttackHitNotification(S2C_AttackHitNotification&& from) noexcept
      : S2C_AttackHitNotification(nullptr, std::move(from)) {}
  inline S2C_AttackHitNotification& operator=(const S2C_AttackHitNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_AttackHitNotification& operator=(S2C_AttackHitNotification&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_AttackHitNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_AttackHitNotification* internal_default_instance() {
    return reinterpret_cast<const S2C_AttackHitNotification*>(
        &_S2C_AttackHitNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(S2C_AttackHitNotification& a, S2C_AttackHitNotification& b) { a.Swap(&b); }
  inline void Swap(S2C_AttackHitNotification* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_AttackHitNotification* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_AttackHitNotification* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_AttackHitNotification>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_AttackHitNotification& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_AttackHitNotification& from) { S2C_AttackHitNotification::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_AttackHitNotification* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_AttackHitNotification"; }

 protected:
  explicit S2C_AttackHitNotification(::google::protobuf::Arena* arena);
  S2C_AttackHitNotification(::google::protobuf::Arena* arena, const S2C_AttackHitNotification& from);
  S2C_AttackHitNotification(::google::protobuf::Arena* arena, S2C_AttackHitNotification&& from) noexcept
      : S2C_AttackHitNotification(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAttackerIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
    kHitPositionFieldNumber = 4,
    kDamageFieldNumber = 3,
  };
  // string attacker_id = 1;
  void clear_attacker_id() ;
  const std::string& attacker_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_attacker_id(Arg_&& arg, Args_... args);
  std::string* mutable_attacker_id();
  PROTOBUF_NODISCARD std::string* release_attacker_id();
  void set_allocated_attacker_id(std::string* value);

  private:
  const std::string& _internal_attacker_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attacker_id(
      const std::string& value);
  std::string* _internal_mutable_attacker_id();

  public:
  // string target_id = 2;
  void clear_target_id() ;
  const std::string& target_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_target_id(Arg_&& arg, Args_... args);
  std::string* mutable_target_id();
  PROTOBUF_NODISCARD std::string* release_target_id();
  void set_allocated_target_id(std::string* value);

  private:
  const std::string& _internal_target_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_id(
      const std::string& value);
  std::string* _internal_mutable_target_id();

  public:
  // .ingame.Vector2 hit_position = 4;
  bool has_hit_position() const;
  void clear_hit_position() ;
  const ::ingame::Vector2& hit_position() const;
  PROTOBUF_NODISCARD ::ingame::Vector2* release_hit_position();
  ::ingame::Vector2* mutable_hit_position();
  void set_allocated_hit_position(::ingame::Vector2* value);
  void unsafe_arena_set_allocated_hit_position(::ingame::Vector2* value);
  ::ingame::Vector2* unsafe_arena_release_hit_position();

  private:
  const ::ingame::Vector2& _internal_hit_position() const;
  ::ingame::Vector2* _internal_mutable_hit_position();

  public:
  // int32 damage = 3;
  void clear_damage() ;
  ::int32_t damage() const;
  void set_damage(::int32_t value);

  private:
  ::int32_t _internal_damage() const;
  void _internal_set_damage(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_AttackHitNotification)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_AttackHitNotification& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr attacker_id_;
    ::google::protobuf::internal::ArenaStringPtr target_id_;
    ::ingame::Vector2* hit_position_;
    ::int32_t damage_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class PlayerRaceState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.PlayerRaceState) */ {
 public:
  inline PlayerRaceState() : PlayerRaceState(nullptr) {}
  ~PlayerRaceState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PlayerRaceState* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PlayerRaceState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PlayerRaceState(
      ::google::protobuf::internal::ConstantInitialized);

  inline PlayerRaceState(const PlayerRaceState& from) : PlayerRaceState(nullptr, from) {}
  inline PlayerRaceState(PlayerRaceState&& from) noexcept
      : PlayerRaceState(nullptr, std::move(from)) {}
  inline PlayerRaceState& operator=(const PlayerRaceState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerRaceState& operator=(PlayerRaceState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerRaceState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerRaceState* internal_default_instance() {
    return reinterpret_cast<const PlayerRaceState*>(
        &_PlayerRaceState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(PlayerRaceState& a, PlayerRaceState& b) { a.Swap(&b); }
  inline void Swap(PlayerRaceState* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerRaceState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerRaceState* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PlayerRaceState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PlayerRaceState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PlayerRaceState& from) { PlayerRaceState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PlayerRaceState* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.PlayerRaceState"; }

 protected:
  explicit PlayerRaceState(::google::protobuf::Arena* arena);
  PlayerRaceState(::google::protobuf::Arena* arena, const PlayerRaceState& from);
  PlayerRaceState(::google::protobuf::Arena* arena, PlayerRaceState&& from) noexcept
      : PlayerRaceState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGeneInventoryFieldNumber = 3,
    kEquippedGenesFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kGiantStatsFieldNumber = 6,
    kCurrentRaceFieldNumber = 2,
    kCanTransformFieldNumber = 5,
    kCurrentHpFieldNumber = 7,
    kMaxHpFieldNumber = 8,
  };
  // map<int32, int32> gene_inventory = 3;
  int gene_inventory_size() const;
  private:
  int _internal_gene_inventory_size() const;

  public:
  void clear_gene_inventory() ;
  const ::google::protobuf::Map<::int32_t, ::int32_t>& gene_inventory() const;
  ::google::protobuf::Map<::int32_t, ::int32_t>* mutable_gene_inventory();

  private:
  const ::google::protobuf::Map<::int32_t, ::int32_t>& _internal_gene_inventory() const;
  ::google::protobuf::Map<::int32_t, ::int32_t>* _internal_mutable_gene_inventory();

  public:
  // repeated .ingame.GeneType equipped_genes = 4;
  int equipped_genes_size() const;
  private:
  int _internal_equipped_genes_size() const;

  public:
  void clear_equipped_genes() ;
  public:
  ::ingame::GeneType equipped_genes(int index) const;
  void set_equipped_genes(int index, ::ingame::GeneType value);
  void add_equipped_genes(::ingame::GeneType value);
  const ::google::protobuf::RepeatedField<int>& equipped_genes() const;
  ::google::protobuf::RepeatedField<int>* mutable_equipped_genes();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_equipped_genes() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_equipped_genes();

  public:
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // .ingame.GiantStats giant_stats = 6;
  bool has_giant_stats() const;
  void clear_giant_stats() ;
  const ::ingame::GiantStats& giant_stats() const;
  PROTOBUF_NODISCARD ::ingame::GiantStats* release_giant_stats();
  ::ingame::GiantStats* mutable_giant_stats();
  void set_allocated_giant_stats(::ingame::GiantStats* value);
  void unsafe_arena_set_allocated_giant_stats(::ingame::GiantStats* value);
  ::ingame::GiantStats* unsafe_arena_release_giant_stats();

  private:
  const ::ingame::GiantStats& _internal_giant_stats() const;
  ::ingame::GiantStats* _internal_mutable_giant_stats();

  public:
  // .ingame.RaceType current_race = 2;
  void clear_current_race() ;
  ::ingame::RaceType current_race() const;
  void set_current_race(::ingame::RaceType value);

  private:
  ::ingame::RaceType _internal_current_race() const;
  void _internal_set_current_race(::ingame::RaceType value);

  public:
  // bool can_transform = 5;
  void clear_can_transform() ;
  bool can_transform() const;
  void set_can_transform(bool value);

  private:
  bool _internal_can_transform() const;
  void _internal_set_can_transform(bool value);

  public:
  // int32 current_hp = 7;
  void clear_current_hp() ;
  ::int32_t current_hp() const;
  void set_current_hp(::int32_t value);

  private:
  ::int32_t _internal_current_hp() const;
  void _internal_set_current_hp(::int32_t value);

  public:
  // int32 max_hp = 8;
  void clear_max_hp() ;
  ::int32_t max_hp() const;
  void set_max_hp(::int32_t value);

  private:
  ::int32_t _internal_max_hp() const;
  void _internal_set_max_hp(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.PlayerRaceState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 2,
      46, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PlayerRaceState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<PlayerRaceState_GeneInventoryEntry_DoNotUse, ::int32_t, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        gene_inventory_;
    ::google::protobuf::RepeatedField<int> equipped_genes_;
    ::google::protobuf::internal::CachedSize _equipped_genes_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::ingame::GiantStats* giant_stats_;
    int current_race_;
    bool can_transform_;
    ::int32_t current_hp_;
    ::int32_t max_hp_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class C2S_PlayerMove final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.C2S_PlayerMove) */ {
 public:
  inline C2S_PlayerMove() : C2S_PlayerMove(nullptr) {}
  ~C2S_PlayerMove() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(C2S_PlayerMove* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(C2S_PlayerMove));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR C2S_PlayerMove(
      ::google::protobuf::internal::ConstantInitialized);

  inline C2S_PlayerMove(const C2S_PlayerMove& from) : C2S_PlayerMove(nullptr, from) {}
  inline C2S_PlayerMove(C2S_PlayerMove&& from) noexcept
      : C2S_PlayerMove(nullptr, std::move(from)) {}
  inline C2S_PlayerMove& operator=(const C2S_PlayerMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_PlayerMove& operator=(C2S_PlayerMove&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_PlayerMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_PlayerMove* internal_default_instance() {
    return reinterpret_cast<const C2S_PlayerMove*>(
        &_C2S_PlayerMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(C2S_PlayerMove& a, C2S_PlayerMove& b) { a.Swap(&b); }
  inline void Swap(C2S_PlayerMove* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_PlayerMove* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_PlayerMove* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<C2S_PlayerMove>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C2S_PlayerMove& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const C2S_PlayerMove& from) { C2S_PlayerMove::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(C2S_PlayerMove* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.C2S_PlayerMove"; }

 protected:
  explicit C2S_PlayerMove(::google::protobuf::Arena* arena);
  C2S_PlayerMove(::google::protobuf::Arena* arena, const C2S_PlayerMove& from);
  C2S_PlayerMove(::google::protobuf::Arena* arena, C2S_PlayerMove&& from) noexcept
      : C2S_PlayerMove(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kPositionFieldNumber = 2,
    kDirFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // .ingame.Vector2 position = 2;
  bool has_position() const;
  void clear_position() ;
  const ::ingame::Vector2& position() const;
  PROTOBUF_NODISCARD ::ingame::Vector2* release_position();
  ::ingame::Vector2* mutable_position();
  void set_allocated_position(::ingame::Vector2* value);
  void unsafe_arena_set_allocated_position(::ingame::Vector2* value);
  ::ingame::Vector2* unsafe_arena_release_position();

  private:
  const ::ingame::Vector2& _internal_position() const;
  ::ingame::Vector2* _internal_mutable_position();

  public:
  // float dir = 3;
  void clear_dir() ;
  float dir() const;
  void set_dir(float value);

  private:
  float _internal_dir() const;
  void _internal_set_dir(float value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.C2S_PlayerMove)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const C2S_PlayerMove& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::ingame::Vector2* position_;
    float dir_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class C2S_PlayerAttack final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.C2S_PlayerAttack) */ {
 public:
  inline C2S_PlayerAttack() : C2S_PlayerAttack(nullptr) {}
  ~C2S_PlayerAttack() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(C2S_PlayerAttack* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(C2S_PlayerAttack));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR C2S_PlayerAttack(
      ::google::protobuf::internal::ConstantInitialized);

  inline C2S_PlayerAttack(const C2S_PlayerAttack& from) : C2S_PlayerAttack(nullptr, from) {}
  inline C2S_PlayerAttack(C2S_PlayerAttack&& from) noexcept
      : C2S_PlayerAttack(nullptr, std::move(from)) {}
  inline C2S_PlayerAttack& operator=(const C2S_PlayerAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_PlayerAttack& operator=(C2S_PlayerAttack&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_PlayerAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_PlayerAttack* internal_default_instance() {
    return reinterpret_cast<const C2S_PlayerAttack*>(
        &_C2S_PlayerAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(C2S_PlayerAttack& a, C2S_PlayerAttack& b) { a.Swap(&b); }
  inline void Swap(C2S_PlayerAttack* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_PlayerAttack* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_PlayerAttack* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<C2S_PlayerAttack>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C2S_PlayerAttack& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const C2S_PlayerAttack& from) { C2S_PlayerAttack::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(C2S_PlayerAttack* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.C2S_PlayerAttack"; }

 protected:
  explicit C2S_PlayerAttack(::google::protobuf::Arena* arena);
  C2S_PlayerAttack(::google::protobuf::Arena* arena, const C2S_PlayerAttack& from);
  C2S_PlayerAttack(::google::protobuf::Arena* arena, C2S_PlayerAttack&& from) noexcept
      : C2S_PlayerAttack(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kAttackDirectionFieldNumber = 3,
    kAttackPositionFieldNumber = 4,
    kAttackTypeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // .ingame.Vector2 attack_direction = 3;
  bool has_attack_direction() const;
  void clear_attack_direction() ;
  const ::ingame::Vector2& attack_direction() const;
  PROTOBUF_NODISCARD ::ingame::Vector2* release_attack_direction();
  ::ingame::Vector2* mutable_attack_direction();
  void set_allocated_attack_direction(::ingame::Vector2* value);
  void unsafe_arena_set_allocated_attack_direction(::ingame::Vector2* value);
  ::ingame::Vector2* unsafe_arena_release_attack_direction();

  private:
  const ::ingame::Vector2& _internal_attack_direction() const;
  ::ingame::Vector2* _internal_mutable_attack_direction();

  public:
  // .ingame.Vector2 attack_position = 4;
  bool has_attack_position() const;
  void clear_attack_position() ;
  const ::ingame::Vector2& attack_position() const;
  PROTOBUF_NODISCARD ::ingame::Vector2* release_attack_position();
  ::ingame::Vector2* mutable_attack_position();
  void set_allocated_attack_position(::ingame::Vector2* value);
  void unsafe_arena_set_allocated_attack_position(::ingame::Vector2* value);
  ::ingame::Vector2* unsafe_arena_release_attack_position();

  private:
  const ::ingame::Vector2& _internal_attack_position() const;
  ::ingame::Vector2* _internal_mutable_attack_position();

  public:
  // .ingame.AttackType attack_type = 2;
  void clear_attack_type() ;
  ::ingame::AttackType attack_type() const;
  void set_attack_type(::ingame::AttackType value);

  private:
  ::ingame::AttackType _internal_attack_type() const;
  void _internal_set_attack_type(::ingame::AttackType value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.C2S_PlayerAttack)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      39, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const C2S_PlayerAttack& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::ingame::Vector2* attack_direction_;
    ::ingame::Vector2* attack_position_;
    int attack_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class C2S_PickupCrown final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.C2S_PickupCrown) */ {
 public:
  inline C2S_PickupCrown() : C2S_PickupCrown(nullptr) {}
  ~C2S_PickupCrown() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(C2S_PickupCrown* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(C2S_PickupCrown));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR C2S_PickupCrown(
      ::google::protobuf::internal::ConstantInitialized);

  inline C2S_PickupCrown(const C2S_PickupCrown& from) : C2S_PickupCrown(nullptr, from) {}
  inline C2S_PickupCrown(C2S_PickupCrown&& from) noexcept
      : C2S_PickupCrown(nullptr, std::move(from)) {}
  inline C2S_PickupCrown& operator=(const C2S_PickupCrown& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_PickupCrown& operator=(C2S_PickupCrown&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_PickupCrown& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_PickupCrown* internal_default_instance() {
    return reinterpret_cast<const C2S_PickupCrown*>(
        &_C2S_PickupCrown_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(C2S_PickupCrown& a, C2S_PickupCrown& b) { a.Swap(&b); }
  inline void Swap(C2S_PickupCrown* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_PickupCrown* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_PickupCrown* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<C2S_PickupCrown>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C2S_PickupCrown& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const C2S_PickupCrown& from) { C2S_PickupCrown::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(C2S_PickupCrown* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.C2S_PickupCrown"; }

 protected:
  explicit C2S_PickupCrown(::google::protobuf::Arena* arena);
  C2S_PickupCrown(::google::protobuf::Arena* arena, const C2S_PickupCrown& from);
  C2S_PickupCrown(::google::protobuf::Arena* arena, C2S_PickupCrown&& from) noexcept
      : C2S_PickupCrown(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kCrownPositionFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // .ingame.Vector2 crown_position = 2;
  bool has_crown_position() const;
  void clear_crown_position() ;
  const ::ingame::Vector2& crown_position() const;
  PROTOBUF_NODISCARD ::ingame::Vector2* release_crown_position();
  ::ingame::Vector2* mutable_crown_position();
  void set_allocated_crown_position(::ingame::Vector2* value);
  void unsafe_arena_set_allocated_crown_position(::ingame::Vector2* value);
  ::ingame::Vector2* unsafe_arena_release_crown_position();

  private:
  const ::ingame::Vector2& _internal_crown_position() const;
  ::ingame::Vector2* _internal_mutable_crown_position();

  public:
  // @@protoc_insertion_point(class_scope:ingame.C2S_PickupCrown)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      38, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const C2S_PickupCrown& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::ingame::Vector2* crown_position_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class C2S_HiddenSkill final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.C2S_HiddenSkill) */ {
 public:
  inline C2S_HiddenSkill() : C2S_HiddenSkill(nullptr) {}
  ~C2S_HiddenSkill() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(C2S_HiddenSkill* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(C2S_HiddenSkill));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR C2S_HiddenSkill(
      ::google::protobuf::internal::ConstantInitialized);

  inline C2S_HiddenSkill(const C2S_HiddenSkill& from) : C2S_HiddenSkill(nullptr, from) {}
  inline C2S_HiddenSkill(C2S_HiddenSkill&& from) noexcept
      : C2S_HiddenSkill(nullptr, std::move(from)) {}
  inline C2S_HiddenSkill& operator=(const C2S_HiddenSkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2S_HiddenSkill& operator=(C2S_HiddenSkill&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2S_HiddenSkill& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2S_HiddenSkill* internal_default_instance() {
    return reinterpret_cast<const C2S_HiddenSkill*>(
        &_C2S_HiddenSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 29;
  friend void swap(C2S_HiddenSkill& a, C2S_HiddenSkill& b) { a.Swap(&b); }
  inline void Swap(C2S_HiddenSkill* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2S_HiddenSkill* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2S_HiddenSkill* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<C2S_HiddenSkill>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const C2S_HiddenSkill& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const C2S_HiddenSkill& from) { C2S_HiddenSkill::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(C2S_HiddenSkill* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.C2S_HiddenSkill"; }

 protected:
  explicit C2S_HiddenSkill(::google::protobuf::Arena* arena);
  C2S_HiddenSkill(::google::protobuf::Arena* arena, const C2S_HiddenSkill& from);
  C2S_HiddenSkill(::google::protobuf::Arena* arena, C2S_HiddenSkill&& from) noexcept
      : C2S_HiddenSkill(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUserIdFieldNumber = 1,
    kCursorPositionFieldNumber = 3,
    kSkillTypeFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // .ingame.Vector2 cursor_position = 3;
  bool has_cursor_position() const;
  void clear_cursor_position() ;
  const ::ingame::Vector2& cursor_position() const;
  PROTOBUF_NODISCARD ::ingame::Vector2* release_cursor_position();
  ::ingame::Vector2* mutable_cursor_position();
  void set_allocated_cursor_position(::ingame::Vector2* value);
  void unsafe_arena_set_allocated_cursor_position(::ingame::Vector2* value);
  ::ingame::Vector2* unsafe_arena_release_cursor_position();

  private:
  const ::ingame::Vector2& _internal_cursor_position() const;
  ::ingame::Vector2* _internal_mutable_cursor_position();

  public:
  // .ingame.GeneType skill_type = 2;
  void clear_skill_type() ;
  ::ingame::GeneType skill_type() const;
  void set_skill_type(::ingame::GeneType value);

  private:
  ::ingame::GeneType _internal_skill_type() const;
  void _internal_set_skill_type(::ingame::GeneType value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.C2S_HiddenSkill)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      38, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const C2S_HiddenSkill& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::ingame::Vector2* cursor_position_;
    int skill_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_JoinGameResult final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_JoinGameResult) */ {
 public:
  inline S2C_JoinGameResult() : S2C_JoinGameResult(nullptr) {}
  ~S2C_JoinGameResult() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_JoinGameResult* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_JoinGameResult));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_JoinGameResult(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_JoinGameResult(const S2C_JoinGameResult& from) : S2C_JoinGameResult(nullptr, from) {}
  inline S2C_JoinGameResult(S2C_JoinGameResult&& from) noexcept
      : S2C_JoinGameResult(nullptr, std::move(from)) {}
  inline S2C_JoinGameResult& operator=(const S2C_JoinGameResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_JoinGameResult& operator=(S2C_JoinGameResult&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_JoinGameResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_JoinGameResult* internal_default_instance() {
    return reinterpret_cast<const S2C_JoinGameResult*>(
        &_S2C_JoinGameResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(S2C_JoinGameResult& a, S2C_JoinGameResult& b) { a.Swap(&b); }
  inline void Swap(S2C_JoinGameResult* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_JoinGameResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_JoinGameResult* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_JoinGameResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_JoinGameResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_JoinGameResult& from) { S2C_JoinGameResult::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_JoinGameResult* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_JoinGameResult"; }

 protected:
  explicit S2C_JoinGameResult(::google::protobuf::Arena* arena);
  S2C_JoinGameResult(::google::protobuf::Arena* arena, const S2C_JoinGameResult& from);
  S2C_JoinGameResult(::google::protobuf::Arena* arena, S2C_JoinGameResult&& from) noexcept
      : S2C_JoinGameResult(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 4,
    kInitialStateFieldNumber = 2,
    kWorldStateFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string message = 4;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .ingame.PlayerRaceState initial_state = 2;
  bool has_initial_state() const;
  void clear_initial_state() ;
  const ::ingame::PlayerRaceState& initial_state() const;
  PROTOBUF_NODISCARD ::ingame::PlayerRaceState* release_initial_state();
  ::ingame::PlayerRaceState* mutable_initial_state();
  void set_allocated_initial_state(::ingame::PlayerRaceState* value);
  void unsafe_arena_set_allocated_initial_state(::ingame::PlayerRaceState* value);
  ::ingame::PlayerRaceState* unsafe_arena_release_initial_state();

  private:
  const ::ingame::PlayerRaceState& _internal_initial_state() const;
  ::ingame::PlayerRaceState* _internal_mutable_initial_state();

  public:
  // .ingame.GameWorldState world_state = 3;
  bool has_world_state() const;
  void clear_world_state() ;
  const ::ingame::GameWorldState& world_state() const;
  PROTOBUF_NODISCARD ::ingame::GameWorldState* release_world_state();
  ::ingame::GameWorldState* mutable_world_state();
  void set_allocated_world_state(::ingame::GameWorldState* value);
  void unsafe_arena_set_allocated_world_state(::ingame::GameWorldState* value);
  ::ingame::GameWorldState* unsafe_arena_release_world_state();

  private:
  const ::ingame::GameWorldState& _internal_world_state() const;
  ::ingame::GameWorldState* _internal_mutable_world_state();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_JoinGameResult)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_JoinGameResult& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::ingame::PlayerRaceState* initial_state_;
    ::ingame::GameWorldState* world_state_;
    bool success_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};
// -------------------------------------------------------------------

class S2C_GameState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ingame.S2C_GameState) */ {
 public:
  inline S2C_GameState() : S2C_GameState(nullptr) {}
  ~S2C_GameState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(S2C_GameState* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_GameState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR S2C_GameState(
      ::google::protobuf::internal::ConstantInitialized);

  inline S2C_GameState(const S2C_GameState& from) : S2C_GameState(nullptr, from) {}
  inline S2C_GameState(S2C_GameState&& from) noexcept
      : S2C_GameState(nullptr, std::move(from)) {}
  inline S2C_GameState& operator=(const S2C_GameState& from) {
    CopyFrom(from);
    return *this;
  }
  inline S2C_GameState& operator=(S2C_GameState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S2C_GameState& default_instance() {
    return *internal_default_instance();
  }
  static inline const S2C_GameState* internal_default_instance() {
    return reinterpret_cast<const S2C_GameState*>(
        &_S2C_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(S2C_GameState& a, S2C_GameState& b) { a.Swap(&b); }
  inline void Swap(S2C_GameState* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S2C_GameState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S2C_GameState* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<S2C_GameState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const S2C_GameState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const S2C_GameState& from) { S2C_GameState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(S2C_GameState* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ingame.S2C_GameState"; }

 protected:
  explicit S2C_GameState(::google::protobuf::Arena* arena);
  S2C_GameState(::google::protobuf::Arena* arena, const S2C_GameState& from);
  S2C_GameState(::google::protobuf::Arena* arena, S2C_GameState&& from) noexcept
      : S2C_GameState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using PlayerState = S2C_GameState_PlayerState;
  using MonsterState = S2C_GameState_MonsterState;

  // accessors -------------------------------------------------------
  enum : int {
    kPlayersFieldNumber = 1,
    kMonstersFieldNumber = 2,
    kPhaseTimeRemainingFieldNumber = 3,
    kCurrentPhaseFieldNumber = 4,
  };
  // repeated .ingame.S2C_GameState.PlayerState players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;

  public:
  void clear_players() ;
  ::ingame::S2C_GameState_PlayerState* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_PlayerState>* mutable_players();

  private:
  const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_PlayerState>& _internal_players() const;
  ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_PlayerState>* _internal_mutable_players();
  public:
  const ::ingame::S2C_GameState_PlayerState& players(int index) const;
  ::ingame::S2C_GameState_PlayerState* add_players();
  const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_PlayerState>& players() const;
  // repeated .ingame.S2C_GameState.MonsterState monsters = 2;
  int monsters_size() const;
  private:
  int _internal_monsters_size() const;

  public:
  void clear_monsters() ;
  ::ingame::S2C_GameState_MonsterState* mutable_monsters(int index);
  ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_MonsterState>* mutable_monsters();

  private:
  const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_MonsterState>& _internal_monsters() const;
  ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_MonsterState>* _internal_mutable_monsters();
  public:
  const ::ingame::S2C_GameState_MonsterState& monsters(int index) const;
  ::ingame::S2C_GameState_MonsterState* add_monsters();
  const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_MonsterState>& monsters() const;
  // int32 phase_time_remaining = 3;
  void clear_phase_time_remaining() ;
  ::int32_t phase_time_remaining() const;
  void set_phase_time_remaining(::int32_t value);

  private:
  ::int32_t _internal_phase_time_remaining() const;
  void _internal_set_phase_time_remaining(::int32_t value);

  public:
  // int32 current_phase = 4;
  void clear_current_phase() ;
  ::int32_t current_phase() const;
  void set_current_phase(::int32_t value);

  private:
  ::int32_t _internal_current_phase() const;
  void _internal_set_current_phase(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ingame.S2C_GameState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const S2C_GameState& from_msg);
    ::google::protobuf::RepeatedPtrField< ::ingame::S2C_GameState_PlayerState > players_;
    ::google::protobuf::RepeatedPtrField< ::ingame::S2C_GameState_MonsterState > monsters_;
    ::int32_t phase_time_remaining_;
    ::int32_t current_phase_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ingame_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// C2S_JoinGame

// string user_id = 1;
inline void C2S_JoinGame::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& C2S_JoinGame::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.C2S_JoinGame.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C2S_JoinGame::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.C2S_JoinGame.user_id)
}
inline std::string* C2S_JoinGame::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.C2S_JoinGame.user_id)
  return _s;
}
inline const std::string& C2S_JoinGame::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void C2S_JoinGame::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* C2S_JoinGame::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* C2S_JoinGame::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.C2S_JoinGame.user_id)
  return _impl_.user_id_.Release();
}
inline void C2S_JoinGame::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.C2S_JoinGame.user_id)
}

// string room_id = 2;
inline void C2S_JoinGame::clear_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_.ClearToEmpty();
}
inline const std::string& C2S_JoinGame::room_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.C2S_JoinGame.room_id)
  return _internal_room_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C2S_JoinGame::set_room_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.C2S_JoinGame.room_id)
}
inline std::string* C2S_JoinGame::mutable_room_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:ingame.C2S_JoinGame.room_id)
  return _s;
}
inline const std::string& C2S_JoinGame::_internal_room_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.room_id_.Get();
}
inline void C2S_JoinGame::_internal_set_room_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_.Set(value, GetArena());
}
inline std::string* C2S_JoinGame::_internal_mutable_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.room_id_.Mutable( GetArena());
}
inline std::string* C2S_JoinGame::release_room_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.C2S_JoinGame.room_id)
  return _impl_.room_id_.Release();
}
inline void C2S_JoinGame::set_allocated_room_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.room_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.room_id_.IsDefault()) {
    _impl_.room_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.C2S_JoinGame.room_id)
}

// -------------------------------------------------------------------

// S2C_JoinGameResult

// bool success = 1;
inline void S2C_JoinGameResult::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool S2C_JoinGameResult::success() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_JoinGameResult.success)
  return _internal_success();
}
inline void S2C_JoinGameResult::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_JoinGameResult.success)
}
inline bool S2C_JoinGameResult::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void S2C_JoinGameResult::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// .ingame.PlayerRaceState initial_state = 2;
inline bool S2C_JoinGameResult::has_initial_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.initial_state_ != nullptr);
  return value;
}
inline void S2C_JoinGameResult::clear_initial_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.initial_state_ != nullptr) _impl_.initial_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ingame::PlayerRaceState& S2C_JoinGameResult::_internal_initial_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ingame::PlayerRaceState* p = _impl_.initial_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::ingame::PlayerRaceState&>(::ingame::_PlayerRaceState_default_instance_);
}
inline const ::ingame::PlayerRaceState& S2C_JoinGameResult::initial_state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_JoinGameResult.initial_state)
  return _internal_initial_state();
}
inline void S2C_JoinGameResult::unsafe_arena_set_allocated_initial_state(::ingame::PlayerRaceState* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_state_);
  }
  _impl_.initial_state_ = reinterpret_cast<::ingame::PlayerRaceState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ingame.S2C_JoinGameResult.initial_state)
}
inline ::ingame::PlayerRaceState* S2C_JoinGameResult::release_initial_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::PlayerRaceState* released = _impl_.initial_state_;
  _impl_.initial_state_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ingame::PlayerRaceState* S2C_JoinGameResult::unsafe_arena_release_initial_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_JoinGameResult.initial_state)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::PlayerRaceState* temp = _impl_.initial_state_;
  _impl_.initial_state_ = nullptr;
  return temp;
}
inline ::ingame::PlayerRaceState* S2C_JoinGameResult::_internal_mutable_initial_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.initial_state_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ingame::PlayerRaceState>(GetArena());
    _impl_.initial_state_ = reinterpret_cast<::ingame::PlayerRaceState*>(p);
  }
  return _impl_.initial_state_;
}
inline ::ingame::PlayerRaceState* S2C_JoinGameResult::mutable_initial_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ingame::PlayerRaceState* _msg = _internal_mutable_initial_state();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_JoinGameResult.initial_state)
  return _msg;
}
inline void S2C_JoinGameResult::set_allocated_initial_state(::ingame::PlayerRaceState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.initial_state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.initial_state_ = reinterpret_cast<::ingame::PlayerRaceState*>(value);
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_JoinGameResult.initial_state)
}

// .ingame.GameWorldState world_state = 3;
inline bool S2C_JoinGameResult::has_world_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.world_state_ != nullptr);
  return value;
}
inline void S2C_JoinGameResult::clear_world_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.world_state_ != nullptr) _impl_.world_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ingame::GameWorldState& S2C_JoinGameResult::_internal_world_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ingame::GameWorldState* p = _impl_.world_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::ingame::GameWorldState&>(::ingame::_GameWorldState_default_instance_);
}
inline const ::ingame::GameWorldState& S2C_JoinGameResult::world_state() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_JoinGameResult.world_state)
  return _internal_world_state();
}
inline void S2C_JoinGameResult::unsafe_arena_set_allocated_world_state(::ingame::GameWorldState* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.world_state_);
  }
  _impl_.world_state_ = reinterpret_cast<::ingame::GameWorldState*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ingame.S2C_JoinGameResult.world_state)
}
inline ::ingame::GameWorldState* S2C_JoinGameResult::release_world_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ingame::GameWorldState* released = _impl_.world_state_;
  _impl_.world_state_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ingame::GameWorldState* S2C_JoinGameResult::unsafe_arena_release_world_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_JoinGameResult.world_state)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ingame::GameWorldState* temp = _impl_.world_state_;
  _impl_.world_state_ = nullptr;
  return temp;
}
inline ::ingame::GameWorldState* S2C_JoinGameResult::_internal_mutable_world_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.world_state_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ingame::GameWorldState>(GetArena());
    _impl_.world_state_ = reinterpret_cast<::ingame::GameWorldState*>(p);
  }
  return _impl_.world_state_;
}
inline ::ingame::GameWorldState* S2C_JoinGameResult::mutable_world_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::ingame::GameWorldState* _msg = _internal_mutable_world_state();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_JoinGameResult.world_state)
  return _msg;
}
inline void S2C_JoinGameResult::set_allocated_world_state(::ingame::GameWorldState* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.world_state_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.world_state_ = reinterpret_cast<::ingame::GameWorldState*>(value);
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_JoinGameResult.world_state)
}

// string message = 4;
inline void S2C_JoinGameResult::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& S2C_JoinGameResult::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_JoinGameResult.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_JoinGameResult::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_JoinGameResult.message)
}
inline std::string* S2C_JoinGameResult::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_JoinGameResult.message)
  return _s;
}
inline const std::string& S2C_JoinGameResult::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void S2C_JoinGameResult::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* S2C_JoinGameResult::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* S2C_JoinGameResult::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_JoinGameResult.message)
  return _impl_.message_.Release();
}
inline void S2C_JoinGameResult::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_JoinGameResult.message)
}

// -------------------------------------------------------------------

// GameWorldState

// int32 current_phase = 1;
inline void GameWorldState::clear_current_phase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_phase_ = 0;
}
inline ::int32_t GameWorldState::current_phase() const {
  // @@protoc_insertion_point(field_get:ingame.GameWorldState.current_phase)
  return _internal_current_phase();
}
inline void GameWorldState::set_current_phase(::int32_t value) {
  _internal_set_current_phase(value);
  // @@protoc_insertion_point(field_set:ingame.GameWorldState.current_phase)
}
inline ::int32_t GameWorldState::_internal_current_phase() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_phase_;
}
inline void GameWorldState::_internal_set_current_phase(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_phase_ = value;
}

// int32 phase_time_remaining = 2;
inline void GameWorldState::clear_phase_time_remaining() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phase_time_remaining_ = 0;
}
inline ::int32_t GameWorldState::phase_time_remaining() const {
  // @@protoc_insertion_point(field_get:ingame.GameWorldState.phase_time_remaining)
  return _internal_phase_time_remaining();
}
inline void GameWorldState::set_phase_time_remaining(::int32_t value) {
  _internal_set_phase_time_remaining(value);
  // @@protoc_insertion_point(field_set:ingame.GameWorldState.phase_time_remaining)
}
inline ::int32_t GameWorldState::_internal_phase_time_remaining() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.phase_time_remaining_;
}
inline void GameWorldState::_internal_set_phase_time_remaining(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phase_time_remaining_ = value;
}

// int32 human_count = 3;
inline void GameWorldState::clear_human_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.human_count_ = 0;
}
inline ::int32_t GameWorldState::human_count() const {
  // @@protoc_insertion_point(field_get:ingame.GameWorldState.human_count)
  return _internal_human_count();
}
inline void GameWorldState::set_human_count(::int32_t value) {
  _internal_set_human_count(value);
  // @@protoc_insertion_point(field_set:ingame.GameWorldState.human_count)
}
inline ::int32_t GameWorldState::_internal_human_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.human_count_;
}
inline void GameWorldState::_internal_set_human_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.human_count_ = value;
}

// int32 giane_count = 4;
inline void GameWorldState::clear_giane_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giane_count_ = 0;
}
inline ::int32_t GameWorldState::giane_count() const {
  // @@protoc_insertion_point(field_get:ingame.GameWorldState.giane_count)
  return _internal_giane_count();
}
inline void GameWorldState::set_giane_count(::int32_t value) {
  _internal_set_giane_count(value);
  // @@protoc_insertion_point(field_set:ingame.GameWorldState.giane_count)
}
inline ::int32_t GameWorldState::_internal_giane_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.giane_count_;
}
inline void GameWorldState::_internal_set_giane_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giane_count_ = value;
}

// int32 monster_count = 5;
inline void GameWorldState::clear_monster_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.monster_count_ = 0;
}
inline ::int32_t GameWorldState::monster_count() const {
  // @@protoc_insertion_point(field_get:ingame.GameWorldState.monster_count)
  return _internal_monster_count();
}
inline void GameWorldState::set_monster_count(::int32_t value) {
  _internal_set_monster_count(value);
  // @@protoc_insertion_point(field_set:ingame.GameWorldState.monster_count)
}
inline ::int32_t GameWorldState::_internal_monster_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.monster_count_;
}
inline void GameWorldState::_internal_set_monster_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.monster_count_ = value;
}

// -------------------------------------------------------------------

// Vector2

// float x = 1;
inline void Vector2::clear_x() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = 0;
}
inline float Vector2::x() const {
  // @@protoc_insertion_point(field_get:ingame.Vector2.x)
  return _internal_x();
}
inline void Vector2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ingame.Vector2.x)
}
inline float Vector2::_internal_x() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.x_;
}
inline void Vector2::_internal_set_x(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.x_ = value;
}

// float y = 2;
inline void Vector2::clear_y() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = 0;
}
inline float Vector2::y() const {
  // @@protoc_insertion_point(field_get:ingame.Vector2.y)
  return _internal_y();
}
inline void Vector2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ingame.Vector2.y)
}
inline float Vector2::_internal_y() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.y_;
}
inline void Vector2::_internal_set_y(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// GiantStats

// float attack_speed = 1;
inline void GiantStats::clear_attack_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack_speed_ = 0;
}
inline float GiantStats::attack_speed() const {
  // @@protoc_insertion_point(field_get:ingame.GiantStats.attack_speed)
  return _internal_attack_speed();
}
inline void GiantStats::set_attack_speed(float value) {
  _internal_set_attack_speed(value);
  // @@protoc_insertion_point(field_set:ingame.GiantStats.attack_speed)
}
inline float GiantStats::_internal_attack_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attack_speed_;
}
inline void GiantStats::_internal_set_attack_speed(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack_speed_ = value;
}

// float move_speed = 2;
inline void GiantStats::clear_move_speed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_speed_ = 0;
}
inline float GiantStats::move_speed() const {
  // @@protoc_insertion_point(field_get:ingame.GiantStats.move_speed)
  return _internal_move_speed();
}
inline void GiantStats::set_move_speed(float value) {
  _internal_set_move_speed(value);
  // @@protoc_insertion_point(field_set:ingame.GiantStats.move_speed)
}
inline float GiantStats::_internal_move_speed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.move_speed_;
}
inline void GiantStats::_internal_set_move_speed(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.move_speed_ = value;
}

// float attack_range = 3;
inline void GiantStats::clear_attack_range() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack_range_ = 0;
}
inline float GiantStats::attack_range() const {
  // @@protoc_insertion_point(field_get:ingame.GiantStats.attack_range)
  return _internal_attack_range();
}
inline void GiantStats::set_attack_range(float value) {
  _internal_set_attack_range(value);
  // @@protoc_insertion_point(field_set:ingame.GiantStats.attack_range)
}
inline float GiantStats::_internal_attack_range() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attack_range_;
}
inline void GiantStats::_internal_set_attack_range(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack_range_ = value;
}

// int32 max_health = 4;
inline void GiantStats::clear_max_health() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_health_ = 0;
}
inline ::int32_t GiantStats::max_health() const {
  // @@protoc_insertion_point(field_get:ingame.GiantStats.max_health)
  return _internal_max_health();
}
inline void GiantStats::set_max_health(::int32_t value) {
  _internal_set_max_health(value);
  // @@protoc_insertion_point(field_set:ingame.GiantStats.max_health)
}
inline ::int32_t GiantStats::_internal_max_health() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_health_;
}
inline void GiantStats::_internal_set_max_health(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_health_ = value;
}

// float size = 5;
inline void GiantStats::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = 0;
}
inline float GiantStats::size() const {
  // @@protoc_insertion_point(field_get:ingame.GiantStats.size)
  return _internal_size();
}
inline void GiantStats::set_size(float value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:ingame.GiantStats.size)
}
inline float GiantStats::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_;
}
inline void GiantStats::_internal_set_size(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PlayerRaceState

// string user_id = 1;
inline void PlayerRaceState::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& PlayerRaceState::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.PlayerRaceState.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PlayerRaceState::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.PlayerRaceState.user_id)
}
inline std::string* PlayerRaceState::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.PlayerRaceState.user_id)
  return _s;
}
inline const std::string& PlayerRaceState::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void PlayerRaceState::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* PlayerRaceState::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* PlayerRaceState::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.PlayerRaceState.user_id)
  return _impl_.user_id_.Release();
}
inline void PlayerRaceState::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.PlayerRaceState.user_id)
}

// .ingame.RaceType current_race = 2;
inline void PlayerRaceState::clear_current_race() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_race_ = 0;
}
inline ::ingame::RaceType PlayerRaceState::current_race() const {
  // @@protoc_insertion_point(field_get:ingame.PlayerRaceState.current_race)
  return _internal_current_race();
}
inline void PlayerRaceState::set_current_race(::ingame::RaceType value) {
  _internal_set_current_race(value);
  // @@protoc_insertion_point(field_set:ingame.PlayerRaceState.current_race)
}
inline ::ingame::RaceType PlayerRaceState::_internal_current_race() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ingame::RaceType>(_impl_.current_race_);
}
inline void PlayerRaceState::_internal_set_current_race(::ingame::RaceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_race_ = value;
}

// map<int32, int32> gene_inventory = 3;
inline int PlayerRaceState::_internal_gene_inventory_size() const {
  return _internal_gene_inventory().size();
}
inline int PlayerRaceState::gene_inventory_size() const {
  return _internal_gene_inventory_size();
}
inline void PlayerRaceState::clear_gene_inventory() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gene_inventory_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, ::int32_t>& PlayerRaceState::_internal_gene_inventory() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gene_inventory_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, ::int32_t>& PlayerRaceState::gene_inventory() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:ingame.PlayerRaceState.gene_inventory)
  return _internal_gene_inventory();
}
inline ::google::protobuf::Map<::int32_t, ::int32_t>* PlayerRaceState::_internal_mutable_gene_inventory() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.gene_inventory_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, ::int32_t>* PlayerRaceState::mutable_gene_inventory() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:ingame.PlayerRaceState.gene_inventory)
  return _internal_mutable_gene_inventory();
}

// repeated .ingame.GeneType equipped_genes = 4;
inline int PlayerRaceState::_internal_equipped_genes_size() const {
  return _internal_equipped_genes().size();
}
inline int PlayerRaceState::equipped_genes_size() const {
  return _internal_equipped_genes_size();
}
inline void PlayerRaceState::clear_equipped_genes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.equipped_genes_.Clear();
}
inline ::ingame::GeneType PlayerRaceState::equipped_genes(int index) const {
  // @@protoc_insertion_point(field_get:ingame.PlayerRaceState.equipped_genes)
  return static_cast<::ingame::GeneType>(_internal_equipped_genes().Get(index));
}
inline void PlayerRaceState::set_equipped_genes(int index, ::ingame::GeneType value) {
  _internal_mutable_equipped_genes()->Set(index, value);
  // @@protoc_insertion_point(field_set:ingame.PlayerRaceState.equipped_genes)
}
inline void PlayerRaceState::add_equipped_genes(::ingame::GeneType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_equipped_genes()->Add(value);
  // @@protoc_insertion_point(field_add:ingame.PlayerRaceState.equipped_genes)
}
inline const ::google::protobuf::RepeatedField<int>& PlayerRaceState::equipped_genes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ingame.PlayerRaceState.equipped_genes)
  return _internal_equipped_genes();
}
inline ::google::protobuf::RepeatedField<int>* PlayerRaceState::mutable_equipped_genes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ingame.PlayerRaceState.equipped_genes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_equipped_genes();
}
inline const ::google::protobuf::RepeatedField<int>& PlayerRaceState::_internal_equipped_genes()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.equipped_genes_;
}
inline ::google::protobuf::RepeatedField<int>* PlayerRaceState::_internal_mutable_equipped_genes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.equipped_genes_;
}

// bool can_transform = 5;
inline void PlayerRaceState::clear_can_transform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_transform_ = false;
}
inline bool PlayerRaceState::can_transform() const {
  // @@protoc_insertion_point(field_get:ingame.PlayerRaceState.can_transform)
  return _internal_can_transform();
}
inline void PlayerRaceState::set_can_transform(bool value) {
  _internal_set_can_transform(value);
  // @@protoc_insertion_point(field_set:ingame.PlayerRaceState.can_transform)
}
inline bool PlayerRaceState::_internal_can_transform() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_transform_;
}
inline void PlayerRaceState::_internal_set_can_transform(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_transform_ = value;
}

// .ingame.GiantStats giant_stats = 6;
inline bool PlayerRaceState::has_giant_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.giant_stats_ != nullptr);
  return value;
}
inline void PlayerRaceState::clear_giant_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.giant_stats_ != nullptr) _impl_.giant_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ingame::GiantStats& PlayerRaceState::_internal_giant_stats() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ingame::GiantStats* p = _impl_.giant_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::ingame::GiantStats&>(::ingame::_GiantStats_default_instance_);
}
inline const ::ingame::GiantStats& PlayerRaceState::giant_stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.PlayerRaceState.giant_stats)
  return _internal_giant_stats();
}
inline void PlayerRaceState::unsafe_arena_set_allocated_giant_stats(::ingame::GiantStats* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.giant_stats_);
  }
  _impl_.giant_stats_ = reinterpret_cast<::ingame::GiantStats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ingame.PlayerRaceState.giant_stats)
}
inline ::ingame::GiantStats* PlayerRaceState::release_giant_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::GiantStats* released = _impl_.giant_stats_;
  _impl_.giant_stats_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ingame::GiantStats* PlayerRaceState::unsafe_arena_release_giant_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.PlayerRaceState.giant_stats)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::GiantStats* temp = _impl_.giant_stats_;
  _impl_.giant_stats_ = nullptr;
  return temp;
}
inline ::ingame::GiantStats* PlayerRaceState::_internal_mutable_giant_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.giant_stats_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ingame::GiantStats>(GetArena());
    _impl_.giant_stats_ = reinterpret_cast<::ingame::GiantStats*>(p);
  }
  return _impl_.giant_stats_;
}
inline ::ingame::GiantStats* PlayerRaceState::mutable_giant_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ingame::GiantStats* _msg = _internal_mutable_giant_stats();
  // @@protoc_insertion_point(field_mutable:ingame.PlayerRaceState.giant_stats)
  return _msg;
}
inline void PlayerRaceState::set_allocated_giant_stats(::ingame::GiantStats* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.giant_stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.giant_stats_ = reinterpret_cast<::ingame::GiantStats*>(value);
  // @@protoc_insertion_point(field_set_allocated:ingame.PlayerRaceState.giant_stats)
}

// int32 current_hp = 7;
inline void PlayerRaceState::clear_current_hp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_hp_ = 0;
}
inline ::int32_t PlayerRaceState::current_hp() const {
  // @@protoc_insertion_point(field_get:ingame.PlayerRaceState.current_hp)
  return _internal_current_hp();
}
inline void PlayerRaceState::set_current_hp(::int32_t value) {
  _internal_set_current_hp(value);
  // @@protoc_insertion_point(field_set:ingame.PlayerRaceState.current_hp)
}
inline ::int32_t PlayerRaceState::_internal_current_hp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_hp_;
}
inline void PlayerRaceState::_internal_set_current_hp(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_hp_ = value;
}

// int32 max_hp = 8;
inline void PlayerRaceState::clear_max_hp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_hp_ = 0;
}
inline ::int32_t PlayerRaceState::max_hp() const {
  // @@protoc_insertion_point(field_get:ingame.PlayerRaceState.max_hp)
  return _internal_max_hp();
}
inline void PlayerRaceState::set_max_hp(::int32_t value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:ingame.PlayerRaceState.max_hp)
}
inline ::int32_t PlayerRaceState::_internal_max_hp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_hp_;
}
inline void PlayerRaceState::_internal_set_max_hp(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_hp_ = value;
}

// -------------------------------------------------------------------

// C2S_TransformGiant

// string user_id = 1;
inline void C2S_TransformGiant::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& C2S_TransformGiant::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.C2S_TransformGiant.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C2S_TransformGiant::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.C2S_TransformGiant.user_id)
}
inline std::string* C2S_TransformGiant::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.C2S_TransformGiant.user_id)
  return _s;
}
inline const std::string& C2S_TransformGiant::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void C2S_TransformGiant::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* C2S_TransformGiant::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* C2S_TransformGiant::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.C2S_TransformGiant.user_id)
  return _impl_.user_id_.Release();
}
inline void C2S_TransformGiant::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.C2S_TransformGiant.user_id)
}

// -------------------------------------------------------------------

// S2C_TransformResult

// string user_id = 1;
inline void S2C_TransformResult::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& S2C_TransformResult::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_TransformResult.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_TransformResult::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_TransformResult.user_id)
}
inline std::string* S2C_TransformResult::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_TransformResult.user_id)
  return _s;
}
inline const std::string& S2C_TransformResult::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void S2C_TransformResult::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* S2C_TransformResult::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* S2C_TransformResult::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_TransformResult.user_id)
  return _impl_.user_id_.Release();
}
inline void S2C_TransformResult::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_TransformResult.user_id)
}

// bool success = 2;
inline void S2C_TransformResult::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool S2C_TransformResult::success() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_TransformResult.success)
  return _internal_success();
}
inline void S2C_TransformResult::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_TransformResult.success)
}
inline bool S2C_TransformResult::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void S2C_TransformResult::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// .ingame.RaceType new_race = 3;
inline void S2C_TransformResult::clear_new_race() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_race_ = 0;
}
inline ::ingame::RaceType S2C_TransformResult::new_race() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_TransformResult.new_race)
  return _internal_new_race();
}
inline void S2C_TransformResult::set_new_race(::ingame::RaceType value) {
  _internal_set_new_race(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_TransformResult.new_race)
}
inline ::ingame::RaceType S2C_TransformResult::_internal_new_race() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ingame::RaceType>(_impl_.new_race_);
}
inline void S2C_TransformResult::_internal_set_new_race(::ingame::RaceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_race_ = value;
}

// .ingame.GiantStats new_stats = 4;
inline bool S2C_TransformResult::has_new_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_stats_ != nullptr);
  return value;
}
inline void S2C_TransformResult::clear_new_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.new_stats_ != nullptr) _impl_.new_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ingame::GiantStats& S2C_TransformResult::_internal_new_stats() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ingame::GiantStats* p = _impl_.new_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::ingame::GiantStats&>(::ingame::_GiantStats_default_instance_);
}
inline const ::ingame::GiantStats& S2C_TransformResult::new_stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_TransformResult.new_stats)
  return _internal_new_stats();
}
inline void S2C_TransformResult::unsafe_arena_set_allocated_new_stats(::ingame::GiantStats* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.new_stats_);
  }
  _impl_.new_stats_ = reinterpret_cast<::ingame::GiantStats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ingame.S2C_TransformResult.new_stats)
}
inline ::ingame::GiantStats* S2C_TransformResult::release_new_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::GiantStats* released = _impl_.new_stats_;
  _impl_.new_stats_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ingame::GiantStats* S2C_TransformResult::unsafe_arena_release_new_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_TransformResult.new_stats)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::GiantStats* temp = _impl_.new_stats_;
  _impl_.new_stats_ = nullptr;
  return temp;
}
inline ::ingame::GiantStats* S2C_TransformResult::_internal_mutable_new_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.new_stats_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ingame::GiantStats>(GetArena());
    _impl_.new_stats_ = reinterpret_cast<::ingame::GiantStats*>(p);
  }
  return _impl_.new_stats_;
}
inline ::ingame::GiantStats* S2C_TransformResult::mutable_new_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ingame::GiantStats* _msg = _internal_mutable_new_stats();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_TransformResult.new_stats)
  return _msg;
}
inline void S2C_TransformResult::set_allocated_new_stats(::ingame::GiantStats* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.new_stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.new_stats_ = reinterpret_cast<::ingame::GiantStats*>(value);
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_TransformResult.new_stats)
}

// string message = 5;
inline void S2C_TransformResult::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& S2C_TransformResult::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_TransformResult.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_TransformResult::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_TransformResult.message)
}
inline std::string* S2C_TransformResult::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_TransformResult.message)
  return _s;
}
inline const std::string& S2C_TransformResult::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void S2C_TransformResult::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* S2C_TransformResult::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* S2C_TransformResult::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_TransformResult.message)
  return _impl_.message_.Release();
}
inline void S2C_TransformResult::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_TransformResult.message)
}

// -------------------------------------------------------------------

// C2S_PlayerMove

// string user_id = 1;
inline void C2S_PlayerMove::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& C2S_PlayerMove::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.C2S_PlayerMove.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C2S_PlayerMove::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.C2S_PlayerMove.user_id)
}
inline std::string* C2S_PlayerMove::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.C2S_PlayerMove.user_id)
  return _s;
}
inline const std::string& C2S_PlayerMove::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void C2S_PlayerMove::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* C2S_PlayerMove::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* C2S_PlayerMove::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.C2S_PlayerMove.user_id)
  return _impl_.user_id_.Release();
}
inline void C2S_PlayerMove::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.C2S_PlayerMove.user_id)
}

// .ingame.Vector2 position = 2;
inline bool C2S_PlayerMove::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void C2S_PlayerMove::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ingame::Vector2& C2S_PlayerMove::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ingame::Vector2* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ingame::Vector2&>(::ingame::_Vector2_default_instance_);
}
inline const ::ingame::Vector2& C2S_PlayerMove::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.C2S_PlayerMove.position)
  return _internal_position();
}
inline void C2S_PlayerMove::unsafe_arena_set_allocated_position(::ingame::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::ingame::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ingame.C2S_PlayerMove.position)
}
inline ::ingame::Vector2* C2S_PlayerMove::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* released = _impl_.position_;
  _impl_.position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ingame::Vector2* C2S_PlayerMove::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.C2S_PlayerMove.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::ingame::Vector2* C2S_PlayerMove::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ingame::Vector2>(GetArena());
    _impl_.position_ = reinterpret_cast<::ingame::Vector2*>(p);
  }
  return _impl_.position_;
}
inline ::ingame::Vector2* C2S_PlayerMove::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ingame::Vector2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:ingame.C2S_PlayerMove.position)
  return _msg;
}
inline void C2S_PlayerMove::set_allocated_position(::ingame::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::ingame::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:ingame.C2S_PlayerMove.position)
}

// float dir = 3;
inline void C2S_PlayerMove::clear_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dir_ = 0;
}
inline float C2S_PlayerMove::dir() const {
  // @@protoc_insertion_point(field_get:ingame.C2S_PlayerMove.dir)
  return _internal_dir();
}
inline void C2S_PlayerMove::set_dir(float value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:ingame.C2S_PlayerMove.dir)
}
inline float C2S_PlayerMove::_internal_dir() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dir_;
}
inline void C2S_PlayerMove::_internal_set_dir(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dir_ = value;
}

// -------------------------------------------------------------------

// S2C_PlayerMoveNotification

// string user_id = 1;
inline void S2C_PlayerMoveNotification::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& S2C_PlayerMoveNotification::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerMoveNotification.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_PlayerMoveNotification::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_PlayerMoveNotification.user_id)
}
inline std::string* S2C_PlayerMoveNotification::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_PlayerMoveNotification.user_id)
  return _s;
}
inline const std::string& S2C_PlayerMoveNotification::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void S2C_PlayerMoveNotification::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* S2C_PlayerMoveNotification::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* S2C_PlayerMoveNotification::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_PlayerMoveNotification.user_id)
  return _impl_.user_id_.Release();
}
inline void S2C_PlayerMoveNotification::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_PlayerMoveNotification.user_id)
}

// .ingame.Vector2 position = 2;
inline bool S2C_PlayerMoveNotification::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void S2C_PlayerMoveNotification::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ingame::Vector2& S2C_PlayerMoveNotification::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ingame::Vector2* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ingame::Vector2&>(::ingame::_Vector2_default_instance_);
}
inline const ::ingame::Vector2& S2C_PlayerMoveNotification::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerMoveNotification.position)
  return _internal_position();
}
inline void S2C_PlayerMoveNotification::unsafe_arena_set_allocated_position(::ingame::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::ingame::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ingame.S2C_PlayerMoveNotification.position)
}
inline ::ingame::Vector2* S2C_PlayerMoveNotification::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* released = _impl_.position_;
  _impl_.position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ingame::Vector2* S2C_PlayerMoveNotification::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_PlayerMoveNotification.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::ingame::Vector2* S2C_PlayerMoveNotification::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ingame::Vector2>(GetArena());
    _impl_.position_ = reinterpret_cast<::ingame::Vector2*>(p);
  }
  return _impl_.position_;
}
inline ::ingame::Vector2* S2C_PlayerMoveNotification::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ingame::Vector2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_PlayerMoveNotification.position)
  return _msg;
}
inline void S2C_PlayerMoveNotification::set_allocated_position(::ingame::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::ingame::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_PlayerMoveNotification.position)
}

// float dir = 3;
inline void S2C_PlayerMoveNotification::clear_dir() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dir_ = 0;
}
inline float S2C_PlayerMoveNotification::dir() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerMoveNotification.dir)
  return _internal_dir();
}
inline void S2C_PlayerMoveNotification::set_dir(float value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_PlayerMoveNotification.dir)
}
inline float S2C_PlayerMoveNotification::_internal_dir() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dir_;
}
inline void S2C_PlayerMoveNotification::_internal_set_dir(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dir_ = value;
}

// -------------------------------------------------------------------

// C2S_PlayerAttack

// string user_id = 1;
inline void C2S_PlayerAttack::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& C2S_PlayerAttack::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.C2S_PlayerAttack.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C2S_PlayerAttack::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.C2S_PlayerAttack.user_id)
}
inline std::string* C2S_PlayerAttack::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.C2S_PlayerAttack.user_id)
  return _s;
}
inline const std::string& C2S_PlayerAttack::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void C2S_PlayerAttack::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* C2S_PlayerAttack::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* C2S_PlayerAttack::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.C2S_PlayerAttack.user_id)
  return _impl_.user_id_.Release();
}
inline void C2S_PlayerAttack::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.C2S_PlayerAttack.user_id)
}

// .ingame.AttackType attack_type = 2;
inline void C2S_PlayerAttack::clear_attack_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack_type_ = 0;
}
inline ::ingame::AttackType C2S_PlayerAttack::attack_type() const {
  // @@protoc_insertion_point(field_get:ingame.C2S_PlayerAttack.attack_type)
  return _internal_attack_type();
}
inline void C2S_PlayerAttack::set_attack_type(::ingame::AttackType value) {
  _internal_set_attack_type(value);
  // @@protoc_insertion_point(field_set:ingame.C2S_PlayerAttack.attack_type)
}
inline ::ingame::AttackType C2S_PlayerAttack::_internal_attack_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ingame::AttackType>(_impl_.attack_type_);
}
inline void C2S_PlayerAttack::_internal_set_attack_type(::ingame::AttackType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack_type_ = value;
}

// .ingame.Vector2 attack_direction = 3;
inline bool C2S_PlayerAttack::has_attack_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attack_direction_ != nullptr);
  return value;
}
inline void C2S_PlayerAttack::clear_attack_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.attack_direction_ != nullptr) _impl_.attack_direction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ingame::Vector2& C2S_PlayerAttack::_internal_attack_direction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ingame::Vector2* p = _impl_.attack_direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::ingame::Vector2&>(::ingame::_Vector2_default_instance_);
}
inline const ::ingame::Vector2& C2S_PlayerAttack::attack_direction() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.C2S_PlayerAttack.attack_direction)
  return _internal_attack_direction();
}
inline void C2S_PlayerAttack::unsafe_arena_set_allocated_attack_direction(::ingame::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.attack_direction_);
  }
  _impl_.attack_direction_ = reinterpret_cast<::ingame::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ingame.C2S_PlayerAttack.attack_direction)
}
inline ::ingame::Vector2* C2S_PlayerAttack::release_attack_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* released = _impl_.attack_direction_;
  _impl_.attack_direction_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ingame::Vector2* C2S_PlayerAttack::unsafe_arena_release_attack_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.C2S_PlayerAttack.attack_direction)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* temp = _impl_.attack_direction_;
  _impl_.attack_direction_ = nullptr;
  return temp;
}
inline ::ingame::Vector2* C2S_PlayerAttack::_internal_mutable_attack_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.attack_direction_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ingame::Vector2>(GetArena());
    _impl_.attack_direction_ = reinterpret_cast<::ingame::Vector2*>(p);
  }
  return _impl_.attack_direction_;
}
inline ::ingame::Vector2* C2S_PlayerAttack::mutable_attack_direction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ingame::Vector2* _msg = _internal_mutable_attack_direction();
  // @@protoc_insertion_point(field_mutable:ingame.C2S_PlayerAttack.attack_direction)
  return _msg;
}
inline void C2S_PlayerAttack::set_allocated_attack_direction(::ingame::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.attack_direction_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.attack_direction_ = reinterpret_cast<::ingame::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:ingame.C2S_PlayerAttack.attack_direction)
}

// .ingame.Vector2 attack_position = 4;
inline bool C2S_PlayerAttack::has_attack_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attack_position_ != nullptr);
  return value;
}
inline void C2S_PlayerAttack::clear_attack_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.attack_position_ != nullptr) _impl_.attack_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ingame::Vector2& C2S_PlayerAttack::_internal_attack_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ingame::Vector2* p = _impl_.attack_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ingame::Vector2&>(::ingame::_Vector2_default_instance_);
}
inline const ::ingame::Vector2& C2S_PlayerAttack::attack_position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.C2S_PlayerAttack.attack_position)
  return _internal_attack_position();
}
inline void C2S_PlayerAttack::unsafe_arena_set_allocated_attack_position(::ingame::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.attack_position_);
  }
  _impl_.attack_position_ = reinterpret_cast<::ingame::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ingame.C2S_PlayerAttack.attack_position)
}
inline ::ingame::Vector2* C2S_PlayerAttack::release_attack_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ingame::Vector2* released = _impl_.attack_position_;
  _impl_.attack_position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ingame::Vector2* C2S_PlayerAttack::unsafe_arena_release_attack_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.C2S_PlayerAttack.attack_position)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ingame::Vector2* temp = _impl_.attack_position_;
  _impl_.attack_position_ = nullptr;
  return temp;
}
inline ::ingame::Vector2* C2S_PlayerAttack::_internal_mutable_attack_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.attack_position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ingame::Vector2>(GetArena());
    _impl_.attack_position_ = reinterpret_cast<::ingame::Vector2*>(p);
  }
  return _impl_.attack_position_;
}
inline ::ingame::Vector2* C2S_PlayerAttack::mutable_attack_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::ingame::Vector2* _msg = _internal_mutable_attack_position();
  // @@protoc_insertion_point(field_mutable:ingame.C2S_PlayerAttack.attack_position)
  return _msg;
}
inline void C2S_PlayerAttack::set_allocated_attack_position(::ingame::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.attack_position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.attack_position_ = reinterpret_cast<::ingame::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:ingame.C2S_PlayerAttack.attack_position)
}

// -------------------------------------------------------------------

// S2C_PlayerAttackResult

// string user_id = 1;
inline void S2C_PlayerAttackResult::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& S2C_PlayerAttackResult::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerAttackResult.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_PlayerAttackResult::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_PlayerAttackResult.user_id)
}
inline std::string* S2C_PlayerAttackResult::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_PlayerAttackResult.user_id)
  return _s;
}
inline const std::string& S2C_PlayerAttackResult::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void S2C_PlayerAttackResult::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* S2C_PlayerAttackResult::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* S2C_PlayerAttackResult::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_PlayerAttackResult.user_id)
  return _impl_.user_id_.Release();
}
inline void S2C_PlayerAttackResult::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_PlayerAttackResult.user_id)
}

// .ingame.AttackType attack_type = 2;
inline void S2C_PlayerAttackResult::clear_attack_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack_type_ = 0;
}
inline ::ingame::AttackType S2C_PlayerAttackResult::attack_type() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerAttackResult.attack_type)
  return _internal_attack_type();
}
inline void S2C_PlayerAttackResult::set_attack_type(::ingame::AttackType value) {
  _internal_set_attack_type(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_PlayerAttackResult.attack_type)
}
inline ::ingame::AttackType S2C_PlayerAttackResult::_internal_attack_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ingame::AttackType>(_impl_.attack_type_);
}
inline void S2C_PlayerAttackResult::_internal_set_attack_type(::ingame::AttackType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack_type_ = value;
}

// .ingame.Vector2 attack_position = 3;
inline bool S2C_PlayerAttackResult::has_attack_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attack_position_ != nullptr);
  return value;
}
inline void S2C_PlayerAttackResult::clear_attack_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.attack_position_ != nullptr) _impl_.attack_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ingame::Vector2& S2C_PlayerAttackResult::_internal_attack_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ingame::Vector2* p = _impl_.attack_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ingame::Vector2&>(::ingame::_Vector2_default_instance_);
}
inline const ::ingame::Vector2& S2C_PlayerAttackResult::attack_position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerAttackResult.attack_position)
  return _internal_attack_position();
}
inline void S2C_PlayerAttackResult::unsafe_arena_set_allocated_attack_position(::ingame::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.attack_position_);
  }
  _impl_.attack_position_ = reinterpret_cast<::ingame::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ingame.S2C_PlayerAttackResult.attack_position)
}
inline ::ingame::Vector2* S2C_PlayerAttackResult::release_attack_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* released = _impl_.attack_position_;
  _impl_.attack_position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ingame::Vector2* S2C_PlayerAttackResult::unsafe_arena_release_attack_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_PlayerAttackResult.attack_position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* temp = _impl_.attack_position_;
  _impl_.attack_position_ = nullptr;
  return temp;
}
inline ::ingame::Vector2* S2C_PlayerAttackResult::_internal_mutable_attack_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.attack_position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ingame::Vector2>(GetArena());
    _impl_.attack_position_ = reinterpret_cast<::ingame::Vector2*>(p);
  }
  return _impl_.attack_position_;
}
inline ::ingame::Vector2* S2C_PlayerAttackResult::mutable_attack_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ingame::Vector2* _msg = _internal_mutable_attack_position();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_PlayerAttackResult.attack_position)
  return _msg;
}
inline void S2C_PlayerAttackResult::set_allocated_attack_position(::ingame::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.attack_position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.attack_position_ = reinterpret_cast<::ingame::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_PlayerAttackResult.attack_position)
}

// .ingame.Vector2 attack_direction = 4;
inline bool S2C_PlayerAttackResult::has_attack_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attack_direction_ != nullptr);
  return value;
}
inline void S2C_PlayerAttackResult::clear_attack_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.attack_direction_ != nullptr) _impl_.attack_direction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ingame::Vector2& S2C_PlayerAttackResult::_internal_attack_direction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ingame::Vector2* p = _impl_.attack_direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::ingame::Vector2&>(::ingame::_Vector2_default_instance_);
}
inline const ::ingame::Vector2& S2C_PlayerAttackResult::attack_direction() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerAttackResult.attack_direction)
  return _internal_attack_direction();
}
inline void S2C_PlayerAttackResult::unsafe_arena_set_allocated_attack_direction(::ingame::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.attack_direction_);
  }
  _impl_.attack_direction_ = reinterpret_cast<::ingame::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ingame.S2C_PlayerAttackResult.attack_direction)
}
inline ::ingame::Vector2* S2C_PlayerAttackResult::release_attack_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ingame::Vector2* released = _impl_.attack_direction_;
  _impl_.attack_direction_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ingame::Vector2* S2C_PlayerAttackResult::unsafe_arena_release_attack_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_PlayerAttackResult.attack_direction)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ingame::Vector2* temp = _impl_.attack_direction_;
  _impl_.attack_direction_ = nullptr;
  return temp;
}
inline ::ingame::Vector2* S2C_PlayerAttackResult::_internal_mutable_attack_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.attack_direction_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ingame::Vector2>(GetArena());
    _impl_.attack_direction_ = reinterpret_cast<::ingame::Vector2*>(p);
  }
  return _impl_.attack_direction_;
}
inline ::ingame::Vector2* S2C_PlayerAttackResult::mutable_attack_direction() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::ingame::Vector2* _msg = _internal_mutable_attack_direction();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_PlayerAttackResult.attack_direction)
  return _msg;
}
inline void S2C_PlayerAttackResult::set_allocated_attack_direction(::ingame::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.attack_direction_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.attack_direction_ = reinterpret_cast<::ingame::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_PlayerAttackResult.attack_direction)
}

// float attack_range = 5;
inline void S2C_PlayerAttackResult::clear_attack_range() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack_range_ = 0;
}
inline float S2C_PlayerAttackResult::attack_range() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerAttackResult.attack_range)
  return _internal_attack_range();
}
inline void S2C_PlayerAttackResult::set_attack_range(float value) {
  _internal_set_attack_range(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_PlayerAttackResult.attack_range)
}
inline float S2C_PlayerAttackResult::_internal_attack_range() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attack_range_;
}
inline void S2C_PlayerAttackResult::_internal_set_attack_range(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack_range_ = value;
}

// int32 total_damage = 6;
inline void S2C_PlayerAttackResult::clear_total_damage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_damage_ = 0;
}
inline ::int32_t S2C_PlayerAttackResult::total_damage() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerAttackResult.total_damage)
  return _internal_total_damage();
}
inline void S2C_PlayerAttackResult::set_total_damage(::int32_t value) {
  _internal_set_total_damage(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_PlayerAttackResult.total_damage)
}
inline ::int32_t S2C_PlayerAttackResult::_internal_total_damage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_damage_;
}
inline void S2C_PlayerAttackResult::_internal_set_total_damage(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_damage_ = value;
}

// repeated string hit_targets = 7;
inline int S2C_PlayerAttackResult::_internal_hit_targets_size() const {
  return _internal_hit_targets().size();
}
inline int S2C_PlayerAttackResult::hit_targets_size() const {
  return _internal_hit_targets_size();
}
inline void S2C_PlayerAttackResult::clear_hit_targets() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.hit_targets_.Clear();
}
inline std::string* S2C_PlayerAttackResult::add_hit_targets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_hit_targets()->Add();
  // @@protoc_insertion_point(field_add_mutable:ingame.S2C_PlayerAttackResult.hit_targets)
  return _s;
}
inline const std::string& S2C_PlayerAttackResult::hit_targets(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerAttackResult.hit_targets)
  return _internal_hit_targets().Get(index);
}
inline std::string* S2C_PlayerAttackResult::mutable_hit_targets(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ingame.S2C_PlayerAttackResult.hit_targets)
  return _internal_mutable_hit_targets()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void S2C_PlayerAttackResult::set_hit_targets(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_hit_targets()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:ingame.S2C_PlayerAttackResult.hit_targets)
}
template <typename Arg_, typename... Args_>
inline void S2C_PlayerAttackResult::add_hit_targets(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_hit_targets(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:ingame.S2C_PlayerAttackResult.hit_targets)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
S2C_PlayerAttackResult::hit_targets() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ingame.S2C_PlayerAttackResult.hit_targets)
  return _internal_hit_targets();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
S2C_PlayerAttackResult::mutable_hit_targets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ingame.S2C_PlayerAttackResult.hit_targets)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_hit_targets();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
S2C_PlayerAttackResult::_internal_hit_targets() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.hit_targets_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
S2C_PlayerAttackResult::_internal_mutable_hit_targets() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.hit_targets_;
}

// -------------------------------------------------------------------

// S2C_AttackHitNotification

// string attacker_id = 1;
inline void S2C_AttackHitNotification::clear_attacker_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attacker_id_.ClearToEmpty();
}
inline const std::string& S2C_AttackHitNotification::attacker_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_AttackHitNotification.attacker_id)
  return _internal_attacker_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_AttackHitNotification::set_attacker_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attacker_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_AttackHitNotification.attacker_id)
}
inline std::string* S2C_AttackHitNotification::mutable_attacker_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_attacker_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_AttackHitNotification.attacker_id)
  return _s;
}
inline const std::string& S2C_AttackHitNotification::_internal_attacker_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attacker_id_.Get();
}
inline void S2C_AttackHitNotification::_internal_set_attacker_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attacker_id_.Set(value, GetArena());
}
inline std::string* S2C_AttackHitNotification::_internal_mutable_attacker_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.attacker_id_.Mutable( GetArena());
}
inline std::string* S2C_AttackHitNotification::release_attacker_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_AttackHitNotification.attacker_id)
  return _impl_.attacker_id_.Release();
}
inline void S2C_AttackHitNotification::set_allocated_attacker_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attacker_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.attacker_id_.IsDefault()) {
    _impl_.attacker_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_AttackHitNotification.attacker_id)
}

// string target_id = 2;
inline void S2C_AttackHitNotification::clear_target_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_id_.ClearToEmpty();
}
inline const std::string& S2C_AttackHitNotification::target_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_AttackHitNotification.target_id)
  return _internal_target_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_AttackHitNotification::set_target_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_AttackHitNotification.target_id)
}
inline std::string* S2C_AttackHitNotification::mutable_target_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_target_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_AttackHitNotification.target_id)
  return _s;
}
inline const std::string& S2C_AttackHitNotification::_internal_target_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_id_.Get();
}
inline void S2C_AttackHitNotification::_internal_set_target_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_id_.Set(value, GetArena());
}
inline std::string* S2C_AttackHitNotification::_internal_mutable_target_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.target_id_.Mutable( GetArena());
}
inline std::string* S2C_AttackHitNotification::release_target_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_AttackHitNotification.target_id)
  return _impl_.target_id_.Release();
}
inline void S2C_AttackHitNotification::set_allocated_target_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.target_id_.IsDefault()) {
    _impl_.target_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_AttackHitNotification.target_id)
}

// int32 damage = 3;
inline void S2C_AttackHitNotification::clear_damage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.damage_ = 0;
}
inline ::int32_t S2C_AttackHitNotification::damage() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_AttackHitNotification.damage)
  return _internal_damage();
}
inline void S2C_AttackHitNotification::set_damage(::int32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_AttackHitNotification.damage)
}
inline ::int32_t S2C_AttackHitNotification::_internal_damage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.damage_;
}
inline void S2C_AttackHitNotification::_internal_set_damage(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.damage_ = value;
}

// .ingame.Vector2 hit_position = 4;
inline bool S2C_AttackHitNotification::has_hit_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hit_position_ != nullptr);
  return value;
}
inline void S2C_AttackHitNotification::clear_hit_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hit_position_ != nullptr) _impl_.hit_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ingame::Vector2& S2C_AttackHitNotification::_internal_hit_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ingame::Vector2* p = _impl_.hit_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ingame::Vector2&>(::ingame::_Vector2_default_instance_);
}
inline const ::ingame::Vector2& S2C_AttackHitNotification::hit_position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_AttackHitNotification.hit_position)
  return _internal_hit_position();
}
inline void S2C_AttackHitNotification::unsafe_arena_set_allocated_hit_position(::ingame::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hit_position_);
  }
  _impl_.hit_position_ = reinterpret_cast<::ingame::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ingame.S2C_AttackHitNotification.hit_position)
}
inline ::ingame::Vector2* S2C_AttackHitNotification::release_hit_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* released = _impl_.hit_position_;
  _impl_.hit_position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ingame::Vector2* S2C_AttackHitNotification::unsafe_arena_release_hit_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_AttackHitNotification.hit_position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* temp = _impl_.hit_position_;
  _impl_.hit_position_ = nullptr;
  return temp;
}
inline ::ingame::Vector2* S2C_AttackHitNotification::_internal_mutable_hit_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hit_position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ingame::Vector2>(GetArena());
    _impl_.hit_position_ = reinterpret_cast<::ingame::Vector2*>(p);
  }
  return _impl_.hit_position_;
}
inline ::ingame::Vector2* S2C_AttackHitNotification::mutable_hit_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ingame::Vector2* _msg = _internal_mutable_hit_position();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_AttackHitNotification.hit_position)
  return _msg;
}
inline void S2C_AttackHitNotification::set_allocated_hit_position(::ingame::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.hit_position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.hit_position_ = reinterpret_cast<::ingame::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_AttackHitNotification.hit_position)
}

// -------------------------------------------------------------------

// S2C_PlayerDeathNotification

// string player_id = 1;
inline void S2C_PlayerDeathNotification::clear_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.ClearToEmpty();
}
inline const std::string& S2C_PlayerDeathNotification::player_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerDeathNotification.player_id)
  return _internal_player_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_PlayerDeathNotification::set_player_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_PlayerDeathNotification.player_id)
}
inline std::string* S2C_PlayerDeathNotification::mutable_player_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_player_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_PlayerDeathNotification.player_id)
  return _s;
}
inline const std::string& S2C_PlayerDeathNotification::_internal_player_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_id_.Get();
}
inline void S2C_PlayerDeathNotification::_internal_set_player_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.Set(value, GetArena());
}
inline std::string* S2C_PlayerDeathNotification::_internal_mutable_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.player_id_.Mutable( GetArena());
}
inline std::string* S2C_PlayerDeathNotification::release_player_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_PlayerDeathNotification.player_id)
  return _impl_.player_id_.Release();
}
inline void S2C_PlayerDeathNotification::set_allocated_player_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.player_id_.IsDefault()) {
    _impl_.player_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_PlayerDeathNotification.player_id)
}

// string killer_id = 2;
inline void S2C_PlayerDeathNotification::clear_killer_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.killer_id_.ClearToEmpty();
}
inline const std::string& S2C_PlayerDeathNotification::killer_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerDeathNotification.killer_id)
  return _internal_killer_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_PlayerDeathNotification::set_killer_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.killer_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_PlayerDeathNotification.killer_id)
}
inline std::string* S2C_PlayerDeathNotification::mutable_killer_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_killer_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_PlayerDeathNotification.killer_id)
  return _s;
}
inline const std::string& S2C_PlayerDeathNotification::_internal_killer_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.killer_id_.Get();
}
inline void S2C_PlayerDeathNotification::_internal_set_killer_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.killer_id_.Set(value, GetArena());
}
inline std::string* S2C_PlayerDeathNotification::_internal_mutable_killer_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.killer_id_.Mutable( GetArena());
}
inline std::string* S2C_PlayerDeathNotification::release_killer_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_PlayerDeathNotification.killer_id)
  return _impl_.killer_id_.Release();
}
inline void S2C_PlayerDeathNotification::set_allocated_killer_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.killer_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.killer_id_.IsDefault()) {
    _impl_.killer_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_PlayerDeathNotification.killer_id)
}

// .ingame.DeathType death_notification = 3;
inline void S2C_PlayerDeathNotification::clear_death_notification() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.death_notification_ = 0;
}
inline ::ingame::DeathType S2C_PlayerDeathNotification::death_notification() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_PlayerDeathNotification.death_notification)
  return _internal_death_notification();
}
inline void S2C_PlayerDeathNotification::set_death_notification(::ingame::DeathType value) {
  _internal_set_death_notification(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_PlayerDeathNotification.death_notification)
}
inline ::ingame::DeathType S2C_PlayerDeathNotification::_internal_death_notification() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ingame::DeathType>(_impl_.death_notification_);
}
inline void S2C_PlayerDeathNotification::_internal_set_death_notification(::ingame::DeathType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.death_notification_ = value;
}

// -------------------------------------------------------------------

// S2C_GameState_PlayerState

// string user_id = 1;
inline void S2C_GameState_PlayerState::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& S2C_GameState_PlayerState::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.PlayerState.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_GameState_PlayerState::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_GameState.PlayerState.user_id)
}
inline std::string* S2C_GameState_PlayerState::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GameState.PlayerState.user_id)
  return _s;
}
inline const std::string& S2C_GameState_PlayerState::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void S2C_GameState_PlayerState::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* S2C_GameState_PlayerState::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* S2C_GameState_PlayerState::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_GameState.PlayerState.user_id)
  return _impl_.user_id_.Release();
}
inline void S2C_GameState_PlayerState::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_GameState.PlayerState.user_id)
}

// .ingame.Vector2 position = 2;
inline bool S2C_GameState_PlayerState::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void S2C_GameState_PlayerState::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ingame::Vector2& S2C_GameState_PlayerState::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ingame::Vector2* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ingame::Vector2&>(::ingame::_Vector2_default_instance_);
}
inline const ::ingame::Vector2& S2C_GameState_PlayerState::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.PlayerState.position)
  return _internal_position();
}
inline void S2C_GameState_PlayerState::unsafe_arena_set_allocated_position(::ingame::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::ingame::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ingame.S2C_GameState.PlayerState.position)
}
inline ::ingame::Vector2* S2C_GameState_PlayerState::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* released = _impl_.position_;
  _impl_.position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ingame::Vector2* S2C_GameState_PlayerState::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_GameState.PlayerState.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::ingame::Vector2* S2C_GameState_PlayerState::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ingame::Vector2>(GetArena());
    _impl_.position_ = reinterpret_cast<::ingame::Vector2*>(p);
  }
  return _impl_.position_;
}
inline ::ingame::Vector2* S2C_GameState_PlayerState::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ingame::Vector2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GameState.PlayerState.position)
  return _msg;
}
inline void S2C_GameState_PlayerState::set_allocated_position(::ingame::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::ingame::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_GameState.PlayerState.position)
}

// float direction = 3;
inline void S2C_GameState_PlayerState::clear_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_ = 0;
}
inline float S2C_GameState_PlayerState::direction() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.PlayerState.direction)
  return _internal_direction();
}
inline void S2C_GameState_PlayerState::set_direction(float value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameState.PlayerState.direction)
}
inline float S2C_GameState_PlayerState::_internal_direction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.direction_;
}
inline void S2C_GameState_PlayerState::_internal_set_direction(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_ = value;
}

// int32 current_hp = 4;
inline void S2C_GameState_PlayerState::clear_current_hp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_hp_ = 0;
}
inline ::int32_t S2C_GameState_PlayerState::current_hp() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.PlayerState.current_hp)
  return _internal_current_hp();
}
inline void S2C_GameState_PlayerState::set_current_hp(::int32_t value) {
  _internal_set_current_hp(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameState.PlayerState.current_hp)
}
inline ::int32_t S2C_GameState_PlayerState::_internal_current_hp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_hp_;
}
inline void S2C_GameState_PlayerState::_internal_set_current_hp(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_hp_ = value;
}

// int32 max_hp = 5;
inline void S2C_GameState_PlayerState::clear_max_hp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_hp_ = 0;
}
inline ::int32_t S2C_GameState_PlayerState::max_hp() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.PlayerState.max_hp)
  return _internal_max_hp();
}
inline void S2C_GameState_PlayerState::set_max_hp(::int32_t value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameState.PlayerState.max_hp)
}
inline ::int32_t S2C_GameState_PlayerState::_internal_max_hp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_hp_;
}
inline void S2C_GameState_PlayerState::_internal_set_max_hp(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_hp_ = value;
}

// .ingame.RaceType current_race = 6;
inline void S2C_GameState_PlayerState::clear_current_race() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_race_ = 0;
}
inline ::ingame::RaceType S2C_GameState_PlayerState::current_race() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.PlayerState.current_race)
  return _internal_current_race();
}
inline void S2C_GameState_PlayerState::set_current_race(::ingame::RaceType value) {
  _internal_set_current_race(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameState.PlayerState.current_race)
}
inline ::ingame::RaceType S2C_GameState_PlayerState::_internal_current_race() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ingame::RaceType>(_impl_.current_race_);
}
inline void S2C_GameState_PlayerState::_internal_set_current_race(::ingame::RaceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_race_ = value;
}

// -------------------------------------------------------------------

// S2C_GameState_MonsterState

// string monster_id = 1;
inline void S2C_GameState_MonsterState::clear_monster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.monster_id_.ClearToEmpty();
}
inline const std::string& S2C_GameState_MonsterState::monster_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.MonsterState.monster_id)
  return _internal_monster_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_GameState_MonsterState::set_monster_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.monster_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_GameState.MonsterState.monster_id)
}
inline std::string* S2C_GameState_MonsterState::mutable_monster_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_monster_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GameState.MonsterState.monster_id)
  return _s;
}
inline const std::string& S2C_GameState_MonsterState::_internal_monster_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.monster_id_.Get();
}
inline void S2C_GameState_MonsterState::_internal_set_monster_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.monster_id_.Set(value, GetArena());
}
inline std::string* S2C_GameState_MonsterState::_internal_mutable_monster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.monster_id_.Mutable( GetArena());
}
inline std::string* S2C_GameState_MonsterState::release_monster_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_GameState.MonsterState.monster_id)
  return _impl_.monster_id_.Release();
}
inline void S2C_GameState_MonsterState::set_allocated_monster_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.monster_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.monster_id_.IsDefault()) {
    _impl_.monster_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_GameState.MonsterState.monster_id)
}

// .ingame.Vector2 position = 2;
inline bool S2C_GameState_MonsterState::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void S2C_GameState_MonsterState::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ingame::Vector2& S2C_GameState_MonsterState::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ingame::Vector2* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ingame::Vector2&>(::ingame::_Vector2_default_instance_);
}
inline const ::ingame::Vector2& S2C_GameState_MonsterState::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.MonsterState.position)
  return _internal_position();
}
inline void S2C_GameState_MonsterState::unsafe_arena_set_allocated_position(::ingame::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::ingame::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ingame.S2C_GameState.MonsterState.position)
}
inline ::ingame::Vector2* S2C_GameState_MonsterState::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* released = _impl_.position_;
  _impl_.position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ingame::Vector2* S2C_GameState_MonsterState::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_GameState.MonsterState.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::ingame::Vector2* S2C_GameState_MonsterState::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ingame::Vector2>(GetArena());
    _impl_.position_ = reinterpret_cast<::ingame::Vector2*>(p);
  }
  return _impl_.position_;
}
inline ::ingame::Vector2* S2C_GameState_MonsterState::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ingame::Vector2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GameState.MonsterState.position)
  return _msg;
}
inline void S2C_GameState_MonsterState::set_allocated_position(::ingame::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::ingame::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_GameState.MonsterState.position)
}

// int32 current_hp = 3;
inline void S2C_GameState_MonsterState::clear_current_hp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_hp_ = 0;
}
inline ::int32_t S2C_GameState_MonsterState::current_hp() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.MonsterState.current_hp)
  return _internal_current_hp();
}
inline void S2C_GameState_MonsterState::set_current_hp(::int32_t value) {
  _internal_set_current_hp(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameState.MonsterState.current_hp)
}
inline ::int32_t S2C_GameState_MonsterState::_internal_current_hp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_hp_;
}
inline void S2C_GameState_MonsterState::_internal_set_current_hp(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_hp_ = value;
}

// int32 max_hp = 4;
inline void S2C_GameState_MonsterState::clear_max_hp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_hp_ = 0;
}
inline ::int32_t S2C_GameState_MonsterState::max_hp() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.MonsterState.max_hp)
  return _internal_max_hp();
}
inline void S2C_GameState_MonsterState::set_max_hp(::int32_t value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameState.MonsterState.max_hp)
}
inline ::int32_t S2C_GameState_MonsterState::_internal_max_hp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.max_hp_;
}
inline void S2C_GameState_MonsterState::_internal_set_max_hp(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.max_hp_ = value;
}

// .ingame.MonsterType monster_type = 5;
inline void S2C_GameState_MonsterState::clear_monster_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.monster_type_ = 0;
}
inline ::ingame::MonsterType S2C_GameState_MonsterState::monster_type() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.MonsterState.monster_type)
  return _internal_monster_type();
}
inline void S2C_GameState_MonsterState::set_monster_type(::ingame::MonsterType value) {
  _internal_set_monster_type(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameState.MonsterState.monster_type)
}
inline ::ingame::MonsterType S2C_GameState_MonsterState::_internal_monster_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ingame::MonsterType>(_impl_.monster_type_);
}
inline void S2C_GameState_MonsterState::_internal_set_monster_type(::ingame::MonsterType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.monster_type_ = value;
}

// -------------------------------------------------------------------

// S2C_GameState

// repeated .ingame.S2C_GameState.PlayerState players = 1;
inline int S2C_GameState::_internal_players_size() const {
  return _internal_players().size();
}
inline int S2C_GameState::players_size() const {
  return _internal_players_size();
}
inline void S2C_GameState::clear_players() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.players_.Clear();
}
inline ::ingame::S2C_GameState_PlayerState* S2C_GameState::mutable_players(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GameState.players)
  return _internal_mutable_players()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_PlayerState>* S2C_GameState::mutable_players()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ingame.S2C_GameState.players)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_players();
}
inline const ::ingame::S2C_GameState_PlayerState& S2C_GameState::players(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.players)
  return _internal_players().Get(index);
}
inline ::ingame::S2C_GameState_PlayerState* S2C_GameState::add_players() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ingame::S2C_GameState_PlayerState* _add = _internal_mutable_players()->Add();
  // @@protoc_insertion_point(field_add:ingame.S2C_GameState.players)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_PlayerState>& S2C_GameState::players() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ingame.S2C_GameState.players)
  return _internal_players();
}
inline const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_PlayerState>&
S2C_GameState::_internal_players() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.players_;
}
inline ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_PlayerState>*
S2C_GameState::_internal_mutable_players() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.players_;
}

// repeated .ingame.S2C_GameState.MonsterState monsters = 2;
inline int S2C_GameState::_internal_monsters_size() const {
  return _internal_monsters().size();
}
inline int S2C_GameState::monsters_size() const {
  return _internal_monsters_size();
}
inline void S2C_GameState::clear_monsters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.monsters_.Clear();
}
inline ::ingame::S2C_GameState_MonsterState* S2C_GameState::mutable_monsters(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GameState.monsters)
  return _internal_mutable_monsters()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_MonsterState>* S2C_GameState::mutable_monsters()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ingame.S2C_GameState.monsters)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_monsters();
}
inline const ::ingame::S2C_GameState_MonsterState& S2C_GameState::monsters(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.monsters)
  return _internal_monsters().Get(index);
}
inline ::ingame::S2C_GameState_MonsterState* S2C_GameState::add_monsters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ingame::S2C_GameState_MonsterState* _add = _internal_mutable_monsters()->Add();
  // @@protoc_insertion_point(field_add:ingame.S2C_GameState.monsters)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_MonsterState>& S2C_GameState::monsters() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ingame.S2C_GameState.monsters)
  return _internal_monsters();
}
inline const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_MonsterState>&
S2C_GameState::_internal_monsters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.monsters_;
}
inline ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameState_MonsterState>*
S2C_GameState::_internal_mutable_monsters() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.monsters_;
}

// int32 phase_time_remaining = 3;
inline void S2C_GameState::clear_phase_time_remaining() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phase_time_remaining_ = 0;
}
inline ::int32_t S2C_GameState::phase_time_remaining() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.phase_time_remaining)
  return _internal_phase_time_remaining();
}
inline void S2C_GameState::set_phase_time_remaining(::int32_t value) {
  _internal_set_phase_time_remaining(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameState.phase_time_remaining)
}
inline ::int32_t S2C_GameState::_internal_phase_time_remaining() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.phase_time_remaining_;
}
inline void S2C_GameState::_internal_set_phase_time_remaining(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.phase_time_remaining_ = value;
}

// int32 current_phase = 4;
inline void S2C_GameState::clear_current_phase() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_phase_ = 0;
}
inline ::int32_t S2C_GameState::current_phase() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameState.current_phase)
  return _internal_current_phase();
}
inline void S2C_GameState::set_current_phase(::int32_t value) {
  _internal_set_current_phase(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameState.current_phase)
}
inline ::int32_t S2C_GameState::_internal_current_phase() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.current_phase_;
}
inline void S2C_GameState::_internal_set_current_phase(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.current_phase_ = value;
}

// -------------------------------------------------------------------

// C2S_GeneAcquired

// string user_id = 1;
inline void C2S_GeneAcquired::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& C2S_GeneAcquired::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.C2S_GeneAcquired.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C2S_GeneAcquired::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.C2S_GeneAcquired.user_id)
}
inline std::string* C2S_GeneAcquired::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.C2S_GeneAcquired.user_id)
  return _s;
}
inline const std::string& C2S_GeneAcquired::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void C2S_GeneAcquired::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* C2S_GeneAcquired::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* C2S_GeneAcquired::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.C2S_GeneAcquired.user_id)
  return _impl_.user_id_.Release();
}
inline void C2S_GeneAcquired::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.C2S_GeneAcquired.user_id)
}

// .ingame.GeneType gene_type = 2;
inline void C2S_GeneAcquired::clear_gene_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gene_type_ = 0;
}
inline ::ingame::GeneType C2S_GeneAcquired::gene_type() const {
  // @@protoc_insertion_point(field_get:ingame.C2S_GeneAcquired.gene_type)
  return _internal_gene_type();
}
inline void C2S_GeneAcquired::set_gene_type(::ingame::GeneType value) {
  _internal_set_gene_type(value);
  // @@protoc_insertion_point(field_set:ingame.C2S_GeneAcquired.gene_type)
}
inline ::ingame::GeneType C2S_GeneAcquired::_internal_gene_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ingame::GeneType>(_impl_.gene_type_);
}
inline void C2S_GeneAcquired::_internal_set_gene_type(::ingame::GeneType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gene_type_ = value;
}

// string source = 3;
inline void C2S_GeneAcquired::clear_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_.ClearToEmpty();
}
inline const std::string& C2S_GeneAcquired::source() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.C2S_GeneAcquired.source)
  return _internal_source();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C2S_GeneAcquired::set_source(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.C2S_GeneAcquired.source)
}
inline std::string* C2S_GeneAcquired::mutable_source() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:ingame.C2S_GeneAcquired.source)
  return _s;
}
inline const std::string& C2S_GeneAcquired::_internal_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.source_.Get();
}
inline void C2S_GeneAcquired::_internal_set_source(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_.Set(value, GetArena());
}
inline std::string* C2S_GeneAcquired::_internal_mutable_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.source_.Mutable( GetArena());
}
inline std::string* C2S_GeneAcquired::release_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.C2S_GeneAcquired.source)
  return _impl_.source_.Release();
}
inline void C2S_GeneAcquired::set_allocated_source(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.source_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.C2S_GeneAcquired.source)
}

// -------------------------------------------------------------------

// S2C_GeneAcquiredResult

// string user_id = 1;
inline void S2C_GeneAcquiredResult::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& S2C_GeneAcquiredResult::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GeneAcquiredResult.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_GeneAcquiredResult::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_GeneAcquiredResult.user_id)
}
inline std::string* S2C_GeneAcquiredResult::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GeneAcquiredResult.user_id)
  return _s;
}
inline const std::string& S2C_GeneAcquiredResult::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void S2C_GeneAcquiredResult::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* S2C_GeneAcquiredResult::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* S2C_GeneAcquiredResult::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_GeneAcquiredResult.user_id)
  return _impl_.user_id_.Release();
}
inline void S2C_GeneAcquiredResult::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_GeneAcquiredResult.user_id)
}

// .ingame.GeneType gene_type = 2;
inline void S2C_GeneAcquiredResult::clear_gene_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gene_type_ = 0;
}
inline ::ingame::GeneType S2C_GeneAcquiredResult::gene_type() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GeneAcquiredResult.gene_type)
  return _internal_gene_type();
}
inline void S2C_GeneAcquiredResult::set_gene_type(::ingame::GeneType value) {
  _internal_set_gene_type(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GeneAcquiredResult.gene_type)
}
inline ::ingame::GeneType S2C_GeneAcquiredResult::_internal_gene_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ingame::GeneType>(_impl_.gene_type_);
}
inline void S2C_GeneAcquiredResult::_internal_set_gene_type(::ingame::GeneType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gene_type_ = value;
}

// int32 new_count = 3;
inline void S2C_GeneAcquiredResult::clear_new_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_count_ = 0;
}
inline ::int32_t S2C_GeneAcquiredResult::new_count() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GeneAcquiredResult.new_count)
  return _internal_new_count();
}
inline void S2C_GeneAcquiredResult::set_new_count(::int32_t value) {
  _internal_set_new_count(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GeneAcquiredResult.new_count)
}
inline ::int32_t S2C_GeneAcquiredResult::_internal_new_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.new_count_;
}
inline void S2C_GeneAcquiredResult::_internal_set_new_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.new_count_ = value;
}

// int32 total_gene_count = 4;
inline void S2C_GeneAcquiredResult::clear_total_gene_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_gene_count_ = 0;
}
inline ::int32_t S2C_GeneAcquiredResult::total_gene_count() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GeneAcquiredResult.total_gene_count)
  return _internal_total_gene_count();
}
inline void S2C_GeneAcquiredResult::set_total_gene_count(::int32_t value) {
  _internal_set_total_gene_count(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GeneAcquiredResult.total_gene_count)
}
inline ::int32_t S2C_GeneAcquiredResult::_internal_total_gene_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_gene_count_;
}
inline void S2C_GeneAcquiredResult::_internal_set_total_gene_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_gene_count_ = value;
}

// bool can_transform = 5;
inline void S2C_GeneAcquiredResult::clear_can_transform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_transform_ = false;
}
inline bool S2C_GeneAcquiredResult::can_transform() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GeneAcquiredResult.can_transform)
  return _internal_can_transform();
}
inline void S2C_GeneAcquiredResult::set_can_transform(bool value) {
  _internal_set_can_transform(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GeneAcquiredResult.can_transform)
}
inline bool S2C_GeneAcquiredResult::_internal_can_transform() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_transform_;
}
inline void S2C_GeneAcquiredResult::_internal_set_can_transform(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_transform_ = value;
}

// string message = 6;
inline void S2C_GeneAcquiredResult::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& S2C_GeneAcquiredResult::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GeneAcquiredResult.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_GeneAcquiredResult::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_GeneAcquiredResult.message)
}
inline std::string* S2C_GeneAcquiredResult::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GeneAcquiredResult.message)
  return _s;
}
inline const std::string& S2C_GeneAcquiredResult::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void S2C_GeneAcquiredResult::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* S2C_GeneAcquiredResult::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* S2C_GeneAcquiredResult::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_GeneAcquiredResult.message)
  return _impl_.message_.Release();
}
inline void S2C_GeneAcquiredResult::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_GeneAcquiredResult.message)
}

// -------------------------------------------------------------------

// C2S_EquipGene

// string user_id = 1;
inline void C2S_EquipGene::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& C2S_EquipGene::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.C2S_EquipGene.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C2S_EquipGene::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.C2S_EquipGene.user_id)
}
inline std::string* C2S_EquipGene::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.C2S_EquipGene.user_id)
  return _s;
}
inline const std::string& C2S_EquipGene::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void C2S_EquipGene::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* C2S_EquipGene::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* C2S_EquipGene::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.C2S_EquipGene.user_id)
  return _impl_.user_id_.Release();
}
inline void C2S_EquipGene::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.C2S_EquipGene.user_id)
}

// .ingame.GeneType gene_type = 2;
inline void C2S_EquipGene::clear_gene_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gene_type_ = 0;
}
inline ::ingame::GeneType C2S_EquipGene::gene_type() const {
  // @@protoc_insertion_point(field_get:ingame.C2S_EquipGene.gene_type)
  return _internal_gene_type();
}
inline void C2S_EquipGene::set_gene_type(::ingame::GeneType value) {
  _internal_set_gene_type(value);
  // @@protoc_insertion_point(field_set:ingame.C2S_EquipGene.gene_type)
}
inline ::ingame::GeneType C2S_EquipGene::_internal_gene_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ingame::GeneType>(_impl_.gene_type_);
}
inline void C2S_EquipGene::_internal_set_gene_type(::ingame::GeneType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gene_type_ = value;
}

// int32 slot_index = 3;
inline void C2S_EquipGene::clear_slot_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slot_index_ = 0;
}
inline ::int32_t C2S_EquipGene::slot_index() const {
  // @@protoc_insertion_point(field_get:ingame.C2S_EquipGene.slot_index)
  return _internal_slot_index();
}
inline void C2S_EquipGene::set_slot_index(::int32_t value) {
  _internal_set_slot_index(value);
  // @@protoc_insertion_point(field_set:ingame.C2S_EquipGene.slot_index)
}
inline ::int32_t C2S_EquipGene::_internal_slot_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.slot_index_;
}
inline void C2S_EquipGene::_internal_set_slot_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slot_index_ = value;
}

// bool equip = 4;
inline void C2S_EquipGene::clear_equip() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.equip_ = false;
}
inline bool C2S_EquipGene::equip() const {
  // @@protoc_insertion_point(field_get:ingame.C2S_EquipGene.equip)
  return _internal_equip();
}
inline void C2S_EquipGene::set_equip(bool value) {
  _internal_set_equip(value);
  // @@protoc_insertion_point(field_set:ingame.C2S_EquipGene.equip)
}
inline bool C2S_EquipGene::_internal_equip() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.equip_;
}
inline void C2S_EquipGene::_internal_set_equip(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.equip_ = value;
}

// -------------------------------------------------------------------

// S2C_GeneEquipResult

// string user_id = 1;
inline void S2C_GeneEquipResult::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& S2C_GeneEquipResult::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GeneEquipResult.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_GeneEquipResult::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_GeneEquipResult.user_id)
}
inline std::string* S2C_GeneEquipResult::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GeneEquipResult.user_id)
  return _s;
}
inline const std::string& S2C_GeneEquipResult::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void S2C_GeneEquipResult::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* S2C_GeneEquipResult::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* S2C_GeneEquipResult::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_GeneEquipResult.user_id)
  return _impl_.user_id_.Release();
}
inline void S2C_GeneEquipResult::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_GeneEquipResult.user_id)
}

// bool success = 2;
inline void S2C_GeneEquipResult::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool S2C_GeneEquipResult::success() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GeneEquipResult.success)
  return _internal_success();
}
inline void S2C_GeneEquipResult::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GeneEquipResult.success)
}
inline bool S2C_GeneEquipResult::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void S2C_GeneEquipResult::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// repeated .ingame.GeneType equipped_genes = 3;
inline int S2C_GeneEquipResult::_internal_equipped_genes_size() const {
  return _internal_equipped_genes().size();
}
inline int S2C_GeneEquipResult::equipped_genes_size() const {
  return _internal_equipped_genes_size();
}
inline void S2C_GeneEquipResult::clear_equipped_genes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.equipped_genes_.Clear();
}
inline ::ingame::GeneType S2C_GeneEquipResult::equipped_genes(int index) const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GeneEquipResult.equipped_genes)
  return static_cast<::ingame::GeneType>(_internal_equipped_genes().Get(index));
}
inline void S2C_GeneEquipResult::set_equipped_genes(int index, ::ingame::GeneType value) {
  _internal_mutable_equipped_genes()->Set(index, value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GeneEquipResult.equipped_genes)
}
inline void S2C_GeneEquipResult::add_equipped_genes(::ingame::GeneType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_equipped_genes()->Add(value);
  // @@protoc_insertion_point(field_add:ingame.S2C_GeneEquipResult.equipped_genes)
}
inline const ::google::protobuf::RepeatedField<int>& S2C_GeneEquipResult::equipped_genes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ingame.S2C_GeneEquipResult.equipped_genes)
  return _internal_equipped_genes();
}
inline ::google::protobuf::RepeatedField<int>* S2C_GeneEquipResult::mutable_equipped_genes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ingame.S2C_GeneEquipResult.equipped_genes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_equipped_genes();
}
inline const ::google::protobuf::RepeatedField<int>& S2C_GeneEquipResult::_internal_equipped_genes()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.equipped_genes_;
}
inline ::google::protobuf::RepeatedField<int>* S2C_GeneEquipResult::_internal_mutable_equipped_genes() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.equipped_genes_;
}

// bool can_transform = 4;
inline void S2C_GeneEquipResult::clear_can_transform() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_transform_ = false;
}
inline bool S2C_GeneEquipResult::can_transform() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GeneEquipResult.can_transform)
  return _internal_can_transform();
}
inline void S2C_GeneEquipResult::set_can_transform(bool value) {
  _internal_set_can_transform(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GeneEquipResult.can_transform)
}
inline bool S2C_GeneEquipResult::_internal_can_transform() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.can_transform_;
}
inline void S2C_GeneEquipResult::_internal_set_can_transform(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.can_transform_ = value;
}

// string message = 5;
inline void S2C_GeneEquipResult::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& S2C_GeneEquipResult::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GeneEquipResult.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_GeneEquipResult::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_GeneEquipResult.message)
}
inline std::string* S2C_GeneEquipResult::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GeneEquipResult.message)
  return _s;
}
inline const std::string& S2C_GeneEquipResult::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void S2C_GeneEquipResult::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* S2C_GeneEquipResult::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* S2C_GeneEquipResult::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_GeneEquipResult.message)
  return _impl_.message_.Release();
}
inline void S2C_GeneEquipResult::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_GeneEquipResult.message)
}

// -------------------------------------------------------------------

// S2C_CrownNotification

// string user_id = 1;
inline void S2C_CrownNotification::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& S2C_CrownNotification::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_CrownNotification.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_CrownNotification::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_CrownNotification.user_id)
}
inline std::string* S2C_CrownNotification::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_CrownNotification.user_id)
  return _s;
}
inline const std::string& S2C_CrownNotification::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void S2C_CrownNotification::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* S2C_CrownNotification::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* S2C_CrownNotification::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_CrownNotification.user_id)
  return _impl_.user_id_.Release();
}
inline void S2C_CrownNotification::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_CrownNotification.user_id)
}

// string giant_id = 2;
inline void S2C_CrownNotification::clear_giant_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giant_id_.ClearToEmpty();
}
inline const std::string& S2C_CrownNotification::giant_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_CrownNotification.giant_id)
  return _internal_giant_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_CrownNotification::set_giant_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giant_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_CrownNotification.giant_id)
}
inline std::string* S2C_CrownNotification::mutable_giant_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_giant_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_CrownNotification.giant_id)
  return _s;
}
inline const std::string& S2C_CrownNotification::_internal_giant_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.giant_id_.Get();
}
inline void S2C_CrownNotification::_internal_set_giant_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giant_id_.Set(value, GetArena());
}
inline std::string* S2C_CrownNotification::_internal_mutable_giant_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.giant_id_.Mutable( GetArena());
}
inline std::string* S2C_CrownNotification::release_giant_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_CrownNotification.giant_id)
  return _impl_.giant_id_.Release();
}
inline void S2C_CrownNotification::set_allocated_giant_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giant_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.giant_id_.IsDefault()) {
    _impl_.giant_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_CrownNotification.giant_id)
}

// int32 countdown = 3;
inline void S2C_CrownNotification::clear_countdown() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.countdown_ = 0;
}
inline ::int32_t S2C_CrownNotification::countdown() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_CrownNotification.countdown)
  return _internal_countdown();
}
inline void S2C_CrownNotification::set_countdown(::int32_t value) {
  _internal_set_countdown(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_CrownNotification.countdown)
}
inline ::int32_t S2C_CrownNotification::_internal_countdown() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.countdown_;
}
inline void S2C_CrownNotification::_internal_set_countdown(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.countdown_ = value;
}

// -------------------------------------------------------------------

// S2C_CrownDropNotification

// .ingame.Vector2 position = 1;
inline bool S2C_CrownDropNotification::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void S2C_CrownDropNotification::clear_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ingame::Vector2& S2C_CrownDropNotification::_internal_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ingame::Vector2* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ingame::Vector2&>(::ingame::_Vector2_default_instance_);
}
inline const ::ingame::Vector2& S2C_CrownDropNotification::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_CrownDropNotification.position)
  return _internal_position();
}
inline void S2C_CrownDropNotification::unsafe_arena_set_allocated_position(::ingame::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::ingame::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ingame.S2C_CrownDropNotification.position)
}
inline ::ingame::Vector2* S2C_CrownDropNotification::release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* released = _impl_.position_;
  _impl_.position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ingame::Vector2* S2C_CrownDropNotification::unsafe_arena_release_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_CrownDropNotification.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::ingame::Vector2* S2C_CrownDropNotification::_internal_mutable_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ingame::Vector2>(GetArena());
    _impl_.position_ = reinterpret_cast<::ingame::Vector2*>(p);
  }
  return _impl_.position_;
}
inline ::ingame::Vector2* S2C_CrownDropNotification::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ingame::Vector2* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_CrownDropNotification.position)
  return _msg;
}
inline void S2C_CrownDropNotification::set_allocated_position(::ingame::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::ingame::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_CrownDropNotification.position)
}

// string giant_id = 2;
inline void S2C_CrownDropNotification::clear_giant_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giant_id_.ClearToEmpty();
}
inline const std::string& S2C_CrownDropNotification::giant_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_CrownDropNotification.giant_id)
  return _internal_giant_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_CrownDropNotification::set_giant_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giant_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_CrownDropNotification.giant_id)
}
inline std::string* S2C_CrownDropNotification::mutable_giant_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_giant_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_CrownDropNotification.giant_id)
  return _s;
}
inline const std::string& S2C_CrownDropNotification::_internal_giant_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.giant_id_.Get();
}
inline void S2C_CrownDropNotification::_internal_set_giant_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giant_id_.Set(value, GetArena());
}
inline std::string* S2C_CrownDropNotification::_internal_mutable_giant_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.giant_id_.Mutable( GetArena());
}
inline std::string* S2C_CrownDropNotification::release_giant_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_CrownDropNotification.giant_id)
  return _impl_.giant_id_.Release();
}
inline void S2C_CrownDropNotification::set_allocated_giant_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giant_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.giant_id_.IsDefault()) {
    _impl_.giant_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_CrownDropNotification.giant_id)
}

// int32 countdown = 3;
inline void S2C_CrownDropNotification::clear_countdown() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.countdown_ = 0;
}
inline ::int32_t S2C_CrownDropNotification::countdown() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_CrownDropNotification.countdown)
  return _internal_countdown();
}
inline void S2C_CrownDropNotification::set_countdown(::int32_t value) {
  _internal_set_countdown(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_CrownDropNotification.countdown)
}
inline ::int32_t S2C_CrownDropNotification::_internal_countdown() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.countdown_;
}
inline void S2C_CrownDropNotification::_internal_set_countdown(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.countdown_ = value;
}

// -------------------------------------------------------------------

// C2S_PickupCrown

// string user_id = 1;
inline void C2S_PickupCrown::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& C2S_PickupCrown::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.C2S_PickupCrown.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C2S_PickupCrown::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.C2S_PickupCrown.user_id)
}
inline std::string* C2S_PickupCrown::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.C2S_PickupCrown.user_id)
  return _s;
}
inline const std::string& C2S_PickupCrown::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void C2S_PickupCrown::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* C2S_PickupCrown::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* C2S_PickupCrown::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.C2S_PickupCrown.user_id)
  return _impl_.user_id_.Release();
}
inline void C2S_PickupCrown::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.C2S_PickupCrown.user_id)
}

// .ingame.Vector2 crown_position = 2;
inline bool C2S_PickupCrown::has_crown_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.crown_position_ != nullptr);
  return value;
}
inline void C2S_PickupCrown::clear_crown_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.crown_position_ != nullptr) _impl_.crown_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ingame::Vector2& C2S_PickupCrown::_internal_crown_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ingame::Vector2* p = _impl_.crown_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ingame::Vector2&>(::ingame::_Vector2_default_instance_);
}
inline const ::ingame::Vector2& C2S_PickupCrown::crown_position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.C2S_PickupCrown.crown_position)
  return _internal_crown_position();
}
inline void C2S_PickupCrown::unsafe_arena_set_allocated_crown_position(::ingame::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.crown_position_);
  }
  _impl_.crown_position_ = reinterpret_cast<::ingame::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ingame.C2S_PickupCrown.crown_position)
}
inline ::ingame::Vector2* C2S_PickupCrown::release_crown_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* released = _impl_.crown_position_;
  _impl_.crown_position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ingame::Vector2* C2S_PickupCrown::unsafe_arena_release_crown_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.C2S_PickupCrown.crown_position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* temp = _impl_.crown_position_;
  _impl_.crown_position_ = nullptr;
  return temp;
}
inline ::ingame::Vector2* C2S_PickupCrown::_internal_mutable_crown_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.crown_position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ingame::Vector2>(GetArena());
    _impl_.crown_position_ = reinterpret_cast<::ingame::Vector2*>(p);
  }
  return _impl_.crown_position_;
}
inline ::ingame::Vector2* C2S_PickupCrown::mutable_crown_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ingame::Vector2* _msg = _internal_mutable_crown_position();
  // @@protoc_insertion_point(field_mutable:ingame.C2S_PickupCrown.crown_position)
  return _msg;
}
inline void C2S_PickupCrown::set_allocated_crown_position(::ingame::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.crown_position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.crown_position_ = reinterpret_cast<::ingame::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:ingame.C2S_PickupCrown.crown_position)
}

// -------------------------------------------------------------------

// S2C_CrownPickupResult

// string user_id = 1;
inline void S2C_CrownPickupResult::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& S2C_CrownPickupResult::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_CrownPickupResult.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_CrownPickupResult::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_CrownPickupResult.user_id)
}
inline std::string* S2C_CrownPickupResult::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_CrownPickupResult.user_id)
  return _s;
}
inline const std::string& S2C_CrownPickupResult::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void S2C_CrownPickupResult::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* S2C_CrownPickupResult::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* S2C_CrownPickupResult::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_CrownPickupResult.user_id)
  return _impl_.user_id_.Release();
}
inline void S2C_CrownPickupResult::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_CrownPickupResult.user_id)
}

// bool success = 2;
inline void S2C_CrownPickupResult::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool S2C_CrownPickupResult::success() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_CrownPickupResult.success)
  return _internal_success();
}
inline void S2C_CrownPickupResult::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_CrownPickupResult.success)
}
inline bool S2C_CrownPickupResult::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void S2C_CrownPickupResult::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// int32 countdown = 3;
inline void S2C_CrownPickupResult::clear_countdown() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.countdown_ = 0;
}
inline ::int32_t S2C_CrownPickupResult::countdown() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_CrownPickupResult.countdown)
  return _internal_countdown();
}
inline void S2C_CrownPickupResult::set_countdown(::int32_t value) {
  _internal_set_countdown(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_CrownPickupResult.countdown)
}
inline ::int32_t S2C_CrownPickupResult::_internal_countdown() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.countdown_;
}
inline void S2C_CrownPickupResult::_internal_set_countdown(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.countdown_ = value;
}

// string message = 4;
inline void S2C_CrownPickupResult::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& S2C_CrownPickupResult::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_CrownPickupResult.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_CrownPickupResult::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_CrownPickupResult.message)
}
inline std::string* S2C_CrownPickupResult::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_CrownPickupResult.message)
  return _s;
}
inline const std::string& S2C_CrownPickupResult::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void S2C_CrownPickupResult::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* S2C_CrownPickupResult::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* S2C_CrownPickupResult::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_CrownPickupResult.message)
  return _impl_.message_.Release();
}
inline void S2C_CrownPickupResult::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_CrownPickupResult.message)
}

// -------------------------------------------------------------------

// S2C_DamageContribution

// string user_id = 1;
inline void S2C_DamageContribution::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& S2C_DamageContribution::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_DamageContribution.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_DamageContribution::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_DamageContribution.user_id)
}
inline std::string* S2C_DamageContribution::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_DamageContribution.user_id)
  return _s;
}
inline const std::string& S2C_DamageContribution::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void S2C_DamageContribution::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* S2C_DamageContribution::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* S2C_DamageContribution::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_DamageContribution.user_id)
  return _impl_.user_id_.Release();
}
inline void S2C_DamageContribution::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_DamageContribution.user_id)
}

// string giant_id = 2;
inline void S2C_DamageContribution::clear_giant_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giant_id_.ClearToEmpty();
}
inline const std::string& S2C_DamageContribution::giant_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_DamageContribution.giant_id)
  return _internal_giant_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_DamageContribution::set_giant_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giant_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_DamageContribution.giant_id)
}
inline std::string* S2C_DamageContribution::mutable_giant_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_giant_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_DamageContribution.giant_id)
  return _s;
}
inline const std::string& S2C_DamageContribution::_internal_giant_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.giant_id_.Get();
}
inline void S2C_DamageContribution::_internal_set_giant_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giant_id_.Set(value, GetArena());
}
inline std::string* S2C_DamageContribution::_internal_mutable_giant_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.giant_id_.Mutable( GetArena());
}
inline std::string* S2C_DamageContribution::release_giant_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_DamageContribution.giant_id)
  return _impl_.giant_id_.Release();
}
inline void S2C_DamageContribution::set_allocated_giant_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giant_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.giant_id_.IsDefault()) {
    _impl_.giant_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_DamageContribution.giant_id)
}

// int32 damage_dealt = 3;
inline void S2C_DamageContribution::clear_damage_dealt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.damage_dealt_ = 0;
}
inline ::int32_t S2C_DamageContribution::damage_dealt() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_DamageContribution.damage_dealt)
  return _internal_damage_dealt();
}
inline void S2C_DamageContribution::set_damage_dealt(::int32_t value) {
  _internal_set_damage_dealt(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_DamageContribution.damage_dealt)
}
inline ::int32_t S2C_DamageContribution::_internal_damage_dealt() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.damage_dealt_;
}
inline void S2C_DamageContribution::_internal_set_damage_dealt(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.damage_dealt_ = value;
}

// int32 total_contribution = 4;
inline void S2C_DamageContribution::clear_total_contribution() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_contribution_ = 0;
}
inline ::int32_t S2C_DamageContribution::total_contribution() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_DamageContribution.total_contribution)
  return _internal_total_contribution();
}
inline void S2C_DamageContribution::set_total_contribution(::int32_t value) {
  _internal_set_total_contribution(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_DamageContribution.total_contribution)
}
inline ::int32_t S2C_DamageContribution::_internal_total_contribution() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_contribution_;
}
inline void S2C_DamageContribution::_internal_set_total_contribution(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_contribution_ = value;
}

// -------------------------------------------------------------------

// S2C_GiantKillContributionResult_Contribution

// string user_id = 1;
inline void S2C_GiantKillContributionResult_Contribution::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& S2C_GiantKillContributionResult_Contribution::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GiantKillContributionResult.Contribution.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_GiantKillContributionResult_Contribution::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_GiantKillContributionResult.Contribution.user_id)
}
inline std::string* S2C_GiantKillContributionResult_Contribution::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GiantKillContributionResult.Contribution.user_id)
  return _s;
}
inline const std::string& S2C_GiantKillContributionResult_Contribution::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void S2C_GiantKillContributionResult_Contribution::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* S2C_GiantKillContributionResult_Contribution::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* S2C_GiantKillContributionResult_Contribution::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_GiantKillContributionResult.Contribution.user_id)
  return _impl_.user_id_.Release();
}
inline void S2C_GiantKillContributionResult_Contribution::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_GiantKillContributionResult.Contribution.user_id)
}

// int32 damage = 2;
inline void S2C_GiantKillContributionResult_Contribution::clear_damage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.damage_ = 0;
}
inline ::int32_t S2C_GiantKillContributionResult_Contribution::damage() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GiantKillContributionResult.Contribution.damage)
  return _internal_damage();
}
inline void S2C_GiantKillContributionResult_Contribution::set_damage(::int32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GiantKillContributionResult.Contribution.damage)
}
inline ::int32_t S2C_GiantKillContributionResult_Contribution::_internal_damage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.damage_;
}
inline void S2C_GiantKillContributionResult_Contribution::_internal_set_damage(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.damage_ = value;
}

// float percentage = 3;
inline void S2C_GiantKillContributionResult_Contribution::clear_percentage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percentage_ = 0;
}
inline float S2C_GiantKillContributionResult_Contribution::percentage() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GiantKillContributionResult.Contribution.percentage)
  return _internal_percentage();
}
inline void S2C_GiantKillContributionResult_Contribution::set_percentage(float value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GiantKillContributionResult.Contribution.percentage)
}
inline float S2C_GiantKillContributionResult_Contribution::_internal_percentage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.percentage_;
}
inline void S2C_GiantKillContributionResult_Contribution::_internal_set_percentage(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.percentage_ = value;
}

// -------------------------------------------------------------------

// S2C_GiantKillContributionResult

// string giant_id = 1;
inline void S2C_GiantKillContributionResult::clear_giant_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giant_id_.ClearToEmpty();
}
inline const std::string& S2C_GiantKillContributionResult::giant_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GiantKillContributionResult.giant_id)
  return _internal_giant_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_GiantKillContributionResult::set_giant_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giant_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_GiantKillContributionResult.giant_id)
}
inline std::string* S2C_GiantKillContributionResult::mutable_giant_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_giant_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GiantKillContributionResult.giant_id)
  return _s;
}
inline const std::string& S2C_GiantKillContributionResult::_internal_giant_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.giant_id_.Get();
}
inline void S2C_GiantKillContributionResult::_internal_set_giant_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giant_id_.Set(value, GetArena());
}
inline std::string* S2C_GiantKillContributionResult::_internal_mutable_giant_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.giant_id_.Mutable( GetArena());
}
inline std::string* S2C_GiantKillContributionResult::release_giant_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_GiantKillContributionResult.giant_id)
  return _impl_.giant_id_.Release();
}
inline void S2C_GiantKillContributionResult::set_allocated_giant_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.giant_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.giant_id_.IsDefault()) {
    _impl_.giant_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_GiantKillContributionResult.giant_id)
}

// repeated .ingame.S2C_GiantKillContributionResult.Contribution contributions = 2;
inline int S2C_GiantKillContributionResult::_internal_contributions_size() const {
  return _internal_contributions().size();
}
inline int S2C_GiantKillContributionResult::contributions_size() const {
  return _internal_contributions_size();
}
inline void S2C_GiantKillContributionResult::clear_contributions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.contributions_.Clear();
}
inline ::ingame::S2C_GiantKillContributionResult_Contribution* S2C_GiantKillContributionResult::mutable_contributions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GiantKillContributionResult.contributions)
  return _internal_mutable_contributions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ingame::S2C_GiantKillContributionResult_Contribution>* S2C_GiantKillContributionResult::mutable_contributions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ingame.S2C_GiantKillContributionResult.contributions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_contributions();
}
inline const ::ingame::S2C_GiantKillContributionResult_Contribution& S2C_GiantKillContributionResult::contributions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GiantKillContributionResult.contributions)
  return _internal_contributions().Get(index);
}
inline ::ingame::S2C_GiantKillContributionResult_Contribution* S2C_GiantKillContributionResult::add_contributions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ingame::S2C_GiantKillContributionResult_Contribution* _add = _internal_mutable_contributions()->Add();
  // @@protoc_insertion_point(field_add:ingame.S2C_GiantKillContributionResult.contributions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GiantKillContributionResult_Contribution>& S2C_GiantKillContributionResult::contributions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ingame.S2C_GiantKillContributionResult.contributions)
  return _internal_contributions();
}
inline const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GiantKillContributionResult_Contribution>&
S2C_GiantKillContributionResult::_internal_contributions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.contributions_;
}
inline ::google::protobuf::RepeatedPtrField<::ingame::S2C_GiantKillContributionResult_Contribution>*
S2C_GiantKillContributionResult::_internal_mutable_contributions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.contributions_;
}

// string crown_winner = 3;
inline void S2C_GiantKillContributionResult::clear_crown_winner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crown_winner_.ClearToEmpty();
}
inline const std::string& S2C_GiantKillContributionResult::crown_winner() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GiantKillContributionResult.crown_winner)
  return _internal_crown_winner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_GiantKillContributionResult::set_crown_winner(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crown_winner_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_GiantKillContributionResult.crown_winner)
}
inline std::string* S2C_GiantKillContributionResult::mutable_crown_winner() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_crown_winner();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GiantKillContributionResult.crown_winner)
  return _s;
}
inline const std::string& S2C_GiantKillContributionResult::_internal_crown_winner() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.crown_winner_.Get();
}
inline void S2C_GiantKillContributionResult::_internal_set_crown_winner(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crown_winner_.Set(value, GetArena());
}
inline std::string* S2C_GiantKillContributionResult::_internal_mutable_crown_winner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.crown_winner_.Mutable( GetArena());
}
inline std::string* S2C_GiantKillContributionResult::release_crown_winner() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_GiantKillContributionResult.crown_winner)
  return _impl_.crown_winner_.Release();
}
inline void S2C_GiantKillContributionResult::set_allocated_crown_winner(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.crown_winner_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.crown_winner_.IsDefault()) {
    _impl_.crown_winner_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_GiantKillContributionResult.crown_winner)
}

// -------------------------------------------------------------------

// C2S_HiddenSkill

// string user_id = 1;
inline void C2S_HiddenSkill::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& C2S_HiddenSkill::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.C2S_HiddenSkill.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void C2S_HiddenSkill::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.C2S_HiddenSkill.user_id)
}
inline std::string* C2S_HiddenSkill::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.C2S_HiddenSkill.user_id)
  return _s;
}
inline const std::string& C2S_HiddenSkill::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void C2S_HiddenSkill::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* C2S_HiddenSkill::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* C2S_HiddenSkill::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.C2S_HiddenSkill.user_id)
  return _impl_.user_id_.Release();
}
inline void C2S_HiddenSkill::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.C2S_HiddenSkill.user_id)
}

// .ingame.GeneType skill_type = 2;
inline void C2S_HiddenSkill::clear_skill_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skill_type_ = 0;
}
inline ::ingame::GeneType C2S_HiddenSkill::skill_type() const {
  // @@protoc_insertion_point(field_get:ingame.C2S_HiddenSkill.skill_type)
  return _internal_skill_type();
}
inline void C2S_HiddenSkill::set_skill_type(::ingame::GeneType value) {
  _internal_set_skill_type(value);
  // @@protoc_insertion_point(field_set:ingame.C2S_HiddenSkill.skill_type)
}
inline ::ingame::GeneType C2S_HiddenSkill::_internal_skill_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ingame::GeneType>(_impl_.skill_type_);
}
inline void C2S_HiddenSkill::_internal_set_skill_type(::ingame::GeneType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skill_type_ = value;
}

// .ingame.Vector2 cursor_position = 3;
inline bool C2S_HiddenSkill::has_cursor_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cursor_position_ != nullptr);
  return value;
}
inline void C2S_HiddenSkill::clear_cursor_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cursor_position_ != nullptr) _impl_.cursor_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ingame::Vector2& C2S_HiddenSkill::_internal_cursor_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::ingame::Vector2* p = _impl_.cursor_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ingame::Vector2&>(::ingame::_Vector2_default_instance_);
}
inline const ::ingame::Vector2& C2S_HiddenSkill::cursor_position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.C2S_HiddenSkill.cursor_position)
  return _internal_cursor_position();
}
inline void C2S_HiddenSkill::unsafe_arena_set_allocated_cursor_position(::ingame::Vector2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cursor_position_);
  }
  _impl_.cursor_position_ = reinterpret_cast<::ingame::Vector2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ingame.C2S_HiddenSkill.cursor_position)
}
inline ::ingame::Vector2* C2S_HiddenSkill::release_cursor_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* released = _impl_.cursor_position_;
  _impl_.cursor_position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::ingame::Vector2* C2S_HiddenSkill::unsafe_arena_release_cursor_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.C2S_HiddenSkill.cursor_position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ingame::Vector2* temp = _impl_.cursor_position_;
  _impl_.cursor_position_ = nullptr;
  return temp;
}
inline ::ingame::Vector2* C2S_HiddenSkill::_internal_mutable_cursor_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cursor_position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::ingame::Vector2>(GetArena());
    _impl_.cursor_position_ = reinterpret_cast<::ingame::Vector2*>(p);
  }
  return _impl_.cursor_position_;
}
inline ::ingame::Vector2* C2S_HiddenSkill::mutable_cursor_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::ingame::Vector2* _msg = _internal_mutable_cursor_position();
  // @@protoc_insertion_point(field_mutable:ingame.C2S_HiddenSkill.cursor_position)
  return _msg;
}
inline void C2S_HiddenSkill::set_allocated_cursor_position(::ingame::Vector2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.cursor_position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.cursor_position_ = reinterpret_cast<::ingame::Vector2*>(value);
  // @@protoc_insertion_point(field_set_allocated:ingame.C2S_HiddenSkill.cursor_position)
}

// -------------------------------------------------------------------

// S2C_HiddenSkillResult

// string user_id = 1;
inline void S2C_HiddenSkillResult::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& S2C_HiddenSkillResult::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_HiddenSkillResult.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_HiddenSkillResult::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_HiddenSkillResult.user_id)
}
inline std::string* S2C_HiddenSkillResult::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_HiddenSkillResult.user_id)
  return _s;
}
inline const std::string& S2C_HiddenSkillResult::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void S2C_HiddenSkillResult::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* S2C_HiddenSkillResult::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* S2C_HiddenSkillResult::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_HiddenSkillResult.user_id)
  return _impl_.user_id_.Release();
}
inline void S2C_HiddenSkillResult::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_HiddenSkillResult.user_id)
}

// .ingame.GeneType skill_type = 2;
inline void S2C_HiddenSkillResult::clear_skill_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skill_type_ = 0;
}
inline ::ingame::GeneType S2C_HiddenSkillResult::skill_type() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_HiddenSkillResult.skill_type)
  return _internal_skill_type();
}
inline void S2C_HiddenSkillResult::set_skill_type(::ingame::GeneType value) {
  _internal_set_skill_type(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_HiddenSkillResult.skill_type)
}
inline ::ingame::GeneType S2C_HiddenSkillResult::_internal_skill_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ingame::GeneType>(_impl_.skill_type_);
}
inline void S2C_HiddenSkillResult::_internal_set_skill_type(::ingame::GeneType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.skill_type_ = value;
}

// bool success = 3;
inline void S2C_HiddenSkillResult::clear_success() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = false;
}
inline bool S2C_HiddenSkillResult::success() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_HiddenSkillResult.success)
  return _internal_success();
}
inline void S2C_HiddenSkillResult::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_HiddenSkillResult.success)
}
inline bool S2C_HiddenSkillResult::_internal_success() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.success_;
}
inline void S2C_HiddenSkillResult::_internal_set_success(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.success_ = value;
}

// string message = 4;
inline void S2C_HiddenSkillResult::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& S2C_HiddenSkillResult::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_HiddenSkillResult.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_HiddenSkillResult::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_HiddenSkillResult.message)
}
inline std::string* S2C_HiddenSkillResult::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_HiddenSkillResult.message)
  return _s;
}
inline const std::string& S2C_HiddenSkillResult::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void S2C_HiddenSkillResult::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* S2C_HiddenSkillResult::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* S2C_HiddenSkillResult::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_HiddenSkillResult.message)
  return _impl_.message_.Release();
}
inline void S2C_HiddenSkillResult::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_HiddenSkillResult.message)
}

// -------------------------------------------------------------------

// S2C_GameEnd_PlayerResult

// string user_id = 1;
inline void S2C_GameEnd_PlayerResult::clear_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& S2C_GameEnd_PlayerResult::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameEnd.PlayerResult.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_GameEnd_PlayerResult::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_GameEnd.PlayerResult.user_id)
}
inline std::string* S2C_GameEnd_PlayerResult::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GameEnd.PlayerResult.user_id)
  return _s;
}
inline const std::string& S2C_GameEnd_PlayerResult::_internal_user_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_id_.Get();
}
inline void S2C_GameEnd_PlayerResult::_internal_set_user_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* S2C_GameEnd_PlayerResult::_internal_mutable_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* S2C_GameEnd_PlayerResult::release_user_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_GameEnd.PlayerResult.user_id)
  return _impl_.user_id_.Release();
}
inline void S2C_GameEnd_PlayerResult::set_allocated_user_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_GameEnd.PlayerResult.user_id)
}

// string nickname = 2;
inline void S2C_GameEnd_PlayerResult::clear_nickname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& S2C_GameEnd_PlayerResult::nickname() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameEnd.PlayerResult.nickname)
  return _internal_nickname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void S2C_GameEnd_PlayerResult::set_nickname(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ingame.S2C_GameEnd.PlayerResult.nickname)
}
inline std::string* S2C_GameEnd_PlayerResult::mutable_nickname() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GameEnd.PlayerResult.nickname)
  return _s;
}
inline const std::string& S2C_GameEnd_PlayerResult::_internal_nickname() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nickname_.Get();
}
inline void S2C_GameEnd_PlayerResult::_internal_set_nickname(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_.Set(value, GetArena());
}
inline std::string* S2C_GameEnd_PlayerResult::_internal_mutable_nickname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.nickname_.Mutable( GetArena());
}
inline std::string* S2C_GameEnd_PlayerResult::release_nickname() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ingame.S2C_GameEnd.PlayerResult.nickname)
  return _impl_.nickname_.Release();
}
inline void S2C_GameEnd_PlayerResult::set_allocated_nickname(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nickname_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ingame.S2C_GameEnd.PlayerResult.nickname)
}

// int32 final_score = 3;
inline void S2C_GameEnd_PlayerResult::clear_final_score() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.final_score_ = 0;
}
inline ::int32_t S2C_GameEnd_PlayerResult::final_score() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameEnd.PlayerResult.final_score)
  return _internal_final_score();
}
inline void S2C_GameEnd_PlayerResult::set_final_score(::int32_t value) {
  _internal_set_final_score(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameEnd.PlayerResult.final_score)
}
inline ::int32_t S2C_GameEnd_PlayerResult::_internal_final_score() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.final_score_;
}
inline void S2C_GameEnd_PlayerResult::_internal_set_final_score(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.final_score_ = value;
}

// int32 gold_earned = 4;
inline void S2C_GameEnd_PlayerResult::clear_gold_earned() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gold_earned_ = 0;
}
inline ::int32_t S2C_GameEnd_PlayerResult::gold_earned() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameEnd.PlayerResult.gold_earned)
  return _internal_gold_earned();
}
inline void S2C_GameEnd_PlayerResult::set_gold_earned(::int32_t value) {
  _internal_set_gold_earned(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameEnd.PlayerResult.gold_earned)
}
inline ::int32_t S2C_GameEnd_PlayerResult::_internal_gold_earned() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gold_earned_;
}
inline void S2C_GameEnd_PlayerResult::_internal_set_gold_earned(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gold_earned_ = value;
}

// .ingame.RaceType final_race = 5;
inline void S2C_GameEnd_PlayerResult::clear_final_race() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.final_race_ = 0;
}
inline ::ingame::RaceType S2C_GameEnd_PlayerResult::final_race() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameEnd.PlayerResult.final_race)
  return _internal_final_race();
}
inline void S2C_GameEnd_PlayerResult::set_final_race(::ingame::RaceType value) {
  _internal_set_final_race(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameEnd.PlayerResult.final_race)
}
inline ::ingame::RaceType S2C_GameEnd_PlayerResult::_internal_final_race() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::ingame::RaceType>(_impl_.final_race_);
}
inline void S2C_GameEnd_PlayerResult::_internal_set_final_race(::ingame::RaceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.final_race_ = value;
}

// int32 player_killed = 6;
inline void S2C_GameEnd_PlayerResult::clear_player_killed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_killed_ = 0;
}
inline ::int32_t S2C_GameEnd_PlayerResult::player_killed() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameEnd.PlayerResult.player_killed)
  return _internal_player_killed();
}
inline void S2C_GameEnd_PlayerResult::set_player_killed(::int32_t value) {
  _internal_set_player_killed(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameEnd.PlayerResult.player_killed)
}
inline ::int32_t S2C_GameEnd_PlayerResult::_internal_player_killed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_killed_;
}
inline void S2C_GameEnd_PlayerResult::_internal_set_player_killed(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_killed_ = value;
}

// int32 monster_killed = 7;
inline void S2C_GameEnd_PlayerResult::clear_monster_killed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.monster_killed_ = 0;
}
inline ::int32_t S2C_GameEnd_PlayerResult::monster_killed() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameEnd.PlayerResult.monster_killed)
  return _internal_monster_killed();
}
inline void S2C_GameEnd_PlayerResult::set_monster_killed(::int32_t value) {
  _internal_set_monster_killed(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameEnd.PlayerResult.monster_killed)
}
inline ::int32_t S2C_GameEnd_PlayerResult::_internal_monster_killed() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.monster_killed_;
}
inline void S2C_GameEnd_PlayerResult::_internal_set_monster_killed(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.monster_killed_ = value;
}

// int32 survival_time = 8;
inline void S2C_GameEnd_PlayerResult::clear_survival_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.survival_time_ = 0;
}
inline ::int32_t S2C_GameEnd_PlayerResult::survival_time() const {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameEnd.PlayerResult.survival_time)
  return _internal_survival_time();
}
inline void S2C_GameEnd_PlayerResult::set_survival_time(::int32_t value) {
  _internal_set_survival_time(value);
  // @@protoc_insertion_point(field_set:ingame.S2C_GameEnd.PlayerResult.survival_time)
}
inline ::int32_t S2C_GameEnd_PlayerResult::_internal_survival_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.survival_time_;
}
inline void S2C_GameEnd_PlayerResult::_internal_set_survival_time(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.survival_time_ = value;
}

// -------------------------------------------------------------------

// S2C_GameEnd

// repeated .ingame.S2C_GameEnd.PlayerResult results = 1;
inline int S2C_GameEnd::_internal_results_size() const {
  return _internal_results().size();
}
inline int S2C_GameEnd::results_size() const {
  return _internal_results_size();
}
inline void S2C_GameEnd::clear_results() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.results_.Clear();
}
inline ::ingame::S2C_GameEnd_PlayerResult* S2C_GameEnd::mutable_results(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:ingame.S2C_GameEnd.results)
  return _internal_mutable_results()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameEnd_PlayerResult>* S2C_GameEnd::mutable_results()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:ingame.S2C_GameEnd.results)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_results();
}
inline const ::ingame::S2C_GameEnd_PlayerResult& S2C_GameEnd::results(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ingame.S2C_GameEnd.results)
  return _internal_results().Get(index);
}
inline ::ingame::S2C_GameEnd_PlayerResult* S2C_GameEnd::add_results() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::ingame::S2C_GameEnd_PlayerResult* _add = _internal_mutable_results()->Add();
  // @@protoc_insertion_point(field_add:ingame.S2C_GameEnd.results)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameEnd_PlayerResult>& S2C_GameEnd::results() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:ingame.S2C_GameEnd.results)
  return _internal_results();
}
inline const ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameEnd_PlayerResult>&
S2C_GameEnd::_internal_results() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.results_;
}
inline ::google::protobuf::RepeatedPtrField<::ingame::S2C_GameEnd_PlayerResult>*
S2C_GameEnd::_internal_mutable_results() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.results_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ingame


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ingame::RaceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ingame::RaceType>() {
  return ::ingame::RaceType_descriptor();
}
template <>
struct is_proto_enum<::ingame::GeneType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ingame::GeneType>() {
  return ::ingame::GeneType_descriptor();
}
template <>
struct is_proto_enum<::ingame::AttackType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ingame::AttackType>() {
  return ::ingame::AttackType_descriptor();
}
template <>
struct is_proto_enum<::ingame::MonsterType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ingame::MonsterType>() {
  return ::ingame::MonsterType_descriptor();
}
template <>
struct is_proto_enum<::ingame::DeathType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ingame::DeathType>() {
  return ::ingame::DeathType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // ingame_2eproto_2epb_2eh
