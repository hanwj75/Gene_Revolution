// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: center.proto
// Protobuf C++ Version: 5.29.5

#ifndef center_2eproto_2epb_2eh
#define center_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "auth.pb.h"
#include "lobby.pb.h"
#include "ingame.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_center_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_center_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_center_2eproto;
namespace center {
class GamePacket;
struct GamePacketDefaultTypeInternal;
extern GamePacketDefaultTypeInternal _GamePacket_default_instance_;
}  // namespace center
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace center {

// ===================================================================


// -------------------------------------------------------------------

class GamePacket final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:center.GamePacket) */ {
 public:
  inline GamePacket() : GamePacket(nullptr) {}
  ~GamePacket() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GamePacket* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GamePacket));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GamePacket(
      ::google::protobuf::internal::ConstantInitialized);

  inline GamePacket(const GamePacket& from) : GamePacket(nullptr, from) {}
  inline GamePacket(GamePacket&& from) noexcept
      : GamePacket(nullptr, std::move(from)) {}
  inline GamePacket& operator=(const GamePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline GamePacket& operator=(GamePacket&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GamePacket& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kC2SLogin = 1,
    kS2CLogin = 2,
    kC2SEnterLobby = 3,
    kS2CEnterLobby = 4,
    kC2SGameStart = 5,
    kS2CGameStart = 6,
    kC2SPlayerMove = 7,
    kS2CPlayerMove = 8,
    kC2SPlayerAttack = 9,
    kS2CPlayerAttack = 10,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const GamePacket* internal_default_instance() {
    return reinterpret_cast<const GamePacket*>(
        &_GamePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(GamePacket& a, GamePacket& b) { a.Swap(&b); }
  inline void Swap(GamePacket* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GamePacket* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GamePacket* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GamePacket>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GamePacket& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GamePacket& from) { GamePacket::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GamePacket* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "center.GamePacket"; }

 protected:
  explicit GamePacket(::google::protobuf::Arena* arena);
  GamePacket(::google::protobuf::Arena* arena, const GamePacket& from);
  GamePacket(::google::protobuf::Arena* arena, GamePacket&& from) noexcept
      : GamePacket(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kC2SLoginFieldNumber = 1,
    kS2CLoginFieldNumber = 2,
    kC2SEnterLobbyFieldNumber = 3,
    kS2CEnterLobbyFieldNumber = 4,
    kC2SGameStartFieldNumber = 5,
    kS2CGameStartFieldNumber = 6,
    kC2SPlayerMoveFieldNumber = 7,
    kS2CPlayerMoveFieldNumber = 8,
    kC2SPlayerAttackFieldNumber = 9,
    kS2CPlayerAttackFieldNumber = 10,
  };
  // .auth.C2S_Login c2s_login = 1;
  bool has_c2s_login() const;
  private:
  bool _internal_has_c2s_login() const;

  public:
  void clear_c2s_login() ;
  const ::auth::C2S_Login& c2s_login() const;
  PROTOBUF_NODISCARD ::auth::C2S_Login* release_c2s_login();
  ::auth::C2S_Login* mutable_c2s_login();
  void set_allocated_c2s_login(::auth::C2S_Login* value);
  void unsafe_arena_set_allocated_c2s_login(::auth::C2S_Login* value);
  ::auth::C2S_Login* unsafe_arena_release_c2s_login();

  private:
  const ::auth::C2S_Login& _internal_c2s_login() const;
  ::auth::C2S_Login* _internal_mutable_c2s_login();

  public:
  // .auth.S2C_Login s2c_login = 2;
  bool has_s2c_login() const;
  private:
  bool _internal_has_s2c_login() const;

  public:
  void clear_s2c_login() ;
  const ::auth::S2C_Login& s2c_login() const;
  PROTOBUF_NODISCARD ::auth::S2C_Login* release_s2c_login();
  ::auth::S2C_Login* mutable_s2c_login();
  void set_allocated_s2c_login(::auth::S2C_Login* value);
  void unsafe_arena_set_allocated_s2c_login(::auth::S2C_Login* value);
  ::auth::S2C_Login* unsafe_arena_release_s2c_login();

  private:
  const ::auth::S2C_Login& _internal_s2c_login() const;
  ::auth::S2C_Login* _internal_mutable_s2c_login();

  public:
  // .lobby.C2S_EnterLobby c2s_enter_lobby = 3;
  bool has_c2s_enter_lobby() const;
  private:
  bool _internal_has_c2s_enter_lobby() const;

  public:
  void clear_c2s_enter_lobby() ;
  const ::lobby::C2S_EnterLobby& c2s_enter_lobby() const;
  PROTOBUF_NODISCARD ::lobby::C2S_EnterLobby* release_c2s_enter_lobby();
  ::lobby::C2S_EnterLobby* mutable_c2s_enter_lobby();
  void set_allocated_c2s_enter_lobby(::lobby::C2S_EnterLobby* value);
  void unsafe_arena_set_allocated_c2s_enter_lobby(::lobby::C2S_EnterLobby* value);
  ::lobby::C2S_EnterLobby* unsafe_arena_release_c2s_enter_lobby();

  private:
  const ::lobby::C2S_EnterLobby& _internal_c2s_enter_lobby() const;
  ::lobby::C2S_EnterLobby* _internal_mutable_c2s_enter_lobby();

  public:
  // .lobby.S2C_EnterLobby s2c_enter_lobby = 4;
  bool has_s2c_enter_lobby() const;
  private:
  bool _internal_has_s2c_enter_lobby() const;

  public:
  void clear_s2c_enter_lobby() ;
  const ::lobby::S2C_EnterLobby& s2c_enter_lobby() const;
  PROTOBUF_NODISCARD ::lobby::S2C_EnterLobby* release_s2c_enter_lobby();
  ::lobby::S2C_EnterLobby* mutable_s2c_enter_lobby();
  void set_allocated_s2c_enter_lobby(::lobby::S2C_EnterLobby* value);
  void unsafe_arena_set_allocated_s2c_enter_lobby(::lobby::S2C_EnterLobby* value);
  ::lobby::S2C_EnterLobby* unsafe_arena_release_s2c_enter_lobby();

  private:
  const ::lobby::S2C_EnterLobby& _internal_s2c_enter_lobby() const;
  ::lobby::S2C_EnterLobby* _internal_mutable_s2c_enter_lobby();

  public:
  // .lobby.C2S_GameStart c2s_game_start = 5;
  bool has_c2s_game_start() const;
  private:
  bool _internal_has_c2s_game_start() const;

  public:
  void clear_c2s_game_start() ;
  const ::lobby::C2S_GameStart& c2s_game_start() const;
  PROTOBUF_NODISCARD ::lobby::C2S_GameStart* release_c2s_game_start();
  ::lobby::C2S_GameStart* mutable_c2s_game_start();
  void set_allocated_c2s_game_start(::lobby::C2S_GameStart* value);
  void unsafe_arena_set_allocated_c2s_game_start(::lobby::C2S_GameStart* value);
  ::lobby::C2S_GameStart* unsafe_arena_release_c2s_game_start();

  private:
  const ::lobby::C2S_GameStart& _internal_c2s_game_start() const;
  ::lobby::C2S_GameStart* _internal_mutable_c2s_game_start();

  public:
  // .lobby.S2C_GameStart s2c_game_start = 6;
  bool has_s2c_game_start() const;
  private:
  bool _internal_has_s2c_game_start() const;

  public:
  void clear_s2c_game_start() ;
  const ::lobby::S2C_GameStart& s2c_game_start() const;
  PROTOBUF_NODISCARD ::lobby::S2C_GameStart* release_s2c_game_start();
  ::lobby::S2C_GameStart* mutable_s2c_game_start();
  void set_allocated_s2c_game_start(::lobby::S2C_GameStart* value);
  void unsafe_arena_set_allocated_s2c_game_start(::lobby::S2C_GameStart* value);
  ::lobby::S2C_GameStart* unsafe_arena_release_s2c_game_start();

  private:
  const ::lobby::S2C_GameStart& _internal_s2c_game_start() const;
  ::lobby::S2C_GameStart* _internal_mutable_s2c_game_start();

  public:
  // .ingame.C2S_PlayerMove c2s_player_move = 7;
  bool has_c2s_player_move() const;
  private:
  bool _internal_has_c2s_player_move() const;

  public:
  void clear_c2s_player_move() ;
  const ::ingame::C2S_PlayerMove& c2s_player_move() const;
  PROTOBUF_NODISCARD ::ingame::C2S_PlayerMove* release_c2s_player_move();
  ::ingame::C2S_PlayerMove* mutable_c2s_player_move();
  void set_allocated_c2s_player_move(::ingame::C2S_PlayerMove* value);
  void unsafe_arena_set_allocated_c2s_player_move(::ingame::C2S_PlayerMove* value);
  ::ingame::C2S_PlayerMove* unsafe_arena_release_c2s_player_move();

  private:
  const ::ingame::C2S_PlayerMove& _internal_c2s_player_move() const;
  ::ingame::C2S_PlayerMove* _internal_mutable_c2s_player_move();

  public:
  // .ingame.S2C_PlayerMove s2c_player_move = 8;
  bool has_s2c_player_move() const;
  private:
  bool _internal_has_s2c_player_move() const;

  public:
  void clear_s2c_player_move() ;
  const ::ingame::S2C_PlayerMove& s2c_player_move() const;
  PROTOBUF_NODISCARD ::ingame::S2C_PlayerMove* release_s2c_player_move();
  ::ingame::S2C_PlayerMove* mutable_s2c_player_move();
  void set_allocated_s2c_player_move(::ingame::S2C_PlayerMove* value);
  void unsafe_arena_set_allocated_s2c_player_move(::ingame::S2C_PlayerMove* value);
  ::ingame::S2C_PlayerMove* unsafe_arena_release_s2c_player_move();

  private:
  const ::ingame::S2C_PlayerMove& _internal_s2c_player_move() const;
  ::ingame::S2C_PlayerMove* _internal_mutable_s2c_player_move();

  public:
  // .ingame.C2S_PlayerAttack c2s_player_attack = 9;
  bool has_c2s_player_attack() const;
  private:
  bool _internal_has_c2s_player_attack() const;

  public:
  void clear_c2s_player_attack() ;
  const ::ingame::C2S_PlayerAttack& c2s_player_attack() const;
  PROTOBUF_NODISCARD ::ingame::C2S_PlayerAttack* release_c2s_player_attack();
  ::ingame::C2S_PlayerAttack* mutable_c2s_player_attack();
  void set_allocated_c2s_player_attack(::ingame::C2S_PlayerAttack* value);
  void unsafe_arena_set_allocated_c2s_player_attack(::ingame::C2S_PlayerAttack* value);
  ::ingame::C2S_PlayerAttack* unsafe_arena_release_c2s_player_attack();

  private:
  const ::ingame::C2S_PlayerAttack& _internal_c2s_player_attack() const;
  ::ingame::C2S_PlayerAttack* _internal_mutable_c2s_player_attack();

  public:
  // .ingame.S2C_PlayerAttack s2c_player_attack = 10;
  bool has_s2c_player_attack() const;
  private:
  bool _internal_has_s2c_player_attack() const;

  public:
  void clear_s2c_player_attack() ;
  const ::ingame::S2C_PlayerAttack& s2c_player_attack() const;
  PROTOBUF_NODISCARD ::ingame::S2C_PlayerAttack* release_s2c_player_attack();
  ::ingame::S2C_PlayerAttack* mutable_s2c_player_attack();
  void set_allocated_s2c_player_attack(::ingame::S2C_PlayerAttack* value);
  void unsafe_arena_set_allocated_s2c_player_attack(::ingame::S2C_PlayerAttack* value);
  ::ingame::S2C_PlayerAttack* unsafe_arena_release_s2c_player_attack();

  private:
  const ::ingame::S2C_PlayerAttack& _internal_s2c_player_attack() const;
  ::ingame::S2C_PlayerAttack* _internal_mutable_s2c_player_attack();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:center.GamePacket)
 private:
  class _Internal;
  void set_has_c2s_login();
  void set_has_s2c_login();
  void set_has_c2s_enter_lobby();
  void set_has_s2c_enter_lobby();
  void set_has_c2s_game_start();
  void set_has_s2c_game_start();
  void set_has_c2s_player_move();
  void set_has_s2c_player_move();
  void set_has_c2s_player_attack();
  void set_has_s2c_player_attack();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 10, 10,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GamePacket& from_msg);
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::auth::C2S_Login* c2s_login_;
      ::auth::S2C_Login* s2c_login_;
      ::lobby::C2S_EnterLobby* c2s_enter_lobby_;
      ::lobby::S2C_EnterLobby* s2c_enter_lobby_;
      ::lobby::C2S_GameStart* c2s_game_start_;
      ::lobby::S2C_GameStart* s2c_game_start_;
      ::ingame::C2S_PlayerMove* c2s_player_move_;
      ::ingame::S2C_PlayerMove* s2c_player_move_;
      ::ingame::C2S_PlayerAttack* c2s_player_attack_;
      ::ingame::S2C_PlayerAttack* s2c_player_attack_;
    } payload_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_center_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GamePacket

// .auth.C2S_Login c2s_login = 1;
inline bool GamePacket::has_c2s_login() const {
  return payload_case() == kC2SLogin;
}
inline bool GamePacket::_internal_has_c2s_login() const {
  return payload_case() == kC2SLogin;
}
inline void GamePacket::set_has_c2s_login() {
  _impl_._oneof_case_[0] = kC2SLogin;
}
inline ::auth::C2S_Login* GamePacket::release_c2s_login() {
  // @@protoc_insertion_point(field_release:center.GamePacket.c2s_login)
  if (payload_case() == kC2SLogin) {
    clear_has_payload();
    auto* temp = _impl_.payload_.c2s_login_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.c2s_login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::auth::C2S_Login& GamePacket::_internal_c2s_login() const {
  return payload_case() == kC2SLogin ? *_impl_.payload_.c2s_login_ : reinterpret_cast<::auth::C2S_Login&>(::auth::_C2S_Login_default_instance_);
}
inline const ::auth::C2S_Login& GamePacket::c2s_login() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:center.GamePacket.c2s_login)
  return _internal_c2s_login();
}
inline ::auth::C2S_Login* GamePacket::unsafe_arena_release_c2s_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:center.GamePacket.c2s_login)
  if (payload_case() == kC2SLogin) {
    clear_has_payload();
    auto* temp = _impl_.payload_.c2s_login_;
    _impl_.payload_.c2s_login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GamePacket::unsafe_arena_set_allocated_c2s_login(::auth::C2S_Login* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_c2s_login();
    _impl_.payload_.c2s_login_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:center.GamePacket.c2s_login)
}
inline ::auth::C2S_Login* GamePacket::_internal_mutable_c2s_login() {
  if (payload_case() != kC2SLogin) {
    clear_payload();
    set_has_c2s_login();
    _impl_.payload_.c2s_login_ =
        ::google::protobuf::Message::DefaultConstruct<::auth::C2S_Login>(GetArena());
  }
  return _impl_.payload_.c2s_login_;
}
inline ::auth::C2S_Login* GamePacket::mutable_c2s_login() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::auth::C2S_Login* _msg = _internal_mutable_c2s_login();
  // @@protoc_insertion_point(field_mutable:center.GamePacket.c2s_login)
  return _msg;
}

// .auth.S2C_Login s2c_login = 2;
inline bool GamePacket::has_s2c_login() const {
  return payload_case() == kS2CLogin;
}
inline bool GamePacket::_internal_has_s2c_login() const {
  return payload_case() == kS2CLogin;
}
inline void GamePacket::set_has_s2c_login() {
  _impl_._oneof_case_[0] = kS2CLogin;
}
inline ::auth::S2C_Login* GamePacket::release_s2c_login() {
  // @@protoc_insertion_point(field_release:center.GamePacket.s2c_login)
  if (payload_case() == kS2CLogin) {
    clear_has_payload();
    auto* temp = _impl_.payload_.s2c_login_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.s2c_login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::auth::S2C_Login& GamePacket::_internal_s2c_login() const {
  return payload_case() == kS2CLogin ? *_impl_.payload_.s2c_login_ : reinterpret_cast<::auth::S2C_Login&>(::auth::_S2C_Login_default_instance_);
}
inline const ::auth::S2C_Login& GamePacket::s2c_login() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:center.GamePacket.s2c_login)
  return _internal_s2c_login();
}
inline ::auth::S2C_Login* GamePacket::unsafe_arena_release_s2c_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:center.GamePacket.s2c_login)
  if (payload_case() == kS2CLogin) {
    clear_has_payload();
    auto* temp = _impl_.payload_.s2c_login_;
    _impl_.payload_.s2c_login_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GamePacket::unsafe_arena_set_allocated_s2c_login(::auth::S2C_Login* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_s2c_login();
    _impl_.payload_.s2c_login_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:center.GamePacket.s2c_login)
}
inline ::auth::S2C_Login* GamePacket::_internal_mutable_s2c_login() {
  if (payload_case() != kS2CLogin) {
    clear_payload();
    set_has_s2c_login();
    _impl_.payload_.s2c_login_ =
        ::google::protobuf::Message::DefaultConstruct<::auth::S2C_Login>(GetArena());
  }
  return _impl_.payload_.s2c_login_;
}
inline ::auth::S2C_Login* GamePacket::mutable_s2c_login() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::auth::S2C_Login* _msg = _internal_mutable_s2c_login();
  // @@protoc_insertion_point(field_mutable:center.GamePacket.s2c_login)
  return _msg;
}

// .lobby.C2S_EnterLobby c2s_enter_lobby = 3;
inline bool GamePacket::has_c2s_enter_lobby() const {
  return payload_case() == kC2SEnterLobby;
}
inline bool GamePacket::_internal_has_c2s_enter_lobby() const {
  return payload_case() == kC2SEnterLobby;
}
inline void GamePacket::set_has_c2s_enter_lobby() {
  _impl_._oneof_case_[0] = kC2SEnterLobby;
}
inline ::lobby::C2S_EnterLobby* GamePacket::release_c2s_enter_lobby() {
  // @@protoc_insertion_point(field_release:center.GamePacket.c2s_enter_lobby)
  if (payload_case() == kC2SEnterLobby) {
    clear_has_payload();
    auto* temp = _impl_.payload_.c2s_enter_lobby_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.c2s_enter_lobby_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lobby::C2S_EnterLobby& GamePacket::_internal_c2s_enter_lobby() const {
  return payload_case() == kC2SEnterLobby ? *_impl_.payload_.c2s_enter_lobby_ : reinterpret_cast<::lobby::C2S_EnterLobby&>(::lobby::_C2S_EnterLobby_default_instance_);
}
inline const ::lobby::C2S_EnterLobby& GamePacket::c2s_enter_lobby() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:center.GamePacket.c2s_enter_lobby)
  return _internal_c2s_enter_lobby();
}
inline ::lobby::C2S_EnterLobby* GamePacket::unsafe_arena_release_c2s_enter_lobby() {
  // @@protoc_insertion_point(field_unsafe_arena_release:center.GamePacket.c2s_enter_lobby)
  if (payload_case() == kC2SEnterLobby) {
    clear_has_payload();
    auto* temp = _impl_.payload_.c2s_enter_lobby_;
    _impl_.payload_.c2s_enter_lobby_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GamePacket::unsafe_arena_set_allocated_c2s_enter_lobby(::lobby::C2S_EnterLobby* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_c2s_enter_lobby();
    _impl_.payload_.c2s_enter_lobby_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:center.GamePacket.c2s_enter_lobby)
}
inline ::lobby::C2S_EnterLobby* GamePacket::_internal_mutable_c2s_enter_lobby() {
  if (payload_case() != kC2SEnterLobby) {
    clear_payload();
    set_has_c2s_enter_lobby();
    _impl_.payload_.c2s_enter_lobby_ =
        ::google::protobuf::Message::DefaultConstruct<::lobby::C2S_EnterLobby>(GetArena());
  }
  return _impl_.payload_.c2s_enter_lobby_;
}
inline ::lobby::C2S_EnterLobby* GamePacket::mutable_c2s_enter_lobby() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::lobby::C2S_EnterLobby* _msg = _internal_mutable_c2s_enter_lobby();
  // @@protoc_insertion_point(field_mutable:center.GamePacket.c2s_enter_lobby)
  return _msg;
}

// .lobby.S2C_EnterLobby s2c_enter_lobby = 4;
inline bool GamePacket::has_s2c_enter_lobby() const {
  return payload_case() == kS2CEnterLobby;
}
inline bool GamePacket::_internal_has_s2c_enter_lobby() const {
  return payload_case() == kS2CEnterLobby;
}
inline void GamePacket::set_has_s2c_enter_lobby() {
  _impl_._oneof_case_[0] = kS2CEnterLobby;
}
inline ::lobby::S2C_EnterLobby* GamePacket::release_s2c_enter_lobby() {
  // @@protoc_insertion_point(field_release:center.GamePacket.s2c_enter_lobby)
  if (payload_case() == kS2CEnterLobby) {
    clear_has_payload();
    auto* temp = _impl_.payload_.s2c_enter_lobby_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.s2c_enter_lobby_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lobby::S2C_EnterLobby& GamePacket::_internal_s2c_enter_lobby() const {
  return payload_case() == kS2CEnterLobby ? *_impl_.payload_.s2c_enter_lobby_ : reinterpret_cast<::lobby::S2C_EnterLobby&>(::lobby::_S2C_EnterLobby_default_instance_);
}
inline const ::lobby::S2C_EnterLobby& GamePacket::s2c_enter_lobby() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:center.GamePacket.s2c_enter_lobby)
  return _internal_s2c_enter_lobby();
}
inline ::lobby::S2C_EnterLobby* GamePacket::unsafe_arena_release_s2c_enter_lobby() {
  // @@protoc_insertion_point(field_unsafe_arena_release:center.GamePacket.s2c_enter_lobby)
  if (payload_case() == kS2CEnterLobby) {
    clear_has_payload();
    auto* temp = _impl_.payload_.s2c_enter_lobby_;
    _impl_.payload_.s2c_enter_lobby_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GamePacket::unsafe_arena_set_allocated_s2c_enter_lobby(::lobby::S2C_EnterLobby* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_s2c_enter_lobby();
    _impl_.payload_.s2c_enter_lobby_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:center.GamePacket.s2c_enter_lobby)
}
inline ::lobby::S2C_EnterLobby* GamePacket::_internal_mutable_s2c_enter_lobby() {
  if (payload_case() != kS2CEnterLobby) {
    clear_payload();
    set_has_s2c_enter_lobby();
    _impl_.payload_.s2c_enter_lobby_ =
        ::google::protobuf::Message::DefaultConstruct<::lobby::S2C_EnterLobby>(GetArena());
  }
  return _impl_.payload_.s2c_enter_lobby_;
}
inline ::lobby::S2C_EnterLobby* GamePacket::mutable_s2c_enter_lobby() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::lobby::S2C_EnterLobby* _msg = _internal_mutable_s2c_enter_lobby();
  // @@protoc_insertion_point(field_mutable:center.GamePacket.s2c_enter_lobby)
  return _msg;
}

// .lobby.C2S_GameStart c2s_game_start = 5;
inline bool GamePacket::has_c2s_game_start() const {
  return payload_case() == kC2SGameStart;
}
inline bool GamePacket::_internal_has_c2s_game_start() const {
  return payload_case() == kC2SGameStart;
}
inline void GamePacket::set_has_c2s_game_start() {
  _impl_._oneof_case_[0] = kC2SGameStart;
}
inline ::lobby::C2S_GameStart* GamePacket::release_c2s_game_start() {
  // @@protoc_insertion_point(field_release:center.GamePacket.c2s_game_start)
  if (payload_case() == kC2SGameStart) {
    clear_has_payload();
    auto* temp = _impl_.payload_.c2s_game_start_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.c2s_game_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lobby::C2S_GameStart& GamePacket::_internal_c2s_game_start() const {
  return payload_case() == kC2SGameStart ? *_impl_.payload_.c2s_game_start_ : reinterpret_cast<::lobby::C2S_GameStart&>(::lobby::_C2S_GameStart_default_instance_);
}
inline const ::lobby::C2S_GameStart& GamePacket::c2s_game_start() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:center.GamePacket.c2s_game_start)
  return _internal_c2s_game_start();
}
inline ::lobby::C2S_GameStart* GamePacket::unsafe_arena_release_c2s_game_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:center.GamePacket.c2s_game_start)
  if (payload_case() == kC2SGameStart) {
    clear_has_payload();
    auto* temp = _impl_.payload_.c2s_game_start_;
    _impl_.payload_.c2s_game_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GamePacket::unsafe_arena_set_allocated_c2s_game_start(::lobby::C2S_GameStart* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_c2s_game_start();
    _impl_.payload_.c2s_game_start_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:center.GamePacket.c2s_game_start)
}
inline ::lobby::C2S_GameStart* GamePacket::_internal_mutable_c2s_game_start() {
  if (payload_case() != kC2SGameStart) {
    clear_payload();
    set_has_c2s_game_start();
    _impl_.payload_.c2s_game_start_ =
        ::google::protobuf::Message::DefaultConstruct<::lobby::C2S_GameStart>(GetArena());
  }
  return _impl_.payload_.c2s_game_start_;
}
inline ::lobby::C2S_GameStart* GamePacket::mutable_c2s_game_start() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::lobby::C2S_GameStart* _msg = _internal_mutable_c2s_game_start();
  // @@protoc_insertion_point(field_mutable:center.GamePacket.c2s_game_start)
  return _msg;
}

// .lobby.S2C_GameStart s2c_game_start = 6;
inline bool GamePacket::has_s2c_game_start() const {
  return payload_case() == kS2CGameStart;
}
inline bool GamePacket::_internal_has_s2c_game_start() const {
  return payload_case() == kS2CGameStart;
}
inline void GamePacket::set_has_s2c_game_start() {
  _impl_._oneof_case_[0] = kS2CGameStart;
}
inline ::lobby::S2C_GameStart* GamePacket::release_s2c_game_start() {
  // @@protoc_insertion_point(field_release:center.GamePacket.s2c_game_start)
  if (payload_case() == kS2CGameStart) {
    clear_has_payload();
    auto* temp = _impl_.payload_.s2c_game_start_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.s2c_game_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lobby::S2C_GameStart& GamePacket::_internal_s2c_game_start() const {
  return payload_case() == kS2CGameStart ? *_impl_.payload_.s2c_game_start_ : reinterpret_cast<::lobby::S2C_GameStart&>(::lobby::_S2C_GameStart_default_instance_);
}
inline const ::lobby::S2C_GameStart& GamePacket::s2c_game_start() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:center.GamePacket.s2c_game_start)
  return _internal_s2c_game_start();
}
inline ::lobby::S2C_GameStart* GamePacket::unsafe_arena_release_s2c_game_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:center.GamePacket.s2c_game_start)
  if (payload_case() == kS2CGameStart) {
    clear_has_payload();
    auto* temp = _impl_.payload_.s2c_game_start_;
    _impl_.payload_.s2c_game_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GamePacket::unsafe_arena_set_allocated_s2c_game_start(::lobby::S2C_GameStart* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_s2c_game_start();
    _impl_.payload_.s2c_game_start_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:center.GamePacket.s2c_game_start)
}
inline ::lobby::S2C_GameStart* GamePacket::_internal_mutable_s2c_game_start() {
  if (payload_case() != kS2CGameStart) {
    clear_payload();
    set_has_s2c_game_start();
    _impl_.payload_.s2c_game_start_ =
        ::google::protobuf::Message::DefaultConstruct<::lobby::S2C_GameStart>(GetArena());
  }
  return _impl_.payload_.s2c_game_start_;
}
inline ::lobby::S2C_GameStart* GamePacket::mutable_s2c_game_start() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::lobby::S2C_GameStart* _msg = _internal_mutable_s2c_game_start();
  // @@protoc_insertion_point(field_mutable:center.GamePacket.s2c_game_start)
  return _msg;
}

// .ingame.C2S_PlayerMove c2s_player_move = 7;
inline bool GamePacket::has_c2s_player_move() const {
  return payload_case() == kC2SPlayerMove;
}
inline bool GamePacket::_internal_has_c2s_player_move() const {
  return payload_case() == kC2SPlayerMove;
}
inline void GamePacket::set_has_c2s_player_move() {
  _impl_._oneof_case_[0] = kC2SPlayerMove;
}
inline ::ingame::C2S_PlayerMove* GamePacket::release_c2s_player_move() {
  // @@protoc_insertion_point(field_release:center.GamePacket.c2s_player_move)
  if (payload_case() == kC2SPlayerMove) {
    clear_has_payload();
    auto* temp = _impl_.payload_.c2s_player_move_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.c2s_player_move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ingame::C2S_PlayerMove& GamePacket::_internal_c2s_player_move() const {
  return payload_case() == kC2SPlayerMove ? *_impl_.payload_.c2s_player_move_ : reinterpret_cast<::ingame::C2S_PlayerMove&>(::ingame::_C2S_PlayerMove_default_instance_);
}
inline const ::ingame::C2S_PlayerMove& GamePacket::c2s_player_move() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:center.GamePacket.c2s_player_move)
  return _internal_c2s_player_move();
}
inline ::ingame::C2S_PlayerMove* GamePacket::unsafe_arena_release_c2s_player_move() {
  // @@protoc_insertion_point(field_unsafe_arena_release:center.GamePacket.c2s_player_move)
  if (payload_case() == kC2SPlayerMove) {
    clear_has_payload();
    auto* temp = _impl_.payload_.c2s_player_move_;
    _impl_.payload_.c2s_player_move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GamePacket::unsafe_arena_set_allocated_c2s_player_move(::ingame::C2S_PlayerMove* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_c2s_player_move();
    _impl_.payload_.c2s_player_move_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:center.GamePacket.c2s_player_move)
}
inline ::ingame::C2S_PlayerMove* GamePacket::_internal_mutable_c2s_player_move() {
  if (payload_case() != kC2SPlayerMove) {
    clear_payload();
    set_has_c2s_player_move();
    _impl_.payload_.c2s_player_move_ =
        ::google::protobuf::Message::DefaultConstruct<::ingame::C2S_PlayerMove>(GetArena());
  }
  return _impl_.payload_.c2s_player_move_;
}
inline ::ingame::C2S_PlayerMove* GamePacket::mutable_c2s_player_move() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ingame::C2S_PlayerMove* _msg = _internal_mutable_c2s_player_move();
  // @@protoc_insertion_point(field_mutable:center.GamePacket.c2s_player_move)
  return _msg;
}

// .ingame.S2C_PlayerMove s2c_player_move = 8;
inline bool GamePacket::has_s2c_player_move() const {
  return payload_case() == kS2CPlayerMove;
}
inline bool GamePacket::_internal_has_s2c_player_move() const {
  return payload_case() == kS2CPlayerMove;
}
inline void GamePacket::set_has_s2c_player_move() {
  _impl_._oneof_case_[0] = kS2CPlayerMove;
}
inline ::ingame::S2C_PlayerMove* GamePacket::release_s2c_player_move() {
  // @@protoc_insertion_point(field_release:center.GamePacket.s2c_player_move)
  if (payload_case() == kS2CPlayerMove) {
    clear_has_payload();
    auto* temp = _impl_.payload_.s2c_player_move_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.s2c_player_move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ingame::S2C_PlayerMove& GamePacket::_internal_s2c_player_move() const {
  return payload_case() == kS2CPlayerMove ? *_impl_.payload_.s2c_player_move_ : reinterpret_cast<::ingame::S2C_PlayerMove&>(::ingame::_S2C_PlayerMove_default_instance_);
}
inline const ::ingame::S2C_PlayerMove& GamePacket::s2c_player_move() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:center.GamePacket.s2c_player_move)
  return _internal_s2c_player_move();
}
inline ::ingame::S2C_PlayerMove* GamePacket::unsafe_arena_release_s2c_player_move() {
  // @@protoc_insertion_point(field_unsafe_arena_release:center.GamePacket.s2c_player_move)
  if (payload_case() == kS2CPlayerMove) {
    clear_has_payload();
    auto* temp = _impl_.payload_.s2c_player_move_;
    _impl_.payload_.s2c_player_move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GamePacket::unsafe_arena_set_allocated_s2c_player_move(::ingame::S2C_PlayerMove* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_s2c_player_move();
    _impl_.payload_.s2c_player_move_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:center.GamePacket.s2c_player_move)
}
inline ::ingame::S2C_PlayerMove* GamePacket::_internal_mutable_s2c_player_move() {
  if (payload_case() != kS2CPlayerMove) {
    clear_payload();
    set_has_s2c_player_move();
    _impl_.payload_.s2c_player_move_ =
        ::google::protobuf::Message::DefaultConstruct<::ingame::S2C_PlayerMove>(GetArena());
  }
  return _impl_.payload_.s2c_player_move_;
}
inline ::ingame::S2C_PlayerMove* GamePacket::mutable_s2c_player_move() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ingame::S2C_PlayerMove* _msg = _internal_mutable_s2c_player_move();
  // @@protoc_insertion_point(field_mutable:center.GamePacket.s2c_player_move)
  return _msg;
}

// .ingame.C2S_PlayerAttack c2s_player_attack = 9;
inline bool GamePacket::has_c2s_player_attack() const {
  return payload_case() == kC2SPlayerAttack;
}
inline bool GamePacket::_internal_has_c2s_player_attack() const {
  return payload_case() == kC2SPlayerAttack;
}
inline void GamePacket::set_has_c2s_player_attack() {
  _impl_._oneof_case_[0] = kC2SPlayerAttack;
}
inline ::ingame::C2S_PlayerAttack* GamePacket::release_c2s_player_attack() {
  // @@protoc_insertion_point(field_release:center.GamePacket.c2s_player_attack)
  if (payload_case() == kC2SPlayerAttack) {
    clear_has_payload();
    auto* temp = _impl_.payload_.c2s_player_attack_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.c2s_player_attack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ingame::C2S_PlayerAttack& GamePacket::_internal_c2s_player_attack() const {
  return payload_case() == kC2SPlayerAttack ? *_impl_.payload_.c2s_player_attack_ : reinterpret_cast<::ingame::C2S_PlayerAttack&>(::ingame::_C2S_PlayerAttack_default_instance_);
}
inline const ::ingame::C2S_PlayerAttack& GamePacket::c2s_player_attack() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:center.GamePacket.c2s_player_attack)
  return _internal_c2s_player_attack();
}
inline ::ingame::C2S_PlayerAttack* GamePacket::unsafe_arena_release_c2s_player_attack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:center.GamePacket.c2s_player_attack)
  if (payload_case() == kC2SPlayerAttack) {
    clear_has_payload();
    auto* temp = _impl_.payload_.c2s_player_attack_;
    _impl_.payload_.c2s_player_attack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GamePacket::unsafe_arena_set_allocated_c2s_player_attack(::ingame::C2S_PlayerAttack* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_c2s_player_attack();
    _impl_.payload_.c2s_player_attack_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:center.GamePacket.c2s_player_attack)
}
inline ::ingame::C2S_PlayerAttack* GamePacket::_internal_mutable_c2s_player_attack() {
  if (payload_case() != kC2SPlayerAttack) {
    clear_payload();
    set_has_c2s_player_attack();
    _impl_.payload_.c2s_player_attack_ =
        ::google::protobuf::Message::DefaultConstruct<::ingame::C2S_PlayerAttack>(GetArena());
  }
  return _impl_.payload_.c2s_player_attack_;
}
inline ::ingame::C2S_PlayerAttack* GamePacket::mutable_c2s_player_attack() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ingame::C2S_PlayerAttack* _msg = _internal_mutable_c2s_player_attack();
  // @@protoc_insertion_point(field_mutable:center.GamePacket.c2s_player_attack)
  return _msg;
}

// .ingame.S2C_PlayerAttack s2c_player_attack = 10;
inline bool GamePacket::has_s2c_player_attack() const {
  return payload_case() == kS2CPlayerAttack;
}
inline bool GamePacket::_internal_has_s2c_player_attack() const {
  return payload_case() == kS2CPlayerAttack;
}
inline void GamePacket::set_has_s2c_player_attack() {
  _impl_._oneof_case_[0] = kS2CPlayerAttack;
}
inline ::ingame::S2C_PlayerAttack* GamePacket::release_s2c_player_attack() {
  // @@protoc_insertion_point(field_release:center.GamePacket.s2c_player_attack)
  if (payload_case() == kS2CPlayerAttack) {
    clear_has_payload();
    auto* temp = _impl_.payload_.s2c_player_attack_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.s2c_player_attack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ingame::S2C_PlayerAttack& GamePacket::_internal_s2c_player_attack() const {
  return payload_case() == kS2CPlayerAttack ? *_impl_.payload_.s2c_player_attack_ : reinterpret_cast<::ingame::S2C_PlayerAttack&>(::ingame::_S2C_PlayerAttack_default_instance_);
}
inline const ::ingame::S2C_PlayerAttack& GamePacket::s2c_player_attack() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:center.GamePacket.s2c_player_attack)
  return _internal_s2c_player_attack();
}
inline ::ingame::S2C_PlayerAttack* GamePacket::unsafe_arena_release_s2c_player_attack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:center.GamePacket.s2c_player_attack)
  if (payload_case() == kS2CPlayerAttack) {
    clear_has_payload();
    auto* temp = _impl_.payload_.s2c_player_attack_;
    _impl_.payload_.s2c_player_attack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GamePacket::unsafe_arena_set_allocated_s2c_player_attack(::ingame::S2C_PlayerAttack* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_s2c_player_attack();
    _impl_.payload_.s2c_player_attack_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:center.GamePacket.s2c_player_attack)
}
inline ::ingame::S2C_PlayerAttack* GamePacket::_internal_mutable_s2c_player_attack() {
  if (payload_case() != kS2CPlayerAttack) {
    clear_payload();
    set_has_s2c_player_attack();
    _impl_.payload_.s2c_player_attack_ =
        ::google::protobuf::Message::DefaultConstruct<::ingame::S2C_PlayerAttack>(GetArena());
  }
  return _impl_.payload_.s2c_player_attack_;
}
inline ::ingame::S2C_PlayerAttack* GamePacket::mutable_s2c_player_attack() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ingame::S2C_PlayerAttack* _msg = _internal_mutable_s2c_player_attack();
  // @@protoc_insertion_point(field_mutable:center.GamePacket.s2c_player_attack)
  return _msg;
}

inline bool GamePacket::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void GamePacket::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline GamePacket::PayloadCase GamePacket::payload_case() const {
  return GamePacket::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace center


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // center_2eproto_2epb_2eh
