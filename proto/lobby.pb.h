// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: lobby.proto
// Protobuf C++ Version: 5.29.5

#ifndef lobby_2eproto_2epb_2eh
#define lobby_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_lobby_2eproto

namespace google {
	namespace protobuf {
		namespace internal {
			template <typename T>
			::absl::string_view GetAnyMessageName();
		}  // namespace internal
	}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_lobby_2eproto {
	static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
descriptor_table_lobby_2eproto;
namespace lobby {
	class C2S_EnterLobby;
	struct C2S_EnterLobbyDefaultTypeInternal;
	extern C2S_EnterLobbyDefaultTypeInternal _C2S_EnterLobby_default_instance_;
	class C2S_GameStart;
	struct C2S_GameStartDefaultTypeInternal;
	extern C2S_GameStartDefaultTypeInternal _C2S_GameStart_default_instance_;
	class S2C_EnterLobby;
	struct S2C_EnterLobbyDefaultTypeInternal;
	extern S2C_EnterLobbyDefaultTypeInternal _S2C_EnterLobby_default_instance_;
	class S2C_GameStart;
	struct S2C_GameStartDefaultTypeInternal;
	extern S2C_GameStartDefaultTypeInternal _S2C_GameStart_default_instance_;
	class S2C_LobbyUserList;
	struct S2C_LobbyUserListDefaultTypeInternal;
	extern S2C_LobbyUserListDefaultTypeInternal _S2C_LobbyUserList_default_instance_;
}  // namespace lobby
namespace google {
	namespace protobuf {
	}  // namespace protobuf
}  // namespace google

namespace lobby {
	// ===================================================================

	// -------------------------------------------------------------------

	class S2C_LobbyUserList final : public ::google::protobuf::Message
		/* @@protoc_insertion_point(class_definition:lobby.S2C_LobbyUserList) */ {
	public:
		inline S2C_LobbyUserList() : S2C_LobbyUserList(nullptr) {}
		~S2C_LobbyUserList() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
		void operator delete(S2C_LobbyUserList* msg, std::destroying_delete_t) {
			SharedDtor(*msg);
			::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_LobbyUserList));
		}
#endif

		template <typename = void>
		explicit PROTOBUF_CONSTEXPR S2C_LobbyUserList(
			::google::protobuf::internal::ConstantInitialized);

		inline S2C_LobbyUserList(const S2C_LobbyUserList& from) : S2C_LobbyUserList(nullptr, from) {}
		inline S2C_LobbyUserList(S2C_LobbyUserList&& from) noexcept
			: S2C_LobbyUserList(nullptr, std::move(from)) {
		}
		inline S2C_LobbyUserList& operator=(const S2C_LobbyUserList& from) {
			CopyFrom(from);
			return *this;
		}
		inline S2C_LobbyUserList& operator=(S2C_LobbyUserList&& from) noexcept {
			if (this == &from) return *this;
			if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
				InternalSwap(&from);
			}
			else {
				CopyFrom(from);
			}
			return *this;
		}

		inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
			ABSL_ATTRIBUTE_LIFETIME_BOUND{
		  return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
		}
			inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
			ABSL_ATTRIBUTE_LIFETIME_BOUND{
		  return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
		}

			static const ::google::protobuf::Descriptor* descriptor() {
			return GetDescriptor();
		}
		static const ::google::protobuf::Descriptor* GetDescriptor() {
			return default_instance().GetMetadata().descriptor;
		}
		static const ::google::protobuf::Reflection* GetReflection() {
			return default_instance().GetMetadata().reflection;
		}
		static const S2C_LobbyUserList& default_instance() {
			return *internal_default_instance();
		}
		static inline const S2C_LobbyUserList* internal_default_instance() {
			return reinterpret_cast<const S2C_LobbyUserList*>(
				&_S2C_LobbyUserList_default_instance_);
		}
		static constexpr int kIndexInFileMessages = 2;
		friend void swap(S2C_LobbyUserList& a, S2C_LobbyUserList& b) { a.Swap(&b); }
		inline void Swap(S2C_LobbyUserList* other) {
			if (other == this) return;
			if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
				InternalSwap(other);
			}
			else {
				::google::protobuf::internal::GenericSwap(this, other);
			}
		}
		void UnsafeArenaSwap(S2C_LobbyUserList* other) {
			if (other == this) return;
			ABSL_DCHECK(GetArena() == other->GetArena());
			InternalSwap(other);
		}

		// implements Message ----------------------------------------------

		S2C_LobbyUserList* New(::google::protobuf::Arena* arena = nullptr) const {
			return ::google::protobuf::Message::DefaultConstruct<S2C_LobbyUserList>(arena);
		}
		using ::google::protobuf::Message::CopyFrom;
		void CopyFrom(const S2C_LobbyUserList& from);
		using ::google::protobuf::Message::MergeFrom;
		void MergeFrom(const S2C_LobbyUserList& from) { S2C_LobbyUserList::MergeImpl(*this, from); }

	private:
		static void MergeImpl(
			::google::protobuf::MessageLite& to_msg,
			const ::google::protobuf::MessageLite& from_msg);

	public:
		bool IsInitialized() const {
			return true;
		}
		ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
#if defined(PROTOBUF_CUSTOM_VTABLE)
	private:
		static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
		static ::uint8_t* _InternalSerialize(
			const MessageLite& msg, ::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream);

	public:
		::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
		::uint8_t* _InternalSerialize(
			::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream) const {
			return _InternalSerialize(*this, target, stream);
		}
#else   // PROTOBUF_CUSTOM_VTABLE
		::size_t ByteSizeLong() const final;
		::uint8_t* _InternalSerialize(
			::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream) const final;
#endif  // PROTOBUF_CUSTOM_VTABLE
		int GetCachedSize() const { return _impl_._cached_size_.Get(); }

	private:
		void SharedCtor(::google::protobuf::Arena* arena);
		static void SharedDtor(MessageLite& self);
		void InternalSwap(S2C_LobbyUserList* other);
	private:
		template <typename T>
		friend ::absl::string_view(
			::google::protobuf::internal::GetAnyMessageName)();
		static ::absl::string_view FullMessageName() { return "lobby.S2C_LobbyUserList"; }

	protected:
		explicit S2C_LobbyUserList(::google::protobuf::Arena* arena);
		S2C_LobbyUserList(::google::protobuf::Arena* arena, const S2C_LobbyUserList& from);
		S2C_LobbyUserList(::google::protobuf::Arena* arena, S2C_LobbyUserList&& from) noexcept
			: S2C_LobbyUserList(arena) {
			*this = ::std::move(from);
		}
		const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
		static void* PlacementNew_(const void*, void* mem,
			::google::protobuf::Arena* arena);
		static constexpr auto InternalNewImpl_();
		static const ::google::protobuf::internal::ClassDataFull _class_data_;

	public:
		::google::protobuf::Metadata GetMetadata() const;
		// nested types ----------------------------------------------------

		// accessors -------------------------------------------------------
		enum : int {
			kUsersFieldNumber = 1,
		};
		// repeated string users = 1;
		int users_size() const;
	private:
		int _internal_users_size() const;

	public:
		void clear_users();
		const std::string& users(int index) const;
		std::string* mutable_users(int index);
		template <typename Arg_ = const std::string&, typename... Args_>
		void set_users(int index, Arg_&& value, Args_... args);
		std::string* add_users();
		template <typename Arg_ = const std::string&, typename... Args_>
		void add_users(Arg_&& value, Args_... args);
		const ::google::protobuf::RepeatedPtrField<std::string>& users() const;
		::google::protobuf::RepeatedPtrField<std::string>* mutable_users();

	private:
		const ::google::protobuf::RepeatedPtrField<std::string>& _internal_users() const;
		::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_users();

	public:
		// @@protoc_insertion_point(class_scope:lobby.S2C_LobbyUserList)
	private:
		class _Internal;
		friend class ::google::protobuf::internal::TcParser;
		static const ::google::protobuf::internal::TcParseTable<
			0, 1, 0,
			37, 2>
			_table_;

		friend class ::google::protobuf::MessageLite;
		friend class ::google::protobuf::Arena;
		template <typename T>
		friend class ::google::protobuf::Arena::InternalHelper;
		using InternalArenaConstructable_ = void;
		using DestructorSkippable_ = void;
		struct Impl_ {
			inline explicit constexpr Impl_(
				::google::protobuf::internal::ConstantInitialized) noexcept;
			inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
				::google::protobuf::Arena* arena);
			inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
				::google::protobuf::Arena* arena, const Impl_& from,
				const S2C_LobbyUserList& from_msg);
			::google::protobuf::RepeatedPtrField<std::string> users_;
			::google::protobuf::internal::CachedSize _cached_size_;
			PROTOBUF_TSAN_DECLARE_MEMBER
		};
		union { Impl_ _impl_; };
		friend struct ::TableStruct_lobby_2eproto;
	};
	// -------------------------------------------------------------------

	class S2C_GameStart final : public ::google::protobuf::Message
		/* @@protoc_insertion_point(class_definition:lobby.S2C_GameStart) */ {
	public:
		inline S2C_GameStart() : S2C_GameStart(nullptr) {}
		~S2C_GameStart() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
		void operator delete(S2C_GameStart* msg, std::destroying_delete_t) {
			SharedDtor(*msg);
			::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_GameStart));
		}
#endif

		template <typename = void>
		explicit PROTOBUF_CONSTEXPR S2C_GameStart(
			::google::protobuf::internal::ConstantInitialized);

		inline S2C_GameStart(const S2C_GameStart& from) : S2C_GameStart(nullptr, from) {}
		inline S2C_GameStart(S2C_GameStart&& from) noexcept
			: S2C_GameStart(nullptr, std::move(from)) {
		}
		inline S2C_GameStart& operator=(const S2C_GameStart& from) {
			CopyFrom(from);
			return *this;
		}
		inline S2C_GameStart& operator=(S2C_GameStart&& from) noexcept {
			if (this == &from) return *this;
			if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
				InternalSwap(&from);
			}
			else {
				CopyFrom(from);
			}
			return *this;
		}

		inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
			ABSL_ATTRIBUTE_LIFETIME_BOUND{
		  return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
		}
			inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
			ABSL_ATTRIBUTE_LIFETIME_BOUND{
		  return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
		}

			static const ::google::protobuf::Descriptor* descriptor() {
			return GetDescriptor();
		}
		static const ::google::protobuf::Descriptor* GetDescriptor() {
			return default_instance().GetMetadata().descriptor;
		}
		static const ::google::protobuf::Reflection* GetReflection() {
			return default_instance().GetMetadata().reflection;
		}
		static const S2C_GameStart& default_instance() {
			return *internal_default_instance();
		}
		static inline const S2C_GameStart* internal_default_instance() {
			return reinterpret_cast<const S2C_GameStart*>(
				&_S2C_GameStart_default_instance_);
		}
		static constexpr int kIndexInFileMessages = 4;
		friend void swap(S2C_GameStart& a, S2C_GameStart& b) { a.Swap(&b); }
		inline void Swap(S2C_GameStart* other) {
			if (other == this) return;
			if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
				InternalSwap(other);
			}
			else {
				::google::protobuf::internal::GenericSwap(this, other);
			}
		}
		void UnsafeArenaSwap(S2C_GameStart* other) {
			if (other == this) return;
			ABSL_DCHECK(GetArena() == other->GetArena());
			InternalSwap(other);
		}

		// implements Message ----------------------------------------------

		S2C_GameStart* New(::google::protobuf::Arena* arena = nullptr) const {
			return ::google::protobuf::Message::DefaultConstruct<S2C_GameStart>(arena);
		}
		using ::google::protobuf::Message::CopyFrom;
		void CopyFrom(const S2C_GameStart& from);
		using ::google::protobuf::Message::MergeFrom;
		void MergeFrom(const S2C_GameStart& from) { S2C_GameStart::MergeImpl(*this, from); }

	private:
		static void MergeImpl(
			::google::protobuf::MessageLite& to_msg,
			const ::google::protobuf::MessageLite& from_msg);

	public:
		bool IsInitialized() const {
			return true;
		}
		ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
#if defined(PROTOBUF_CUSTOM_VTABLE)
	private:
		static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
		static ::uint8_t* _InternalSerialize(
			const MessageLite& msg, ::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream);

	public:
		::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
		::uint8_t* _InternalSerialize(
			::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream) const {
			return _InternalSerialize(*this, target, stream);
		}
#else   // PROTOBUF_CUSTOM_VTABLE
		::size_t ByteSizeLong() const final;
		::uint8_t* _InternalSerialize(
			::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream) const final;
#endif  // PROTOBUF_CUSTOM_VTABLE
		int GetCachedSize() const { return _impl_._cached_size_.Get(); }

	private:
		void SharedCtor(::google::protobuf::Arena* arena);
		static void SharedDtor(MessageLite& self);
		void InternalSwap(S2C_GameStart* other);
	private:
		template <typename T>
		friend ::absl::string_view(
			::google::protobuf::internal::GetAnyMessageName)();
		static ::absl::string_view FullMessageName() { return "lobby.S2C_GameStart"; }

	protected:
		explicit S2C_GameStart(::google::protobuf::Arena* arena);
		S2C_GameStart(::google::protobuf::Arena* arena, const S2C_GameStart& from);
		S2C_GameStart(::google::protobuf::Arena* arena, S2C_GameStart&& from) noexcept
			: S2C_GameStart(arena) {
			*this = ::std::move(from);
		}
		const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
		static void* PlacementNew_(const void*, void* mem,
			::google::protobuf::Arena* arena);
		static constexpr auto InternalNewImpl_();
		static const ::google::protobuf::internal::ClassDataFull _class_data_;

	public:
		::google::protobuf::Metadata GetMetadata() const;
		// nested types ----------------------------------------------------

		// accessors -------------------------------------------------------
		enum : int {
			kRoomIdFieldNumber = 2,
			kMessageFieldNumber = 3,
			kSuccessFieldNumber = 1,
		};
		// string room_id = 2;
		void clear_room_id();
		const std::string& room_id() const;
		template <typename Arg_ = const std::string&, typename... Args_>
		void set_room_id(Arg_&& arg, Args_... args);
		std::string* mutable_room_id();
		PROTOBUF_NODISCARD std::string* release_room_id();
		void set_allocated_room_id(std::string* value);

	private:
		const std::string& _internal_room_id() const;
		inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(
			const std::string& value);
		std::string* _internal_mutable_room_id();

	public:
		// string message = 3;
		void clear_message();
		const std::string& message() const;
		template <typename Arg_ = const std::string&, typename... Args_>
		void set_message(Arg_&& arg, Args_... args);
		std::string* mutable_message();
		PROTOBUF_NODISCARD std::string* release_message();
		void set_allocated_message(std::string* value);

	private:
		const std::string& _internal_message() const;
		inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
			const std::string& value);
		std::string* _internal_mutable_message();

	public:
		// bool success = 1;
		void clear_success();
		bool success() const;
		void set_success(bool value);

	private:
		bool _internal_success() const;
		void _internal_set_success(bool value);

	public:
		// @@protoc_insertion_point(class_scope:lobby.S2C_GameStart)
	private:
		class _Internal;
		friend class ::google::protobuf::internal::TcParser;
		static const ::google::protobuf::internal::TcParseTable<
			2, 3, 0,
			42, 2>
			_table_;

		friend class ::google::protobuf::MessageLite;
		friend class ::google::protobuf::Arena;
		template <typename T>
		friend class ::google::protobuf::Arena::InternalHelper;
		using InternalArenaConstructable_ = void;
		using DestructorSkippable_ = void;
		struct Impl_ {
			inline explicit constexpr Impl_(
				::google::protobuf::internal::ConstantInitialized) noexcept;
			inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
				::google::protobuf::Arena* arena);
			inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
				::google::protobuf::Arena* arena, const Impl_& from,
				const S2C_GameStart& from_msg);
			::google::protobuf::internal::ArenaStringPtr room_id_;
			::google::protobuf::internal::ArenaStringPtr message_;
			bool success_;
			::google::protobuf::internal::CachedSize _cached_size_;
			PROTOBUF_TSAN_DECLARE_MEMBER
		};
		union { Impl_ _impl_; };
		friend struct ::TableStruct_lobby_2eproto;
	};
	// -------------------------------------------------------------------

	class S2C_EnterLobby final : public ::google::protobuf::Message
		/* @@protoc_insertion_point(class_definition:lobby.S2C_EnterLobby) */ {
	public:
		inline S2C_EnterLobby() : S2C_EnterLobby(nullptr) {}
		~S2C_EnterLobby() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
		void operator delete(S2C_EnterLobby* msg, std::destroying_delete_t) {
			SharedDtor(*msg);
			::google::protobuf::internal::SizedDelete(msg, sizeof(S2C_EnterLobby));
		}
#endif

		template <typename = void>
		explicit PROTOBUF_CONSTEXPR S2C_EnterLobby(
			::google::protobuf::internal::ConstantInitialized);

		inline S2C_EnterLobby(const S2C_EnterLobby& from) : S2C_EnterLobby(nullptr, from) {}
		inline S2C_EnterLobby(S2C_EnterLobby&& from) noexcept
			: S2C_EnterLobby(nullptr, std::move(from)) {
		}
		inline S2C_EnterLobby& operator=(const S2C_EnterLobby& from) {
			CopyFrom(from);
			return *this;
		}
		inline S2C_EnterLobby& operator=(S2C_EnterLobby&& from) noexcept {
			if (this == &from) return *this;
			if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
				InternalSwap(&from);
			}
			else {
				CopyFrom(from);
			}
			return *this;
		}

		inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
			ABSL_ATTRIBUTE_LIFETIME_BOUND{
		  return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
		}
			inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
			ABSL_ATTRIBUTE_LIFETIME_BOUND{
		  return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
		}

			static const ::google::protobuf::Descriptor* descriptor() {
			return GetDescriptor();
		}
		static const ::google::protobuf::Descriptor* GetDescriptor() {
			return default_instance().GetMetadata().descriptor;
		}
		static const ::google::protobuf::Reflection* GetReflection() {
			return default_instance().GetMetadata().reflection;
		}
		static const S2C_EnterLobby& default_instance() {
			return *internal_default_instance();
		}
		static inline const S2C_EnterLobby* internal_default_instance() {
			return reinterpret_cast<const S2C_EnterLobby*>(
				&_S2C_EnterLobby_default_instance_);
		}
		static constexpr int kIndexInFileMessages = 1;
		friend void swap(S2C_EnterLobby& a, S2C_EnterLobby& b) { a.Swap(&b); }
		inline void Swap(S2C_EnterLobby* other) {
			if (other == this) return;
			if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
				InternalSwap(other);
			}
			else {
				::google::protobuf::internal::GenericSwap(this, other);
			}
		}
		void UnsafeArenaSwap(S2C_EnterLobby* other) {
			if (other == this) return;
			ABSL_DCHECK(GetArena() == other->GetArena());
			InternalSwap(other);
		}

		// implements Message ----------------------------------------------

		S2C_EnterLobby* New(::google::protobuf::Arena* arena = nullptr) const {
			return ::google::protobuf::Message::DefaultConstruct<S2C_EnterLobby>(arena);
		}
		using ::google::protobuf::Message::CopyFrom;
		void CopyFrom(const S2C_EnterLobby& from);
		using ::google::protobuf::Message::MergeFrom;
		void MergeFrom(const S2C_EnterLobby& from) { S2C_EnterLobby::MergeImpl(*this, from); }

	private:
		static void MergeImpl(
			::google::protobuf::MessageLite& to_msg,
			const ::google::protobuf::MessageLite& from_msg);

	public:
		bool IsInitialized() const {
			return true;
		}
		ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
#if defined(PROTOBUF_CUSTOM_VTABLE)
	private:
		static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
		static ::uint8_t* _InternalSerialize(
			const MessageLite& msg, ::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream);

	public:
		::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
		::uint8_t* _InternalSerialize(
			::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream) const {
			return _InternalSerialize(*this, target, stream);
		}
#else   // PROTOBUF_CUSTOM_VTABLE
		::size_t ByteSizeLong() const final;
		::uint8_t* _InternalSerialize(
			::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream) const final;
#endif  // PROTOBUF_CUSTOM_VTABLE
		int GetCachedSize() const { return _impl_._cached_size_.Get(); }

	private:
		void SharedCtor(::google::protobuf::Arena* arena);
		static void SharedDtor(MessageLite& self);
		void InternalSwap(S2C_EnterLobby* other);
	private:
		template <typename T>
		friend ::absl::string_view(
			::google::protobuf::internal::GetAnyMessageName)();
		static ::absl::string_view FullMessageName() { return "lobby.S2C_EnterLobby"; }

	protected:
		explicit S2C_EnterLobby(::google::protobuf::Arena* arena);
		S2C_EnterLobby(::google::protobuf::Arena* arena, const S2C_EnterLobby& from);
		S2C_EnterLobby(::google::protobuf::Arena* arena, S2C_EnterLobby&& from) noexcept
			: S2C_EnterLobby(arena) {
			*this = ::std::move(from);
		}
		const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
		static void* PlacementNew_(const void*, void* mem,
			::google::protobuf::Arena* arena);
		static constexpr auto InternalNewImpl_();
		static const ::google::protobuf::internal::ClassDataFull _class_data_;

	public:
		::google::protobuf::Metadata GetMetadata() const;
		// nested types ----------------------------------------------------

		// accessors -------------------------------------------------------
		enum : int {
			kMessageFieldNumber = 2,
			kSuccessFieldNumber = 1,
		};
		// string message = 2;
		void clear_message();
		const std::string& message() const;
		template <typename Arg_ = const std::string&, typename... Args_>
		void set_message(Arg_&& arg, Args_... args);
		std::string* mutable_message();
		PROTOBUF_NODISCARD std::string* release_message();
		void set_allocated_message(std::string* value);

	private:
		const std::string& _internal_message() const;
		inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
			const std::string& value);
		std::string* _internal_mutable_message();

	public:
		// bool success = 1;
		void clear_success();
		bool success() const;
		void set_success(bool value);

	private:
		bool _internal_success() const;
		void _internal_set_success(bool value);

	public:
		// @@protoc_insertion_point(class_scope:lobby.S2C_EnterLobby)
	private:
		class _Internal;
		friend class ::google::protobuf::internal::TcParser;
		static const ::google::protobuf::internal::TcParseTable<
			1, 2, 0,
			36, 2>
			_table_;

		friend class ::google::protobuf::MessageLite;
		friend class ::google::protobuf::Arena;
		template <typename T>
		friend class ::google::protobuf::Arena::InternalHelper;
		using InternalArenaConstructable_ = void;
		using DestructorSkippable_ = void;
		struct Impl_ {
			inline explicit constexpr Impl_(
				::google::protobuf::internal::ConstantInitialized) noexcept;
			inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
				::google::protobuf::Arena* arena);
			inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
				::google::protobuf::Arena* arena, const Impl_& from,
				const S2C_EnterLobby& from_msg);
			::google::protobuf::internal::ArenaStringPtr message_;
			bool success_;
			::google::protobuf::internal::CachedSize _cached_size_;
			PROTOBUF_TSAN_DECLARE_MEMBER
		};
		union { Impl_ _impl_; };
		friend struct ::TableStruct_lobby_2eproto;
	};
	// -------------------------------------------------------------------

	class C2S_GameStart final : public ::google::protobuf::Message
		/* @@protoc_insertion_point(class_definition:lobby.C2S_GameStart) */ {
	public:
		inline C2S_GameStart() : C2S_GameStart(nullptr) {}
		~C2S_GameStart() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
		void operator delete(C2S_GameStart* msg, std::destroying_delete_t) {
			SharedDtor(*msg);
			::google::protobuf::internal::SizedDelete(msg, sizeof(C2S_GameStart));
		}
#endif

		template <typename = void>
		explicit PROTOBUF_CONSTEXPR C2S_GameStart(
			::google::protobuf::internal::ConstantInitialized);

		inline C2S_GameStart(const C2S_GameStart& from) : C2S_GameStart(nullptr, from) {}
		inline C2S_GameStart(C2S_GameStart&& from) noexcept
			: C2S_GameStart(nullptr, std::move(from)) {
		}
		inline C2S_GameStart& operator=(const C2S_GameStart& from) {
			CopyFrom(from);
			return *this;
		}
		inline C2S_GameStart& operator=(C2S_GameStart&& from) noexcept {
			if (this == &from) return *this;
			if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
				InternalSwap(&from);
			}
			else {
				CopyFrom(from);
			}
			return *this;
		}

		inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
			ABSL_ATTRIBUTE_LIFETIME_BOUND{
		  return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
		}
			inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
			ABSL_ATTRIBUTE_LIFETIME_BOUND{
		  return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
		}

			static const ::google::protobuf::Descriptor* descriptor() {
			return GetDescriptor();
		}
		static const ::google::protobuf::Descriptor* GetDescriptor() {
			return default_instance().GetMetadata().descriptor;
		}
		static const ::google::protobuf::Reflection* GetReflection() {
			return default_instance().GetMetadata().reflection;
		}
		static const C2S_GameStart& default_instance() {
			return *internal_default_instance();
		}
		static inline const C2S_GameStart* internal_default_instance() {
			return reinterpret_cast<const C2S_GameStart*>(
				&_C2S_GameStart_default_instance_);
		}
		static constexpr int kIndexInFileMessages = 3;
		friend void swap(C2S_GameStart& a, C2S_GameStart& b) { a.Swap(&b); }
		inline void Swap(C2S_GameStart* other) {
			if (other == this) return;
			if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
				InternalSwap(other);
			}
			else {
				::google::protobuf::internal::GenericSwap(this, other);
			}
		}
		void UnsafeArenaSwap(C2S_GameStart* other) {
			if (other == this) return;
			ABSL_DCHECK(GetArena() == other->GetArena());
			InternalSwap(other);
		}

		// implements Message ----------------------------------------------

		C2S_GameStart* New(::google::protobuf::Arena* arena = nullptr) const {
			return ::google::protobuf::Message::DefaultConstruct<C2S_GameStart>(arena);
		}
		using ::google::protobuf::Message::CopyFrom;
		void CopyFrom(const C2S_GameStart& from);
		using ::google::protobuf::Message::MergeFrom;
		void MergeFrom(const C2S_GameStart& from) { C2S_GameStart::MergeImpl(*this, from); }

	private:
		static void MergeImpl(
			::google::protobuf::MessageLite& to_msg,
			const ::google::protobuf::MessageLite& from_msg);

	public:
		bool IsInitialized() const {
			return true;
		}
		ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
#if defined(PROTOBUF_CUSTOM_VTABLE)
	private:
		static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
		static ::uint8_t* _InternalSerialize(
			const MessageLite& msg, ::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream);

	public:
		::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
		::uint8_t* _InternalSerialize(
			::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream) const {
			return _InternalSerialize(*this, target, stream);
		}
#else   // PROTOBUF_CUSTOM_VTABLE
		::size_t ByteSizeLong() const final;
		::uint8_t* _InternalSerialize(
			::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream) const final;
#endif  // PROTOBUF_CUSTOM_VTABLE
		int GetCachedSize() const { return _impl_._cached_size_.Get(); }

	private:
		void SharedCtor(::google::protobuf::Arena* arena);
		static void SharedDtor(MessageLite& self);
		void InternalSwap(C2S_GameStart* other);
	private:
		template <typename T>
		friend ::absl::string_view(
			::google::protobuf::internal::GetAnyMessageName)();
		static ::absl::string_view FullMessageName() { return "lobby.C2S_GameStart"; }

	protected:
		explicit C2S_GameStart(::google::protobuf::Arena* arena);
		C2S_GameStart(::google::protobuf::Arena* arena, const C2S_GameStart& from);
		C2S_GameStart(::google::protobuf::Arena* arena, C2S_GameStart&& from) noexcept
			: C2S_GameStart(arena) {
			*this = ::std::move(from);
		}
		const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
		static void* PlacementNew_(const void*, void* mem,
			::google::protobuf::Arena* arena);
		static constexpr auto InternalNewImpl_();
		static const ::google::protobuf::internal::ClassDataFull _class_data_;

	public:
		::google::protobuf::Metadata GetMetadata() const;
		// nested types ----------------------------------------------------

		// accessors -------------------------------------------------------
		enum : int {
			kUserIdFieldNumber = 1,
		};
		// string user_id = 1;
		void clear_user_id();
		const std::string& user_id() const;
		template <typename Arg_ = const std::string&, typename... Args_>
		void set_user_id(Arg_&& arg, Args_... args);
		std::string* mutable_user_id();
		PROTOBUF_NODISCARD std::string* release_user_id();
		void set_allocated_user_id(std::string* value);

	private:
		const std::string& _internal_user_id() const;
		inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
			const std::string& value);
		std::string* _internal_mutable_user_id();

	public:
		// @@protoc_insertion_point(class_scope:lobby.C2S_GameStart)
	private:
		class _Internal;
		friend class ::google::protobuf::internal::TcParser;
		static const ::google::protobuf::internal::TcParseTable<
			0, 1, 0,
			35, 2>
			_table_;

		friend class ::google::protobuf::MessageLite;
		friend class ::google::protobuf::Arena;
		template <typename T>
		friend class ::google::protobuf::Arena::InternalHelper;
		using InternalArenaConstructable_ = void;
		using DestructorSkippable_ = void;
		struct Impl_ {
			inline explicit constexpr Impl_(
				::google::protobuf::internal::ConstantInitialized) noexcept;
			inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
				::google::protobuf::Arena* arena);
			inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
				::google::protobuf::Arena* arena, const Impl_& from,
				const C2S_GameStart& from_msg);
			::google::protobuf::internal::ArenaStringPtr user_id_;
			::google::protobuf::internal::CachedSize _cached_size_;
			PROTOBUF_TSAN_DECLARE_MEMBER
		};
		union { Impl_ _impl_; };
		friend struct ::TableStruct_lobby_2eproto;
	};
	// -------------------------------------------------------------------

	class C2S_EnterLobby final : public ::google::protobuf::Message
		/* @@protoc_insertion_point(class_definition:lobby.C2S_EnterLobby) */ {
	public:
		inline C2S_EnterLobby() : C2S_EnterLobby(nullptr) {}
		~C2S_EnterLobby() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
		void operator delete(C2S_EnterLobby* msg, std::destroying_delete_t) {
			SharedDtor(*msg);
			::google::protobuf::internal::SizedDelete(msg, sizeof(C2S_EnterLobby));
		}
#endif

		template <typename = void>
		explicit PROTOBUF_CONSTEXPR C2S_EnterLobby(
			::google::protobuf::internal::ConstantInitialized);

		inline C2S_EnterLobby(const C2S_EnterLobby& from) : C2S_EnterLobby(nullptr, from) {}
		inline C2S_EnterLobby(C2S_EnterLobby&& from) noexcept
			: C2S_EnterLobby(nullptr, std::move(from)) {
		}
		inline C2S_EnterLobby& operator=(const C2S_EnterLobby& from) {
			CopyFrom(from);
			return *this;
		}
		inline C2S_EnterLobby& operator=(C2S_EnterLobby&& from) noexcept {
			if (this == &from) return *this;
			if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
				InternalSwap(&from);
			}
			else {
				CopyFrom(from);
			}
			return *this;
		}

		inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
			ABSL_ATTRIBUTE_LIFETIME_BOUND{
		  return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
		}
			inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
			ABSL_ATTRIBUTE_LIFETIME_BOUND{
		  return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
		}

			static const ::google::protobuf::Descriptor* descriptor() {
			return GetDescriptor();
		}
		static const ::google::protobuf::Descriptor* GetDescriptor() {
			return default_instance().GetMetadata().descriptor;
		}
		static const ::google::protobuf::Reflection* GetReflection() {
			return default_instance().GetMetadata().reflection;
		}
		static const C2S_EnterLobby& default_instance() {
			return *internal_default_instance();
		}
		static inline const C2S_EnterLobby* internal_default_instance() {
			return reinterpret_cast<const C2S_EnterLobby*>(
				&_C2S_EnterLobby_default_instance_);
		}
		static constexpr int kIndexInFileMessages = 0;
		friend void swap(C2S_EnterLobby& a, C2S_EnterLobby& b) { a.Swap(&b); }
		inline void Swap(C2S_EnterLobby* other) {
			if (other == this) return;
			if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
				InternalSwap(other);
			}
			else {
				::google::protobuf::internal::GenericSwap(this, other);
			}
		}
		void UnsafeArenaSwap(C2S_EnterLobby* other) {
			if (other == this) return;
			ABSL_DCHECK(GetArena() == other->GetArena());
			InternalSwap(other);
		}

		// implements Message ----------------------------------------------

		C2S_EnterLobby* New(::google::protobuf::Arena* arena = nullptr) const {
			return ::google::protobuf::Message::DefaultConstruct<C2S_EnterLobby>(arena);
		}
		using ::google::protobuf::Message::CopyFrom;
		void CopyFrom(const C2S_EnterLobby& from);
		using ::google::protobuf::Message::MergeFrom;
		void MergeFrom(const C2S_EnterLobby& from) { C2S_EnterLobby::MergeImpl(*this, from); }

	private:
		static void MergeImpl(
			::google::protobuf::MessageLite& to_msg,
			const ::google::protobuf::MessageLite& from_msg);

	public:
		bool IsInitialized() const {
			return true;
		}
		ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
#if defined(PROTOBUF_CUSTOM_VTABLE)
	private:
		static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
		static ::uint8_t* _InternalSerialize(
			const MessageLite& msg, ::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream);

	public:
		::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
		::uint8_t* _InternalSerialize(
			::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream) const {
			return _InternalSerialize(*this, target, stream);
		}
#else   // PROTOBUF_CUSTOM_VTABLE
		::size_t ByteSizeLong() const final;
		::uint8_t* _InternalSerialize(
			::uint8_t* target,
			::google::protobuf::io::EpsCopyOutputStream* stream) const final;
#endif  // PROTOBUF_CUSTOM_VTABLE
		int GetCachedSize() const { return _impl_._cached_size_.Get(); }

	private:
		void SharedCtor(::google::protobuf::Arena* arena);
		static void SharedDtor(MessageLite& self);
		void InternalSwap(C2S_EnterLobby* other);
	private:
		template <typename T>
		friend ::absl::string_view(
			::google::protobuf::internal::GetAnyMessageName)();
		static ::absl::string_view FullMessageName() { return "lobby.C2S_EnterLobby"; }

	protected:
		explicit C2S_EnterLobby(::google::protobuf::Arena* arena);
		C2S_EnterLobby(::google::protobuf::Arena* arena, const C2S_EnterLobby& from);
		C2S_EnterLobby(::google::protobuf::Arena* arena, C2S_EnterLobby&& from) noexcept
			: C2S_EnterLobby(arena) {
			*this = ::std::move(from);
		}
		const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
		static void* PlacementNew_(const void*, void* mem,
			::google::protobuf::Arena* arena);
		static constexpr auto InternalNewImpl_();
		static const ::google::protobuf::internal::ClassDataFull _class_data_;

	public:
		::google::protobuf::Metadata GetMetadata() const;
		// nested types ----------------------------------------------------

		// accessors -------------------------------------------------------
		enum : int {
			kUserIdFieldNumber = 1,
		};
		// string user_id = 1;
		void clear_user_id();
		const std::string& user_id() const;
		template <typename Arg_ = const std::string&, typename... Args_>
		void set_user_id(Arg_&& arg, Args_... args);
		std::string* mutable_user_id();
		PROTOBUF_NODISCARD std::string* release_user_id();
		void set_allocated_user_id(std::string* value);

	private:
		const std::string& _internal_user_id() const;
		inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
			const std::string& value);
		std::string* _internal_mutable_user_id();

	public:
		// @@protoc_insertion_point(class_scope:lobby.C2S_EnterLobby)
	private:
		class _Internal;
		friend class ::google::protobuf::internal::TcParser;
		static const ::google::protobuf::internal::TcParseTable<
			0, 1, 0,
			36, 2>
			_table_;

		friend class ::google::protobuf::MessageLite;
		friend class ::google::protobuf::Arena;
		template <typename T>
		friend class ::google::protobuf::Arena::InternalHelper;
		using InternalArenaConstructable_ = void;
		using DestructorSkippable_ = void;
		struct Impl_ {
			inline explicit constexpr Impl_(
				::google::protobuf::internal::ConstantInitialized) noexcept;
			inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
				::google::protobuf::Arena* arena);
			inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
				::google::protobuf::Arena* arena, const Impl_& from,
				const C2S_EnterLobby& from_msg);
			::google::protobuf::internal::ArenaStringPtr user_id_;
			::google::protobuf::internal::CachedSize _cached_size_;
			PROTOBUF_TSAN_DECLARE_MEMBER
		};
		union { Impl_ _impl_; };
		friend struct ::TableStruct_lobby_2eproto;
	};

	// ===================================================================

	// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// C2S_EnterLobby

// string user_id = 1;
	inline void C2S_EnterLobby::clear_user_id() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.user_id_.ClearToEmpty();
	}
	inline const std::string& C2S_EnterLobby::user_id() const
		ABSL_ATTRIBUTE_LIFETIME_BOUND{
		// @@protoc_insertion_point(field_get:lobby.C2S_EnterLobby.user_id)
		return _internal_user_id();
	}
		template <typename Arg_, typename... Args_>
	inline PROTOBUF_ALWAYS_INLINE void C2S_EnterLobby::set_user_id(Arg_&& arg,
		Args_... args) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
		// @@protoc_insertion_point(field_set:lobby.C2S_EnterLobby.user_id)
	}
	inline std::string* C2S_EnterLobby::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
		std::string* _s = _internal_mutable_user_id();
		// @@protoc_insertion_point(field_mutable:lobby.C2S_EnterLobby.user_id)
		return _s;
	}
	inline const std::string& C2S_EnterLobby::_internal_user_id() const {
		::google::protobuf::internal::TSanRead(&_impl_);
		return _impl_.user_id_.Get();
	}
	inline void C2S_EnterLobby::_internal_set_user_id(const std::string& value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.user_id_.Set(value, GetArena());
	}
	inline std::string* C2S_EnterLobby::_internal_mutable_user_id() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		return _impl_.user_id_.Mutable(GetArena());
	}
	inline std::string* C2S_EnterLobby::release_user_id() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		// @@protoc_insertion_point(field_release:lobby.C2S_EnterLobby.user_id)
		return _impl_.user_id_.Release();
	}
	inline void C2S_EnterLobby::set_allocated_user_id(std::string* value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.user_id_.SetAllocated(value, GetArena());
		if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
			_impl_.user_id_.Set("", GetArena());
		}
		// @@protoc_insertion_point(field_set_allocated:lobby.C2S_EnterLobby.user_id)
	}

	// -------------------------------------------------------------------

	// S2C_EnterLobby

	// bool success = 1;
	inline void S2C_EnterLobby::clear_success() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.success_ = false;
	}
	inline bool S2C_EnterLobby::success() const {
		// @@protoc_insertion_point(field_get:lobby.S2C_EnterLobby.success)
		return _internal_success();
	}
	inline void S2C_EnterLobby::set_success(bool value) {
		_internal_set_success(value);
		// @@protoc_insertion_point(field_set:lobby.S2C_EnterLobby.success)
	}
	inline bool S2C_EnterLobby::_internal_success() const {
		::google::protobuf::internal::TSanRead(&_impl_);
		return _impl_.success_;
	}
	inline void S2C_EnterLobby::_internal_set_success(bool value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.success_ = value;
	}

	// string message = 2;
	inline void S2C_EnterLobby::clear_message() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.message_.ClearToEmpty();
	}
	inline const std::string& S2C_EnterLobby::message() const
		ABSL_ATTRIBUTE_LIFETIME_BOUND{
		// @@protoc_insertion_point(field_get:lobby.S2C_EnterLobby.message)
		return _internal_message();
	}
		template <typename Arg_, typename... Args_>
	inline PROTOBUF_ALWAYS_INLINE void S2C_EnterLobby::set_message(Arg_&& arg,
		Args_... args) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
		// @@protoc_insertion_point(field_set:lobby.S2C_EnterLobby.message)
	}
	inline std::string* S2C_EnterLobby::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
		std::string* _s = _internal_mutable_message();
		// @@protoc_insertion_point(field_mutable:lobby.S2C_EnterLobby.message)
		return _s;
	}
	inline const std::string& S2C_EnterLobby::_internal_message() const {
		::google::protobuf::internal::TSanRead(&_impl_);
		return _impl_.message_.Get();
	}
	inline void S2C_EnterLobby::_internal_set_message(const std::string& value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.message_.Set(value, GetArena());
	}
	inline std::string* S2C_EnterLobby::_internal_mutable_message() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		return _impl_.message_.Mutable(GetArena());
	}
	inline std::string* S2C_EnterLobby::release_message() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		// @@protoc_insertion_point(field_release:lobby.S2C_EnterLobby.message)
		return _impl_.message_.Release();
	}
	inline void S2C_EnterLobby::set_allocated_message(std::string* value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.message_.SetAllocated(value, GetArena());
		if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
			_impl_.message_.Set("", GetArena());
		}
		// @@protoc_insertion_point(field_set_allocated:lobby.S2C_EnterLobby.message)
	}

	// -------------------------------------------------------------------

	// S2C_LobbyUserList

	// repeated string users = 1;
	inline int S2C_LobbyUserList::_internal_users_size() const {
		return _internal_users().size();
	}
	inline int S2C_LobbyUserList::users_size() const {
		return _internal_users_size();
	}
	inline void S2C_LobbyUserList::clear_users() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.users_.Clear();
	}
	inline std::string* S2C_LobbyUserList::add_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
		::google::protobuf::internal::TSanWrite(&_impl_);
		std::string* _s = _internal_mutable_users()->Add();
		// @@protoc_insertion_point(field_add_mutable:lobby.S2C_LobbyUserList.users)
		return _s;
	}
	inline const std::string& S2C_LobbyUserList::users(int index) const
		ABSL_ATTRIBUTE_LIFETIME_BOUND{
		// @@protoc_insertion_point(field_get:lobby.S2C_LobbyUserList.users)
		return _internal_users().Get(index);
	}
		inline std::string* S2C_LobbyUserList::mutable_users(int index)
		ABSL_ATTRIBUTE_LIFETIME_BOUND{
		// @@protoc_insertion_point(field_mutable:lobby.S2C_LobbyUserList.users)
		return _internal_mutable_users()->Mutable(index);
	}
		template <typename Arg_, typename... Args_>
	inline void S2C_LobbyUserList::set_users(int index, Arg_&& value, Args_... args) {
		::google::protobuf::internal::AssignToString(
			*_internal_mutable_users()->Mutable(index),
			std::forward<Arg_>(value), args...);
		// @@protoc_insertion_point(field_set:lobby.S2C_LobbyUserList.users)
	}
	template <typename Arg_, typename... Args_>
	inline void S2C_LobbyUserList::add_users(Arg_&& value, Args_... args) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_users(),
			std::forward<Arg_>(value),
			args...);
		// @@protoc_insertion_point(field_add:lobby.S2C_LobbyUserList.users)
	}
	inline const ::google::protobuf::RepeatedPtrField<std::string>&
		S2C_LobbyUserList::users() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
		// @@protoc_insertion_point(field_list:lobby.S2C_LobbyUserList.users)
		return _internal_users();
	}
	inline ::google::protobuf::RepeatedPtrField<std::string>*
		S2C_LobbyUserList::mutable_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
		// @@protoc_insertion_point(field_mutable_list:lobby.S2C_LobbyUserList.users)
		::google::protobuf::internal::TSanWrite(&_impl_);
		return _internal_mutable_users();
	}
	inline const ::google::protobuf::RepeatedPtrField<std::string>&
		S2C_LobbyUserList::_internal_users() const {
		::google::protobuf::internal::TSanRead(&_impl_);
		return _impl_.users_;
	}
	inline ::google::protobuf::RepeatedPtrField<std::string>*
		S2C_LobbyUserList::_internal_mutable_users() {
		::google::protobuf::internal::TSanRead(&_impl_);
		return &_impl_.users_;
	}

	// -------------------------------------------------------------------

	// C2S_GameStart

	// string user_id = 1;
	inline void C2S_GameStart::clear_user_id() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.user_id_.ClearToEmpty();
	}
	inline const std::string& C2S_GameStart::user_id() const
		ABSL_ATTRIBUTE_LIFETIME_BOUND{
		// @@protoc_insertion_point(field_get:lobby.C2S_GameStart.user_id)
		return _internal_user_id();
	}
		template <typename Arg_, typename... Args_>
	inline PROTOBUF_ALWAYS_INLINE void C2S_GameStart::set_user_id(Arg_&& arg,
		Args_... args) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
		// @@protoc_insertion_point(field_set:lobby.C2S_GameStart.user_id)
	}
	inline std::string* C2S_GameStart::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
		std::string* _s = _internal_mutable_user_id();
		// @@protoc_insertion_point(field_mutable:lobby.C2S_GameStart.user_id)
		return _s;
	}
	inline const std::string& C2S_GameStart::_internal_user_id() const {
		::google::protobuf::internal::TSanRead(&_impl_);
		return _impl_.user_id_.Get();
	}
	inline void C2S_GameStart::_internal_set_user_id(const std::string& value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.user_id_.Set(value, GetArena());
	}
	inline std::string* C2S_GameStart::_internal_mutable_user_id() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		return _impl_.user_id_.Mutable(GetArena());
	}
	inline std::string* C2S_GameStart::release_user_id() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		// @@protoc_insertion_point(field_release:lobby.C2S_GameStart.user_id)
		return _impl_.user_id_.Release();
	}
	inline void C2S_GameStart::set_allocated_user_id(std::string* value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.user_id_.SetAllocated(value, GetArena());
		if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_id_.IsDefault()) {
			_impl_.user_id_.Set("", GetArena());
		}
		// @@protoc_insertion_point(field_set_allocated:lobby.C2S_GameStart.user_id)
	}

	// -------------------------------------------------------------------

	// S2C_GameStart

	// bool success = 1;
	inline void S2C_GameStart::clear_success() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.success_ = false;
	}
	inline bool S2C_GameStart::success() const {
		// @@protoc_insertion_point(field_get:lobby.S2C_GameStart.success)
		return _internal_success();
	}
	inline void S2C_GameStart::set_success(bool value) {
		_internal_set_success(value);
		// @@protoc_insertion_point(field_set:lobby.S2C_GameStart.success)
	}
	inline bool S2C_GameStart::_internal_success() const {
		::google::protobuf::internal::TSanRead(&_impl_);
		return _impl_.success_;
	}
	inline void S2C_GameStart::_internal_set_success(bool value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.success_ = value;
	}

	// string room_id = 2;
	inline void S2C_GameStart::clear_room_id() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.room_id_.ClearToEmpty();
	}
	inline const std::string& S2C_GameStart::room_id() const
		ABSL_ATTRIBUTE_LIFETIME_BOUND{
		// @@protoc_insertion_point(field_get:lobby.S2C_GameStart.room_id)
		return _internal_room_id();
	}
		template <typename Arg_, typename... Args_>
	inline PROTOBUF_ALWAYS_INLINE void S2C_GameStart::set_room_id(Arg_&& arg,
		Args_... args) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.room_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
		// @@protoc_insertion_point(field_set:lobby.S2C_GameStart.room_id)
	}
	inline std::string* S2C_GameStart::mutable_room_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
		std::string* _s = _internal_mutable_room_id();
		// @@protoc_insertion_point(field_mutable:lobby.S2C_GameStart.room_id)
		return _s;
	}
	inline const std::string& S2C_GameStart::_internal_room_id() const {
		::google::protobuf::internal::TSanRead(&_impl_);
		return _impl_.room_id_.Get();
	}
	inline void S2C_GameStart::_internal_set_room_id(const std::string& value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.room_id_.Set(value, GetArena());
	}
	inline std::string* S2C_GameStart::_internal_mutable_room_id() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		return _impl_.room_id_.Mutable(GetArena());
	}
	inline std::string* S2C_GameStart::release_room_id() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		// @@protoc_insertion_point(field_release:lobby.S2C_GameStart.room_id)
		return _impl_.room_id_.Release();
	}
	inline void S2C_GameStart::set_allocated_room_id(std::string* value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.room_id_.SetAllocated(value, GetArena());
		if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.room_id_.IsDefault()) {
			_impl_.room_id_.Set("", GetArena());
		}
		// @@protoc_insertion_point(field_set_allocated:lobby.S2C_GameStart.room_id)
	}

	// string message = 3;
	inline void S2C_GameStart::clear_message() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.message_.ClearToEmpty();
	}
	inline const std::string& S2C_GameStart::message() const
		ABSL_ATTRIBUTE_LIFETIME_BOUND{
		// @@protoc_insertion_point(field_get:lobby.S2C_GameStart.message)
		return _internal_message();
	}
		template <typename Arg_, typename... Args_>
	inline PROTOBUF_ALWAYS_INLINE void S2C_GameStart::set_message(Arg_&& arg,
		Args_... args) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
		// @@protoc_insertion_point(field_set:lobby.S2C_GameStart.message)
	}
	inline std::string* S2C_GameStart::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
		std::string* _s = _internal_mutable_message();
		// @@protoc_insertion_point(field_mutable:lobby.S2C_GameStart.message)
		return _s;
	}
	inline const std::string& S2C_GameStart::_internal_message() const {
		::google::protobuf::internal::TSanRead(&_impl_);
		return _impl_.message_.Get();
	}
	inline void S2C_GameStart::_internal_set_message(const std::string& value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.message_.Set(value, GetArena());
	}
	inline std::string* S2C_GameStart::_internal_mutable_message() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		return _impl_.message_.Mutable(GetArena());
	}
	inline std::string* S2C_GameStart::release_message() {
		::google::protobuf::internal::TSanWrite(&_impl_);
		// @@protoc_insertion_point(field_release:lobby.S2C_GameStart.message)
		return _impl_.message_.Release();
	}
	inline void S2C_GameStart::set_allocated_message(std::string* value) {
		::google::protobuf::internal::TSanWrite(&_impl_);
		_impl_.message_.SetAllocated(value, GetArena());
		if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
			_impl_.message_.Set("", GetArena());
		}
		// @@protoc_insertion_point(field_set_allocated:lobby.S2C_GameStart.message)
	}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

	// @@protoc_insertion_point(namespace_scope)
}  // namespace lobby

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // lobby_2eproto_2epb_2eh
